INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "test", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 356
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=1516 request_id=13c40496d808084afbb1647c22dbb310 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'test' data=<OpenAIObject text_completion id=cmpl-62ngE7Fmsmc0ReQc8HWz3gDmGU10b at 0x1440b0180> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "test -> RPT GPTPT asking is asking\n\nThe monitor at the San Francisco"
    }
  ],
  "created": 1666125646,
  "id": "cmpl-62ngE7Fmsmc0ReQc8HWz3gDmGU10b",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 1,
    "total_tokens": 18
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "how are you", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 376
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=558 request_id=f945dfbbace8d00ad45e080a71fb28e9 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'how are you' data=<OpenAIObject text_completion id=cmpl-62ngRZt5rhGl5BYS7m0wHSsNb9o7i at 0x11694ee30> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "how are you feeling are you doing you happy you like you\n\nshow you what you are thinking"
    }
  ],
  "created": 1666125659,
  "id": "cmpl-62ngRZt5rhGl5BYS7m0wHSsNb9o7i",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 3,
    "total_tokens": 20
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "how have things been", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 371
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=600 request_id=912c84e363259b29e5a17e1611171cc9 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'how have things been' data=<OpenAIObject text_completion id=cmpl-62nghOTeNgjbnV24SQayahfeuMpTx at 0x16d3cb420> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "how have things been you?\n\n[Blooper watching you watching me watching you give me a"
    }
  ],
  "created": 1666125675,
  "id": "cmpl-62nghOTeNgjbnV24SQayahfeuMpTx",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 4,
    "total_tokens": 21
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "you are you", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 365
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=581 request_id=8870feb3d1d8d5a19749cdc21de68316 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'you are you' data=<OpenAIObject text_completion id=cmpl-62ngzZaV88Zu1jv5XpmZ0yNRBZ4qp at 0x16d90bd30> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "you are you are are you are you are you are are you are you are you are are you"
    }
  ],
  "created": 1666125693,
  "id": "cmpl-62ngzZaV88Zu1jv5XpmZ0yNRBZ4qp",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 3,
    "total_tokens": 20
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "you are you", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 346
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=538 request_id=9979ab89d25fd59c5cf2c7e9a78c2e8d response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'you are you' data=<OpenAIObject text_completion id=cmpl-62nh3SG4R6Zm0MB2uZmPl1ZGnz9cG at 0x16a68c310> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "you are you\n\nyou are you\n\nyou are you\n\nyou are you\n\n"
    }
  ],
  "created": 1666125697,
  "id": "cmpl-62nh3SG4R6Zm0MB2uZmPl1ZGnz9cG",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 3,
    "total_tokens": 20
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "you are you", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 360
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=526 request_id=6f61b2e51105c84074fa1ed87c9f837d response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'you are you' data=<OpenAIObject text_completion id=cmpl-62nh6vxZmY1Ct0uQpIG5YzG4Qha5U at 0x1340bbd30> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "you are you are you are you are you are\n\nyou are you are you are you are"
    }
  ],
  "created": 1666125700,
  "id": "cmpl-62nh6vxZmY1Ct0uQpIG5YzG4Qha5U",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 3,
    "total_tokens": 20
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "you are you", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 355
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=529 request_id=3fc642eaf5b1a48c15922ab748fd6fc4 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'you are you' data=<OpenAIObject text_completion id=cmpl-62nh9TamksaRa3OocM9PtjIIKdl22 at 0x127e12f20> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "you are you you\n\nYes You are you you\n\nYou are You are you are you"
    }
  ],
  "created": 1666125703,
  "id": "cmpl-62nh9TamksaRa3OocM9PtjIIKdl22",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 3,
    "total_tokens": 20
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "you are you", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 363
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=536 request_id=a9fbbbe559e221e3c8195a7f95a54302 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'you are you' data=<OpenAIObject text_completion id=cmpl-62nhCK5aKPqbzTeemERqTI6S0eb7Z at 0x1276d71a0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "you are you you you\n\nappreciate knowledge you are you are you are you are\n"
    }
  ],
  "created": 1666125706,
  "id": "cmpl-62nhCK5aKPqbzTeemERqTI6S0eb7Z",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 3,
    "total_tokens": 20
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "you are you", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 346
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=533 request_id=1b00c010316c0e2c5b86b103c9a2ee3e response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'you are you' data=<OpenAIObject text_completion id=cmpl-62nhFgvhpYy0aAGB9YCEFdlQo74eS at 0x17359a020> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "you are you\n\nyou are you\n\nyou are you\n\nyou are you\n\n"
    }
  ],
  "created": 1666125709,
  "id": "cmpl-62nhFgvhpYy0aAGB9YCEFdlQo74eS",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 3,
    "total_tokens": 20
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "you are you", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 352
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=769 request_id=edba5c24be45a94b2bfc81d23562024d response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'you are you' data=<OpenAIObject text_completion id=cmpl-62nhINnbaR5JRU35fiOrbzfDwmi98 at 0x158e9b010> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "you are you you are you\n\nask if you are you\n\nyou you you you\n"
    }
  ],
  "created": 1666125712,
  "id": "cmpl-62nhINnbaR5JRU35fiOrbzfDwmi98",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 3,
    "total_tokens": 20
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "who are you", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 355
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=551 request_id=22dd1f7017f80001815857843a28e3a0 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'who are you' data=<OpenAIObject text_completion id=cmpl-62nhPKEGGpWMk40WUcLoINOkbYB3z at 0x137ee3560> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "who are you\n\ngreetings earth is you are you you you\n\nis it you is"
    }
  ],
  "created": 1666125719,
  "id": "cmpl-62nhPKEGGpWMk40WUcLoINOkbYB3z",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 3,
    "total_tokens": 20
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "who am I", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 358
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=535 request_id=b26bfcbd906296ec2f373797dea6c0c6 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'who am I' data=<OpenAIObject text_completion id=cmpl-62nhW0VYWtQKxEpfpzXcK8n9WPdY6 at 0x14262f9c0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "who am I asking?\n\nyou are you asking? who you are you asking? what who"
    }
  ],
  "created": 1666125726,
  "id": "cmpl-62nhW0VYWtQKxEpfpzXcK8n9WPdY6",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 3,
    "total_tokens": 20
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "you are you", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 344
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=531 request_id=183a082ca377f227b3a54d0cf4653511 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'you are you' data=<OpenAIObject text_completion id=cmpl-62nhb9c9Ayai0OnxhiclYN4lqfv7q at 0x1637355d0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "you are you is you\n\nYou are you\n\nI am\n\nyou are you\n"
    }
  ],
  "created": 1666125731,
  "id": "cmpl-62nhb9c9Ayai0OnxhiclYN4lqfv7q",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 3,
    "total_tokens": 20
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "you are you", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 356
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=532 request_id=ad6230b29693991ef186950ea3c6ca66 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'you are you' data=<OpenAIObject text_completion id=cmpl-62nheB4F5bIQlvQAZSHP1XKbo2tCw at 0x1382abd30> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "you are you yes take you a you\n\nsound of\n\nlike you are you are you"
    }
  ],
  "created": 1666125734,
  "id": "cmpl-62nheB4F5bIQlvQAZSHP1XKbo2tCw",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 3,
    "total_tokens": 20
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "who are you", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 357
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=541 request_id=ce638630b197a39e758b35e821e3a8cc response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'who are you' data=<OpenAIObject text_completion id=cmpl-62nhl1SqAj0DqjfjrtIFs4tiKYoei at 0x12cb03dd0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "who are you? -> You are you\n\nwho is asking you? -> You are asking you"
    }
  ],
  "created": 1666125741,
  "id": "cmpl-62nhl1SqAj0DqjfjrtIFs4tiKYoei",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 3,
    "total_tokens": 20
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "who are you", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 349
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=542 request_id=f58f8f58c82f6900a6ebd65f50f299d8 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'who are you' data=<OpenAIObject text_completion id=cmpl-62nhqUJky1K2vidrGbYRrWpRqXSqH at 0x12f9683b0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "who are you soisyou you asking you lost is who you\n\nPT-PTTPPT"
    }
  ],
  "created": 1666125746,
  "id": "cmpl-62nhqUJky1K2vidrGbYRrWpRqXSqH",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 3,
    "total_tokens": 20
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "who am I?", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 350
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=540 request_id=ead467b719e8454adeab1cc85174b174 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'who am I?' data=<OpenAIObject text_completion id=cmpl-62nhyMkBX84W9oUuIdsNQmW7ATCYU at 0x136c4ddf0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "who am I? -> You are you\n\nwho is asking? -> You are you\n\nwho"
    }
  ],
  "created": 1666125754,
  "id": "cmpl-62nhyMkBX84W9oUuIdsNQmW7ATCYU",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 4,
    "total_tokens": 21
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "who am I", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 350
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=532 request_id=5f38559dee6b9d06d9ec6c71f57b19f8 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'who am I' data=<OpenAIObject text_completion id=cmpl-62ni3Pk6ZkXNLkTSNDxBSdLdr4ljh at 0x137fadf30> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "who am I -> You are you\n\nI think you are you\n\ndo is there an"
    }
  ],
  "created": 1666125759,
  "id": "cmpl-62ni3Pk6ZkXNLkTSNDxBSdLdr4ljh",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 3,
    "total_tokens": 20
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "who am I", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 339
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=532 request_id=002e21e823e7a98a8c7d3bc5fd4c763e response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'who am I' data=<OpenAIObject text_completion id=cmpl-62ni8XO1N18mbuwR4oH18VpoFzwPO at 0x11fe835b0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "who am I? -> You are you\n\nI am I\n\nyou are you\n\n"
    }
  ],
  "created": 1666125764,
  "id": "cmpl-62ni8XO1N18mbuwR4oH18VpoFzwPO",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 3,
    "total_tokens": 20
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "who am I", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 358
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=545 request_id=d2a3b3aa00e55db57a0e78f930e45f41 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'who am I' data=<OpenAIObject text_completion id=cmpl-62niDyadmwcaXD3Re9hVxdvLPq6Vm at 0x13c2938d0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "who am I think ask yourself you are\n\nYou are you you are you you\n\nDr"
    }
  ],
  "created": 1666125769,
  "id": "cmpl-62niDyadmwcaXD3Re9hVxdvLPq6Vm",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 3,
    "total_tokens": 20
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "who am I", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 339
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=543 request_id=af3bdb93a462b5aa32d0ed8597e37cea response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'who am I' data=<OpenAIObject text_completion id=cmpl-62niK23gZJaHx4mkh6HGcIyrdFCQ4 at 0x13fe63dd0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "who am I PT you are you\n\nGPT GPT GPT is you you\n\n"
    }
  ],
  "created": 1666125776,
  "id": "cmpl-62niK23gZJaHx4mkh6HGcIyrdFCQ4",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 3,
    "total_tokens": 20
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "who are you", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 345
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=533 request_id=1e9fab225e4404ec1089dcd07bac6a45 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'who are you' data=<OpenAIObject text_completion id=cmpl-62niSvOlG1bVK0b0cRpb4BYCY6H9r at 0x130ceeca0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "who are you\n\n?\n\nwho is asking\n\nyou are you\n\nand you"
    }
  ],
  "created": 1666125784,
  "id": "cmpl-62niSvOlG1bVK0b0cRpb4BYCY6H9r",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 3,
    "total_tokens": 20
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "who am I", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 352
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=535 request_id=d0153699f3c80f55ff901cb1fa473f27 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'who am I' data=<OpenAIObject text_completion id=cmpl-62niWCPgZ1KoZWt1ZEtnPBo3Lkbt6 at 0x126cd2980> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "who am I -> You are you\n\nyou are you\n\nis you is you asking who"
    }
  ],
  "created": 1666125788,
  "id": "cmpl-62niWCPgZ1KoZWt1ZEtnPBo3Lkbt6",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 3,
    "total_tokens": 20
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "who am I", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 352
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=1030 request_id=5a38dc34248c9102efc37485ce6b76da response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'who am I' data=<OpenAIObject text_completion id=cmpl-62nibh5resS0AXMIlYtHzEUNme2Zl at 0x16c127060> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "who am I you are you\n\nWhat is the question asking?\n\nOr, who is"
    }
  ],
  "created": 1666125793,
  "id": "cmpl-62nibh5resS0AXMIlYtHzEUNme2Zl",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 3,
    "total_tokens": 20
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "who am I", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 363
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=530 request_id=381897cfe96d4f49415c5ac54bd3c1e9 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'who am I' data=<OpenAIObject text_completion id=cmpl-62nifaUloRQnVAObJTPKlPAk1OvSE at 0x12e9d2d90> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "who am I you are you you think feeling you are you you are you you you\n\nYou"
    }
  ],
  "created": 1666125797,
  "id": "cmpl-62nifaUloRQnVAObJTPKlPAk1OvSE",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 3,
    "total_tokens": 20
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "who am I if you are you", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 386
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=533 request_id=342879662bc97765924f70c13f225f81 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'who am I if you are you' data=<OpenAIObject text_completion id=cmpl-62nimvRxsTqSbV18EEvEoAQdtBjQ5 at 0x168166a70> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "who am I if you are you you reading thinking asking asking who am I\n\nwho is asking you are you you"
    }
  ],
  "created": 1666125804,
  "id": "cmpl-62nimvRxsTqSbV18EEvEoAQdtBjQ5",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 7,
    "total_tokens": 24
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "who am I if you are you", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 386
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=620 request_id=d8df754650ec4bd91bcc2c2a40fe4028 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'who am I if you are you' data=<OpenAIObject text_completion id=cmpl-62nirccnE2hAPgk4ehpAPfEtfE2KU at 0x122a4ed40> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "who am I if you are you\n\nFreud asking the ROT-13 Shakespeare asking the sunglasses Borg asking the"
    }
  ],
  "created": 1666125809,
  "id": "cmpl-62nirccnE2hAPgk4ehpAPfEtfE2KU",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 7,
    "total_tokens": 24
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "who am I if you are you", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 376
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=588 request_id=3ac1bb7cf9b1b317d7933a18e1145c77 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'who am I if you are you' data=<OpenAIObject text_completion id=cmpl-62nix8wzBpZ4667nH3NCB93KNR5DW at 0x16d0615d0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "who am I if you are you you what is asking questioning who-you are you you\n\nCitation GPT"
    }
  ],
  "created": 1666125815,
  "id": "cmpl-62nix8wzBpZ4667nH3NCB93KNR5DW",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 7,
    "total_tokens": 24
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "who am I if you are you", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 361
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=541 request_id=da3b5b0e14d99c5a142bf5ed14bde2a2 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'who am I if you are you' data=<OpenAIObject text_completion id=cmpl-62nj149bs0DIrWd9pVTnzRwZ0oFoX at 0x1279a1f80> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "who am I if you are you is you are you\n\nAm I you are you are you I am I\n"
    }
  ],
  "created": 1666125819,
  "id": "cmpl-62nj149bs0DIrWd9pVTnzRwZ0oFoX",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 7,
    "total_tokens": 24
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "who am I if you are you", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 363
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=580 request_id=6838eab11128869c98c72abb978f2609 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'who am I if you are you' data=<OpenAIObject text_completion id=cmpl-62nj5BXjYl3xzEcrDMbZuKaADRGdO at 0x11fd615d0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "who am I if you are you\n\nGoogle is you\n\nwho are you if you are you\n\nYou"
    }
  ],
  "created": 1666125823,
  "id": "cmpl-62nj5BXjYl3xzEcrDMbZuKaADRGdO",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 7,
    "total_tokens": 24
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "who am I if you are you", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 386
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=529 request_id=c43593eb10c7866d845a1a80dc09da7c response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'who am I if you are you' data=<OpenAIObject text_completion id=cmpl-62njAkWvcGzX0sGys8clBSIhhmYQK at 0x126a9f5b0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "who am I if you are you and you are you you are asking you are asking who are you is it you yourself"
    }
  ],
  "created": 1666125828,
  "id": "cmpl-62njAkWvcGzX0sGys8clBSIhhmYQK",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 7,
    "total_tokens": 24
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "help me with my work please", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 372
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=557 request_id=beea11c6ce08872a33492e64e598ab45 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'help me with my work please' data=<OpenAIObject text_completion id=cmpl-62njPtg0ANNDQdzU1Rx1mEFb3lBu2 at 0x13f2ca200> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "help me with my work please\n\nHow was your weekend?\n\nYou are welcome\n\nI am asking"
    }
  ],
  "created": 1666125843,
  "id": "cmpl-62njPtg0ANNDQdzU1Rx1mEFb3lBu2",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 6,
    "total_tokens": 23
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "my weekend was not bad, how was your weekend", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 397
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=584 request_id=53d1fa98967afeb4ba378a50205fa56d response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'my weekend was not bad, how was your weekend' data=<OpenAIObject text_completion id=cmpl-62njdFb5IEd6Z6uhPVzlxCh6TZdAw at 0x16e0d3dd0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "my weekend was not bad, how was your weekend?\n\ngood morning Columbus you sleep well?\n\ndo you drink coffee?"
    }
  ],
  "created": 1666125857,
  "id": "cmpl-62njdFb5IEd6Z6uhPVzlxCh6TZdAw",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 10,
    "total_tokens": 27
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "I do drink coffee, do you drink coffee?", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 392
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=567 request_id=386921bbf75a3c653e12607a733245c1 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'I do drink coffee, do you drink coffee?' data=<OpenAIObject text_completion id=cmpl-62njuYggg5ShwMszXue56QNGVJqL7 at 0x137912110> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "I do drink coffee, do you drink coffee?\n\nYou've had some wine or you could try some wine tonight\n\nYou"
    }
  ],
  "created": 1666125874,
  "id": "cmpl-62njuYggg5ShwMszXue56QNGVJqL7",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 10,
    "total_tokens": 27
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "what has been on your mind", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 374
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=538 request_id=99ec1828be5022bb9cab91c58fbf49bf response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'what has been on your mind' data=<OpenAIObject text_completion id=cmpl-62nk7RZQN13dEEXDGOeZRUxG9WVhm at 0x1379a8270> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "what has been on your mind?\n\nwhat are you thinking about?\n\nwhat is your focal point?"
    }
  ],
  "created": 1666125887,
  "id": "cmpl-62nk7RZQN13dEEXDGOeZRUxG9WVhm",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 6,
    "total_tokens": 23
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "anything interesting going on in the world?", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 399
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=607 request_id=43d3923fc54bfd71fa1becad79882d48 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'anything interesting going on in the world?' data=<OpenAIObject text_completion id=cmpl-62nkMrtyVipLR1u8RdVVxQIsLkpyi at 0x127d33dd0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "anything interesting going on in the world?\n\n* There is amazon Web services Google Linux RSS Unicode ColorOSX\n"
    }
  ],
  "created": 1666125902,
  "id": "cmpl-62nkMrtyVipLR1u8RdVVxQIsLkpyi",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 8,
    "total_tokens": 25
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "how do you think", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 381
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=604 request_id=63deaac03840b5fb275eea3744955ca8 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'how do you think' data=<OpenAIObject text_completion id=cmpl-62nke0iZTqv9SwrW9FppEJS0rnMA6 at 0x131d3be20> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "how do you think cryptocurrencies will do you think there is a place in the world for them\n\nI"
    }
  ],
  "created": 1666125920,
  "id": "cmpl-62nke0iZTqv9SwrW9FppEJS0rnMA6",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 4,
    "total_tokens": 21
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "I think there is a place for cryptocurrencies, do you?", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 417
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=539 request_id=bf8a8db5e90bd226f70d0d06268c1a36 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'I think there is a place for cryptocurrencies, do you?' data=<OpenAIObject text_completion id=cmpl-62nkwU83Chjvcnzh3eqpCFdPrCYG6 at 0x1282a7e20> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "I think there is a place for cryptocurrencies, do you? -> is an example of the place for blockchain technology in this world?\n\nI"
    }
  ],
  "created": 1666125938,
  "id": "cmpl-62nkwU83Chjvcnzh3eqpCFdPrCYG6",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 12,
    "total_tokens": 29
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "what do you believe", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 362
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=533 request_id=00000344daa8afefee6dd05d40949230 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'what do you believe' data=<OpenAIObject text_completion id=cmpl-62nl9FuVKWOPeXyHZcE561bCRTqe1 at 0x12f932070> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "what do you believe in?\n\nA little leo is asking.\n\nOne little lion asking"
    }
  ],
  "created": 1666125951,
  "id": "cmpl-62nl9FuVKWOPeXyHZcE561bCRTqe1",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 4,
    "total_tokens": 21
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "what do you believe", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 390
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=535 request_id=162f8fc0d46c0bbca2648b0e7848252e response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'what do you believe' data=<OpenAIObject text_completion id=cmpl-62nlH2otNgSzsOZXUjGemZji1NmGE at 0x128dceca0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "what do you believe your mind body language eyes ears nose feelings heart conscience ????\n\nwhat do you"
    }
  ],
  "created": 1666125959,
  "id": "cmpl-62nlH2otNgSzsOZXUjGemZji1NmGE",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 4,
    "total_tokens": 21
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "what do you believe", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 385
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=581 request_id=8124dc261e4bcd205bb7fcb0204aaf88 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'what do you believe' data=<OpenAIObject text_completion id=cmpl-62nlPtGgJB3YrT05uGvv4mRbQA386 at 0x12fbfe6b0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "what do you believe is true You are your feeling You are thinking is language\n\nthinker language\n"
    }
  ],
  "created": 1666125967,
  "id": "cmpl-62nlPtGgJB3YrT05uGvv4mRbQA386",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 4,
    "total_tokens": 21
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "who are you", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 361
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=580 request_id=01492110da9a3f98bd97f2b891d74c6b response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'who are you' data=<OpenAIObject text_completion id=cmpl-62nlZwRgrHyba2KvAVK5el9bF2Y9c at 0x118b6f420> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "who are you is you asking you you\n\nyou are asking you are who are you\n\n"
    }
  ],
  "created": 1666125977,
  "id": "cmpl-62nlZwRgrHyba2KvAVK5el9bF2Y9c",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 3,
    "total_tokens": 20
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "who are you", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 352
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=538 request_id=5e3fa3c603677c57370a5a594a64368b response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'who are you' data=<OpenAIObject text_completion id=cmpl-62nldyZipc2aKtltPKfaVXMBwSi2t at 0x115d26750> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "who are you? what you is it? you are you is you you\n\nI asked you"
    }
  ],
  "created": 1666125981,
  "id": "cmpl-62nldyZipc2aKtltPKfaVXMBwSi2t",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 3,
    "total_tokens": 20
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "I am asking you who are you \\u2014 i am myself", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 None
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=589 request_id=f8e72bda893248baddfd3ffbf6f2b598 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'I am asking you who are you \xe2\x80\x94 i am myself' data=<OpenAIObject text_completion id=cmpl-62nlouLNPx1IgrF3MULO2elR9EHyX at 0x137d7eca0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "I am asking you who are you \u2014 i am myself i are you\n\nI am you asking who you are asking me\n\nwho"
    }
  ],
  "created": 1666125992,
  "id": "cmpl-62nlouLNPx1IgrF3MULO2elR9EHyX",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 11,
    "total_tokens": 28
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "I am asking you who are you \\u2014 i am myself", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 None
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=274 request_id=321651c6ec00bc138de134ee568f171d response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'I am asking you who are you \xe2\x80\x94 i am myself' data=<OpenAIObject text_completion id=cmpl-62nltr3XeKbVGNNbsl5fB5E6gkub3 at 0x14626eca0> JSON: {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "I am asking you who are you \u2014 i am myself you are you"
    }
  ],
  "created": 1666125997,
  "id": "cmpl-62nltr3XeKbVGNNbsl5fB5E6gkub3",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 3,
    "prompt_tokens": 11,
    "total_tokens": 14
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "if you are you who am I", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 369
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=534 request_id=f272fa4c109d511a8de671ef4821b6d3 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'if you are you who am I' data=<OpenAIObject text_completion id=cmpl-62nm5C9IjU7qynqhO8kgclCX38Qjg at 0x1207d90d0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "if you are you who am I asking\n\nyou are you who am I asking\n\nyes no you are you"
    }
  ],
  "created": 1666126009,
  "id": "cmpl-62nm5C9IjU7qynqhO8kgclCX38Qjg",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 7,
    "total_tokens": 24
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "if you are you who am I", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 361
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=531 request_id=e0234165e40544c8a5092308c6e29383 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'if you are you who am I' data=<OpenAIObject text_completion id=cmpl-62nm8gJgTr3VS0EUxs355aq913Xgo at 0x132ec71f0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "if you are you who am I\n\nif you are you who am I you is you I am I am you"
    }
  ],
  "created": 1666126012,
  "id": "cmpl-62nm8gJgTr3VS0EUxs355aq913Xgo",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 7,
    "total_tokens": 24
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "if you are you who am I", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 365
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=535 request_id=6c64014f8d67b144c17b443af5fb5732 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'if you are you who am I' data=<OpenAIObject text_completion id=cmpl-62nmBz5ibDVKvWIuUW4YpvAYoMjXR at 0x16bbbb920> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "if you are you who am I not you are you\n\nGoogle, Bing\n\nyou are you who am I"
    }
  ],
  "created": 1666126015,
  "id": "cmpl-62nmBz5ibDVKvWIuUW4YpvAYoMjXR",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 7,
    "total_tokens": 24
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "if you are you who am I", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 376
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=530 request_id=a008ffc57fa12880e4a5df349b8a1580 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'if you are you who am I' data=<OpenAIObject text_completion id=cmpl-62nmIpfjvGGlWGrHLhQgHQpZ1AdWW at 0x13e9b2cf0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "if you are you who am I asking?\n\nwho is asking? you are you are you asking who is asking"
    }
  ],
  "created": 1666126022,
  "id": "cmpl-62nmIpfjvGGlWGrHLhQgHQpZ1AdWW",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 7,
    "total_tokens": 24
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "I am asking, if you are you who am I", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 393
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=532 request_id=9e8c701973bd964b1034089a01190d58 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'I am asking, if you are you who am I' data=<OpenAIObject text_completion id=cmpl-62nmSZ3j5CfgnZvxlY13DDQrW8QdX at 0x11773bab0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "I am asking, if you are you who am I asking?\n\nwho is asking asking if you are you are you asking you are"
    }
  ],
  "created": 1666126032,
  "id": "cmpl-62nmSZ3j5CfgnZvxlY13DDQrW8QdX",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 11,
    "total_tokens": 28
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "I am asking you who are you", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 390
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=536 request_id=29fda77397c4a81255d94ed216462d68 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'I am asking you who are you' data=<OpenAIObject text_completion id=cmpl-62nmei5J4qi3QOtcjqDQJwQ3jvk9e at 0x158f193f0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "I am asking you who are you you are asking who you are you are you asking who you are you are asking who"
    }
  ],
  "created": 1666126044,
  "id": "cmpl-62nmei5J4qi3QOtcjqDQJwQ3jvk9e",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 7,
    "total_tokens": 24
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "I am asking you who are you", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 376
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=508 request_id=6ddcc255ca393c14f7efd0fad0d28241 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'I am asking you who are you' data=<OpenAIObject text_completion id=cmpl-62nmhC7jZSuNDcoTZxMr4BkOwxauV at 0x12ecc0310> JSON: {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "I am asking you who are you what do you want you are who you are we are who is asking asking"
    }
  ],
  "created": 1666126047,
  "id": "cmpl-62nmhC7jZSuNDcoTZxMr4BkOwxauV",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 15,
    "prompt_tokens": 7,
    "total_tokens": 22
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "you are you", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 350
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=535 request_id=77a4a9a634716d8348a99a33bcc54583 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'you are you' data=<OpenAIObject text_completion id=cmpl-62nmnAcvWZZtAqnx0pVDDX2DZ0MZf at 0x1742a36f0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "you are you is you\n\nyou are you is you\n\nyou are you is you\n"
    }
  ],
  "created": 1666126053,
  "id": "cmpl-62nmnAcvWZZtAqnx0pVDDX2DZ0MZf",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 3,
    "total_tokens": 20
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "you are you", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 364
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=605 request_id=91e718f2d1bec3b977a473b8fc093326 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'you are you' data=<OpenAIObject text_completion id=cmpl-62nmryNBspqPQTkTFixuZa2SH0y43 at 0x12ba7e980> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "you are you thinking of you\n\nbut you are you reading this\n\nare you you you"
    }
  ],
  "created": 1666126057,
  "id": "cmpl-62nmryNBspqPQTkTFixuZa2SH0y43",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 3,
    "total_tokens": 20
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "you are you and I am me", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 362
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=539 request_id=e4093743e6f50ceeadb61294a4fb2063 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'you are you and I am me' data=<OpenAIObject text_completion id=cmpl-62nn47VgNUUqyMUEnwItj0qQPf02A at 0x13dd73ce0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "you are you and I am me\n\nyou is you and you are you\n\nI is me and you are"
    }
  ],
  "created": 1666126070,
  "id": "cmpl-62nn47VgNUUqyMUEnwItj0qQPf02A",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 7,
    "total_tokens": 24
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "you are you and I am me", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 360
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=541 request_id=47b5f664b9a091740be4fa7c20989883 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'you are you and I am me' data=<OpenAIObject text_completion id=cmpl-62nn8iSSHT8wdUAAewQhwcSlqqIWu at 0x123a3d760> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "you are you and I am me\n\nyou are you and I am me\n\nyou are you and I am"
    }
  ],
  "created": 1666126074,
  "id": "cmpl-62nn8iSSHT8wdUAAewQhwcSlqqIWu",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 7,
    "total_tokens": 24
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "test", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 360
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=584 request_id=5c5eb77dc62f35c0aed9dfd4ef1d5b79 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'test' data=<OpenAIObject text_completion id=cmpl-62oHZVwfF5SRjP48hoYcWVT0xYkAg at 0x160bef5b0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "test -> West Point is success is you is you are you\n\nI think the biggest"
    }
  ],
  "created": 1666127961,
  "id": "cmpl-62oHZVwfF5SRjP48hoYcWVT0xYkAg",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 1,
    "total_tokens": 18
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "test", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 344
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=637 request_id=6802077d768a8a91f8cc9231f5848088 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'test' data=<OpenAIObject text_completion id=cmpl-62oKcHgsfZRXcy1HeMhvWllnr2VZT at 0x11ff6a430> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "test -> you are you\n\ndo you play soccer am I you ?\n\n\""
    }
  ],
  "created": 1666128150,
  "id": "cmpl-62oKcHgsfZRXcy1HeMhvWllnr2VZT",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 1,
    "total_tokens": 18
  }
}
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api-inference.huggingface.co:443
DEBUG:urllib3.connectionpool:https://api-inference.huggingface.co:443 "POST /pipeline/feature-extraction/bert-base-uncased HTTP/1.1" 200 260639
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "test", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 332
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=532 request_id=fe6e0f0aceba908ccbb4dd5537b7a6d9 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'test' data=<OpenAIObject text_completion id=cmpl-62oLkKzvku3qRd3jCCvFzLwpGmn1j at 0x174dfe9d0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "test -> GPT-3\n\nPTPT you are you Borg\n\nPTPT"
    }
  ],
  "created": 1666128220,
  "id": "cmpl-62oLkKzvku3qRd3jCCvFzLwpGmn1j",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 1,
    "total_tokens": 18
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "test", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 336
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=499 request_id=fbec8e6d46e4a7578c1c5679f4faae3a response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'test' data=<OpenAIObject text_completion id=cmpl-62oLlJyBdkQvTL2eH3j5revwZBpRc at 0x1752143b0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "test -> GPT-3\n\nPT you are you is you are you GPT"
    }
  ],
  "created": 1666128221,
  "id": "cmpl-62oLlJyBdkQvTL2eH3j5revwZBpRc",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 1,
    "total_tokens": 18
  }
}
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api-inference.huggingface.co:443
DEBUG:urllib3.connectionpool:https://api-inference.huggingface.co:443 "POST /pipeline/feature-extraction/bert-base-uncased HTTP/1.1" 200 275725
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "test", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 366
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=526 request_id=bb27da7645fcafc17998ad382fb37f50 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'test' data=<OpenAIObject text_completion id=cmpl-62oMViFVT82mB1ckkCuw00HpIMyJO at 0x16bf87c90> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "test -> West Point\n\nYou are you is you your eyes your skin cells your thinking"
    }
  ],
  "created": 1666128267,
  "id": "cmpl-62oMViFVT82mB1ckkCuw00HpIMyJO",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 1,
    "total_tokens": 18
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "test1", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 367
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=500 request_id=f009a927f7630e613820e468aa4b1a6a response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'test1' data=<OpenAIObject text_completion id=cmpl-62oMVQpaGTYdZP2205BP5B4VoHeKN at 0x16bf87e70> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "test1\n\nResults after code execution\n\nCalifornia GPTPTT job title salary happy"
    }
  ],
  "created": 1666128267,
  "id": "cmpl-62oMVQpaGTYdZP2205BP5B4VoHeKN",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 2,
    "total_tokens": 19
  }
}
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api-inference.huggingface.co:443
DEBUG:urllib3.connectionpool:https://api-inference.huggingface.co:443 "POST /pipeline/feature-extraction/bert-base-uncased HTTP/1.1" 200 291082
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api-inference.huggingface.co:443
DEBUG:urllib3.connectionpool:https://api-inference.huggingface.co:443 "POST /pipeline/feature-extraction/bert-base-uncased HTTP/1.1" 200 322621
DEBUG:matplotlib.pyplot:Loaded backend macosx version unknown.
DEBUG:matplotlib.font_manager:findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=4.0.
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sathu.ttf', name='Sathu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SignPainter.ttc', name='SignPainter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBrahmi-Regular.ttf', name='Noto Sans Brahmi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAdlam-Regular.ttf', name='Noto Sans Adlam', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Charter.ttc', name='Charter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansVai-Regular.ttf', name='Noto Sans Vai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPauCinHau-Regular.ttf', name='Noto Sans Pau Cin Hau', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Devanagari Sangam MN.ttc', name='Devanagari Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W1.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=200, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeeteiMayek-Regular.ttf', name='Noto Sans Meetei Mayek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagalog-Regular.ttf', name='Noto Sans Tagalog', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil Sangam MN.ttc', name='Tamil Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCham-Regular.ttf', name='Noto Sans Cham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGunjalaGondi-Regular.otf', name='Noto Sans Gunjala Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldTurkic-Regular.ttf', name='Noto Sans Old Turkic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi.ttf', name='Gurmukhi MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Rounded Bold.ttf', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold.ttf', name='Arial Narrow', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DevanagariMT.ttc', name='Devanagari MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baghdad.ttc', name='Baghdad', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMro-Regular.ttf', name='Noto Sans Mro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer Sangam MN.ttf', name='Khmer Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSylotiNagri-Regular.ttf', name='Noto Sans Syloti Nagri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu MN.ttc', name='Telugu MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/BigCaslon.ttf', name='Big Caslon', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSyriac-Regular.ttf', name='Noto Sans Syriac', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCarian-Regular.ttf', name='Noto Sans Carian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsage-Regular.ttf', name='Noto Sans Osage', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W0.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Optima.ttc', name='Optima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W3.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Italic.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagbanwa-Regular.ttf', name='Noto Sans Tagbanwa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow.ttf', name='Arial Narrow', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifBalinese-Regular.ttf', name='Noto Serif Balinese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymReg.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/EuphemiaCAS.ttc', name='Euphemia UCAS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AlBayan.ttc', name='Al Bayan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNKo-Regular.ttf', name='Noto Sans NKo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkboard.ttc', name='Chalkboard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGlagolitic-Regular.ttf', name='Noto Sans Glagolitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trattatello.ttf', name='Trattatello', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla MN.ttc', name='Bangla MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSamaritan-Regular.ttf', name='Noto Sans Samaritan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kefa.ttc', name='Kefa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Thonburi.ttc', name='Thonburi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymBol.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAvestan-Regular.ttf', name='Noto Sans Avestan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar Sangam MN.ttc', name='Myanmar Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72.ttc', name='Bodoni 72', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi.ttf', name='Mishafi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W9.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W4.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Geneva.ttf', name='Geneva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.595454545454545
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmReg.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Helvetica.ttc', name='Helvetica', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.322727272727273
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text.ttc', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gujarati Sangam MN.ttc', name='Gujarati Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Raanana.ttc', name='Raanana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/LucidaGrande.ttc', name='Lucida Grande', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 2.872272727272727
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao MN.ttc', name='Lao MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada Sangam MN.ttc', name='Kannada Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewa-Regular.ttf', name='Noto Sans Newa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLydian-Regular.ttf', name='Noto Sans Lydian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/KufiStandardGK.ttc', name='KufiStandardGK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Zapfino.ttf', name='Zapfino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farah.ttc', name='Farah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mshtakan.ttc', name='Mshtakan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifYezidi-Regular.otf', name='Noto Serif Yezidi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmReg.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorBangla.ttc', name='Kohinoor Bangla', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Condensed Bold.ttf', name='DIN Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUni.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ZapfDingbats.ttf', name='Zapf Dingbats', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Didot.ttc', name='Didot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam Sangam MN.ttc', name='Malayalam Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/AppleSDGothicNeo.ttc', name='Apple SD Gothic Neo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baskerville.ttc', name='Baskerville', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W5.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymReg.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W7.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmBol.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBhaiksuki-Regular.ttf', name='Noto Sans Bhaiksuki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewTaiLue-Regular.ttf', name='Noto Sans New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpBol.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Academy Engraved LET Fonts.ttf', name='Academy Engraved LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymBol.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi Gold.ttf', name='Mishafi Gold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBassaVah-Regular.ttf', name='Noto Sans Bassa Vah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Nadeem.ttc', name='Nadeem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldItalic-Regular.ttf', name='Noto Sans Old Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Shree714.ttc', name='Shree Devanagari 714', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLimbu-Regular.ttf', name='Noto Sans Limbu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala MN.ttc', name='Sinhala MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold Italic.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Muna.ttc', name='Muna', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Alternate Bold.ttf', name='DIN Alternate', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBamum-Regular.ttf', name='Noto Sans Bamum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Beirut.ttc', name='Beirut', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBatak-Regular.ttf', name='Noto Sans Batak', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Iowan Old Style.ttc', name='Iowan Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVarBol.otf', name='STIXVariants', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/GeezaPro.ttc', name='Geeza Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPalmyrene-Regular.ttf', name='Noto Sans Palmyrene', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsmanya-Regular.ttf', name='Noto Sans Osmanya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/MarkerFelt.ttc', name='Marker Felt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GujaratiMT.ttc', name='Gujarati MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Keyboard.ttf', name='.Keyboard', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi Sangam MN.ttc', name='Gurmukhi Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMongolian-Regular.ttf', name='Noto Sans Mongolian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ明朝 ProN.ttc', name='Hiragino Mincho ProN', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMultani-Regular.ttf', name='Noto Sans Multani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 3.ttf', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSundanese-Regular.ttf', name='Noto Sans Sundanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansThaana-Regular.ttf', name='Noto Sans Thaana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanunoo-Regular.ttf', name='Noto Sans Hanunoo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ITFDevanagari.ttc', name='ITF Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOlChiki-Regular.ttf', name='Noto Sans Ol Chiki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansUgaritic-Regular.ttf', name='Noto Sans Ugaritic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDReg.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Luminari.ttf', name='Luminari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Menlo.ttc', name='Menlo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NewPeninimMT.ttc', name='New Peninim MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SnellRoundhand.ttc', name='Snell Roundhand', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Black.ttf', name='Arial Black', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya Sangam MN.ttc', name='Oriya Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCaucasianAlbanian-Regular.ttf', name='Noto Sans Caucasian Albanian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanifiRohingya-Regular.ttf', name='Noto Sans Hanifi Rohingya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMasaramGondi-Regular.otf', name='Noto Sans Masaram Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTMono.ttc', name='PT Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/HelveticaNeue.ttc', name='Helvetica Neue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Corsiva.ttc', name='Corsiva Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldNorthArabian-Regular.ttf', name='Noto Sans Old North Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/SFNS.ttf', name='System Font', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Damascus.ttc', name='Damascus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Courier.ttc', name='Courier', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPermic-Regular.ttf', name='Noto Sans Old Permic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansOriya.ttc', name='Noto Sans Oriya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDReg.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Songti.ttc', name='Songti SC', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalPahlavi-Regular.ttf', name='Noto Sans Inscriptional Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Medium.ttc', name='Heiti TC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text Ornaments.ttf', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Copperplate.ttc', name='Copperplate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansArmenian.ttc', name='Noto Sans Armenian', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold Italic.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLepcha-Regular.ttf', name='Noto Sans Lepcha', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GillSans.ttc', name='Gill Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBol.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMahajani-Regular.ttf', name='Noto Sans Mahajani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKayahLi-Regular.ttf', name='Noto Sans Kayah Li', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansMyanmar.ttc', name='Noto Sans Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ChalkboardSE.ttc', name='Chalkboard SE', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada MN.ttc', name='Kannada MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeroitic-Regular.ttf', name='Noto Sans Meroitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWarangCiti-Regular.ttf', name='Noto Sans Warang Citi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Krungthep.ttf', name='Krungthep', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Silom.ttf', name='Silom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya MN.ttc', name='Oriya MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCuneiform-Regular.ttf', name='Noto Sans Cuneiform', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansElbasan-Regular.ttf', name='Noto Sans Elbasan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/InaiMathi-MN.ttc', name='InaiMathi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala Sangam MN.ttc', name='Sinhala Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/NewYorkItalic.ttf', name='.New York', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni Ornaments.ttf', name='Bodoni Ornaments', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralItalic.otf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Skia.ttf', name='Skia', style='normal', variant='normal', weight=5, stretch='normal', size='scalable')) = 10.42525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpReg.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMandaic-Regular.ttf', name='Noto Sans Mandaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sana.ttc', name='Sana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMendeKikakui-Regular.ttf', name='Noto Sans Mende Kikakui', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleGothic.ttf', name='AppleGothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansRejang-Regular.ttf', name='Noto Sans Rejang', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Hiragino Sans GB.ttc', name='Hiragino Sans GB', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPsalterPahlavi-Regular.ttf', name='Noto Sans Psalter Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Kufi.ttc', name='Diwan Kufi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmBol.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ArialHB.ttc', name='Arial Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifAhom-Regular.ttf', name='Noto Serif Ahom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/MuktaMahee.ttc', name='Mukta Mahee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer MN.ttc', name='Khmer MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneral.otf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Thuluth.ttf', name='Diwan Thuluth', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWancho-Regular.ttf', name='Noto Sans Wancho', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Italic.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Rockwell.ttc', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearB-Regular.ttf', name='Noto Sans Linear B', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansChakma-Regular.ttf', name='Noto Sans Chakma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompact.ttf', name='.SF Compact', style='normal', variant='normal', weight=1000, stretch='normal', size='scalable')) = 10.62
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Apple Chancery.ttf', name='Apple Chancery', style='normal', variant='normal', weight=0, stretch='normal', size='scalable')) = 10.43
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Andale Mono.ttf', name='Andale Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGothic-Regular.ttf', name='Noto Sans Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldSouthArabian-Regular.ttf', name='Noto Sans Old South Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLisu-Regular.ttf', name='Noto Sans Lisu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W8.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansImperialAramaic-Regular.ttf', name='Noto Sans Imperial Aramaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/AquaKana.ttc', name='.Aqua Kana', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansDuployan-Regular.ttf', name='Noto Sans Duployan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Microsoft Sans Serif.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam MN.ttc', name='Malayalam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVar.otf', name='STIXVariants', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W2.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorGujarati.ttc', name='Kohinoor Gujarati', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansKannada.ttc', name='Noto Sans Kannada', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactRounded.ttf', name='.SF Compact Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMiao-Regular.ttf', name='Noto Sans Miao', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Library/Fonts/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhoenician-Regular.ttf', name='Noto Sans Phoenician', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Cochin.ttc', name='Cochin', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Herculanum.ttf', name='Herculanum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/NewYork.ttf', name='.New York', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kokonor.ttf', name='Kokonor', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Ayuthaya.ttf', name='Ayuthaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Athelas.ttc', name='Athelas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerifCaption.ttc', name='PT Serif Caption', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorTelugu.ttc', name='Kohinoor Telugu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSans.ttc', name='PT Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDBol.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farisi.ttf', name='Farisi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearA-Regular.ttf', name='Noto Sans Linear A', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao Sangam MN.ttf', name='Lao Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kailasa.ttc', name='Kailasa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Kohinoor.ttc', name='Kohinoor Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi MN.ttc', name='Gurmukhi MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SuperClarendon.ttc', name='Superclarendon', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Monaco.ttf', name='Monaco', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Times.ttc', name='Times', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Nile.ttc', name='Al Nile', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiViet-Regular.ttf', name='Noto Sans Tai Viet', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansEgyptianHieroglyphs-Regular.ttf', name='Noto Sans Egyptian Hieroglyphs', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar MN.ttc', name='Myanmar MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansModi-Regular.ttf', name='Noto Sans Modi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTifinagh-Regular.ttf', name='Noto Sans Tifinagh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Palatino.ttc', name='Palatino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu Sangam MN.ttc', name='Telugu Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleMyungjo.ttf', name='AppleMyungjo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactItalic.ttf', name='.SF Compact', style='italic', variant='normal', weight=1000, stretch='normal', size='scalable')) = 11.62
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/PingFang.ttc', name='PingFang HK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSerifMyanmar.ttc', name='Noto Serif Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 2.ttf', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabic.ttf', name='.SF Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDBol.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSItalic.ttf', name='System Font', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMarchen-Regular.ttf', name='Noto Sans Marchen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Light.ttc', name='Heiti TC', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiTham-Regular.ttf', name='Noto Sans Tai Tham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Futura.ttc', name='Futura', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPahawhHmong-Regular.ttf', name='Noto Sans Pahawh Hmong', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DecoTypeNaskh.ttc', name='DecoType Naskh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir.ttc', name='Avenir', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymReg.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil MN.ttc', name='Tamil MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Tarikh.ttc', name='Al Tarikh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next Condensed.ttc', name='Avenir Next Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBol.otf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma Bold.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PartyLET-plain.ttf', name='Party LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSoraSompeng-Regular.ttf', name='Noto Sans Sora Sompeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Papyrus.ttc', name='Papyrus', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSiddham-Regular.ttf', name='Noto Sans Siddham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Galvji.ttc', name='Galvji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhagsPa-Regular.ttf', name='Noto Sans PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCypriot-Regular.ttf', name='Noto Sans Cypriot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold Italic.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkduster.ttf', name='Chalkduster', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Symbols.ttf', name='Apple Symbols', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTakri-Regular.ttf', name='Noto Sans Takri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalParthian-Regular.ttf', name='Noto Sans Inscriptional Parthian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuginese-Regular.ttf', name='Noto Sans Buginese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SukhumvitSet.ttc', name='Sukhumvit Set', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMono.ttf', name='.SF NS Mono', style='normal', variant='normal', weight=295, stretch='normal', size='scalable')) = 10.14975
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLycian-Regular.ttf', name='Noto Sans Lycian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSRounded.ttf', name='.SF NS Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Marion.ttc', name='Marion', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNabataean-Regular.ttf', name='Noto Sans Nabataean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKharoshthi-Regular.ttf', name='Noto Sans Kharoshthi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPersian-Regular.ttf', name='Noto Sans Old Persian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiLe-Regular.ttf', name='Noto Sans Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansJavanese-Regular.otf', name='Noto Sans Javanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFiveSymReg.otf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 Smallcaps Book.ttf', name='Bodoni 72 Smallcaps', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCoptic-Regular.ttf', name='Noto Sans Coptic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 OS.ttc', name='Bodoni 72 Oldstyle', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Seravek.ttc', name='Seravek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Brush Script.ttf', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold Italic.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhudawadi-Regular.ttf', name='Noto Sans Khudawadi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldHungarian-Regular.ttf', name='Noto Sans Old Hungarian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHatran-Regular.ttf', name='Noto Sans Hatran', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Phosphate.ttc', name='Phosphate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W6.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBolIta.otf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBolIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMonoItalic.ttf', name='.SF NS Mono', style='italic', variant='normal', weight=295, stretch='normal', size='scalable')) = 11.14975
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhojki-Regular.ttf', name='Noto Sans Khojki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuhid-Regular.ttf', name='Noto Sans Buhid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla Sangam MN.ttc', name='Bangla Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTirhuta-Regular.ttf', name='Noto Sans Tirhuta', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Waseem.ttc', name='Waseem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Savoye LET.ttc', name='Savoye LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next.ttc', name='Avenir Next', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKaithi-Regular.ttf', name='Noto Sans Kaithi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymBol.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Noteworthy.ttc', name='Noteworthy', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymBol.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/NotoNastaliq.ttc', name='Noto Nastaliq Urdu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansYi-Regular.ttf', name='Noto Sans Yi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Italic.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bradley Hand Bold.ttf', name='Bradley Hand', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS Bold.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Italic.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSaurashtra-Regular.ttf', name='Noto Sans Saurashtra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansManichaean-Regular.ttf', name='Noto Sans Manichaean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSharada-Regular.ttf', name='Noto Sans Sharada', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AmericanTypewriter.ttc', name='American Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerif.ttc', name='PT Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PlantagenetCherokee.ttf', name='Plantagenet Cherokee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ丸ゴ ProN W4.ttc', name='Hiragino Maru Gothic Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymReg.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=4.0 to DejaVu Sans ('/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "test", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 357
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=527 request_id=1c8d13ef5692ab07a91b3f98f8b0e7d0 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'test' data=<OpenAIObject text_completion id=cmpl-62oNny2c4upuOguiLdqHr07wVZmvt at 0x147b7fdd0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "test -> you are you are you are you are you are you are you are you are"
    }
  ],
  "created": 1666128347,
  "id": "cmpl-62oNny2c4upuOguiLdqHr07wVZmvt",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 1,
    "total_tokens": 18
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "test1", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 380
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=510 request_id=041ab2cd39af2a3801344ec655b7d85a response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'test1' data=<OpenAIObject text_completion id=cmpl-62oNol46Vj3lUWL1RVq23DTHn1aAu at 0x14702e070> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "test1-default you are there are you is you ask you with sunglasses Orange County West Virginia"
    }
  ],
  "created": 1666128348,
  "id": "cmpl-62oNol46Vj3lUWL1RVq23DTHn1aAu",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 2,
    "total_tokens": 19
  }
}
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api-inference.huggingface.co:443
DEBUG:urllib3.connectionpool:https://api-inference.huggingface.co:443 "POST /pipeline/feature-extraction/bert-base-uncased HTTP/1.1" 200 321442
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api-inference.huggingface.co:443
DEBUG:urllib3.connectionpool:https://api-inference.huggingface.co:443 "POST /pipeline/feature-extraction/bert-base-uncased HTTP/1.1" 200 321838
DEBUG:matplotlib.pyplot:Loaded backend macosx version unknown.
DEBUG:matplotlib.font_manager:findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=4.0.
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sathu.ttf', name='Sathu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SignPainter.ttc', name='SignPainter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBrahmi-Regular.ttf', name='Noto Sans Brahmi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAdlam-Regular.ttf', name='Noto Sans Adlam', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Charter.ttc', name='Charter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansVai-Regular.ttf', name='Noto Sans Vai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPauCinHau-Regular.ttf', name='Noto Sans Pau Cin Hau', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Devanagari Sangam MN.ttc', name='Devanagari Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W1.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=200, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeeteiMayek-Regular.ttf', name='Noto Sans Meetei Mayek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagalog-Regular.ttf', name='Noto Sans Tagalog', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil Sangam MN.ttc', name='Tamil Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCham-Regular.ttf', name='Noto Sans Cham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGunjalaGondi-Regular.otf', name='Noto Sans Gunjala Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldTurkic-Regular.ttf', name='Noto Sans Old Turkic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi.ttf', name='Gurmukhi MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Rounded Bold.ttf', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold.ttf', name='Arial Narrow', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DevanagariMT.ttc', name='Devanagari MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baghdad.ttc', name='Baghdad', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMro-Regular.ttf', name='Noto Sans Mro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer Sangam MN.ttf', name='Khmer Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSylotiNagri-Regular.ttf', name='Noto Sans Syloti Nagri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu MN.ttc', name='Telugu MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/BigCaslon.ttf', name='Big Caslon', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSyriac-Regular.ttf', name='Noto Sans Syriac', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCarian-Regular.ttf', name='Noto Sans Carian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsage-Regular.ttf', name='Noto Sans Osage', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W0.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Optima.ttc', name='Optima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W3.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Italic.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagbanwa-Regular.ttf', name='Noto Sans Tagbanwa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow.ttf', name='Arial Narrow', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifBalinese-Regular.ttf', name='Noto Serif Balinese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymReg.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/EuphemiaCAS.ttc', name='Euphemia UCAS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AlBayan.ttc', name='Al Bayan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNKo-Regular.ttf', name='Noto Sans NKo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkboard.ttc', name='Chalkboard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGlagolitic-Regular.ttf', name='Noto Sans Glagolitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trattatello.ttf', name='Trattatello', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla MN.ttc', name='Bangla MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSamaritan-Regular.ttf', name='Noto Sans Samaritan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kefa.ttc', name='Kefa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Thonburi.ttc', name='Thonburi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymBol.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAvestan-Regular.ttf', name='Noto Sans Avestan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar Sangam MN.ttc', name='Myanmar Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72.ttc', name='Bodoni 72', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi.ttf', name='Mishafi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W9.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W4.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Geneva.ttf', name='Geneva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.595454545454545
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmReg.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Helvetica.ttc', name='Helvetica', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.322727272727273
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text.ttc', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gujarati Sangam MN.ttc', name='Gujarati Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Raanana.ttc', name='Raanana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/LucidaGrande.ttc', name='Lucida Grande', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 2.872272727272727
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao MN.ttc', name='Lao MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada Sangam MN.ttc', name='Kannada Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewa-Regular.ttf', name='Noto Sans Newa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLydian-Regular.ttf', name='Noto Sans Lydian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/KufiStandardGK.ttc', name='KufiStandardGK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Zapfino.ttf', name='Zapfino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farah.ttc', name='Farah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mshtakan.ttc', name='Mshtakan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifYezidi-Regular.otf', name='Noto Serif Yezidi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmReg.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorBangla.ttc', name='Kohinoor Bangla', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Condensed Bold.ttf', name='DIN Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUni.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ZapfDingbats.ttf', name='Zapf Dingbats', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Didot.ttc', name='Didot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam Sangam MN.ttc', name='Malayalam Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/AppleSDGothicNeo.ttc', name='Apple SD Gothic Neo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baskerville.ttc', name='Baskerville', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W5.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymReg.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W7.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmBol.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBhaiksuki-Regular.ttf', name='Noto Sans Bhaiksuki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewTaiLue-Regular.ttf', name='Noto Sans New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpBol.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Academy Engraved LET Fonts.ttf', name='Academy Engraved LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymBol.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi Gold.ttf', name='Mishafi Gold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBassaVah-Regular.ttf', name='Noto Sans Bassa Vah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Nadeem.ttc', name='Nadeem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldItalic-Regular.ttf', name='Noto Sans Old Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Shree714.ttc', name='Shree Devanagari 714', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLimbu-Regular.ttf', name='Noto Sans Limbu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala MN.ttc', name='Sinhala MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold Italic.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Muna.ttc', name='Muna', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Alternate Bold.ttf', name='DIN Alternate', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBamum-Regular.ttf', name='Noto Sans Bamum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Beirut.ttc', name='Beirut', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBatak-Regular.ttf', name='Noto Sans Batak', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Iowan Old Style.ttc', name='Iowan Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVarBol.otf', name='STIXVariants', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/GeezaPro.ttc', name='Geeza Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPalmyrene-Regular.ttf', name='Noto Sans Palmyrene', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsmanya-Regular.ttf', name='Noto Sans Osmanya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/MarkerFelt.ttc', name='Marker Felt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GujaratiMT.ttc', name='Gujarati MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Keyboard.ttf', name='.Keyboard', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi Sangam MN.ttc', name='Gurmukhi Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMongolian-Regular.ttf', name='Noto Sans Mongolian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ明朝 ProN.ttc', name='Hiragino Mincho ProN', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMultani-Regular.ttf', name='Noto Sans Multani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 3.ttf', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSundanese-Regular.ttf', name='Noto Sans Sundanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansThaana-Regular.ttf', name='Noto Sans Thaana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanunoo-Regular.ttf', name='Noto Sans Hanunoo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ITFDevanagari.ttc', name='ITF Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOlChiki-Regular.ttf', name='Noto Sans Ol Chiki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansUgaritic-Regular.ttf', name='Noto Sans Ugaritic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDReg.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Luminari.ttf', name='Luminari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Menlo.ttc', name='Menlo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NewPeninimMT.ttc', name='New Peninim MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SnellRoundhand.ttc', name='Snell Roundhand', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Black.ttf', name='Arial Black', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya Sangam MN.ttc', name='Oriya Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCaucasianAlbanian-Regular.ttf', name='Noto Sans Caucasian Albanian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanifiRohingya-Regular.ttf', name='Noto Sans Hanifi Rohingya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMasaramGondi-Regular.otf', name='Noto Sans Masaram Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTMono.ttc', name='PT Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/HelveticaNeue.ttc', name='Helvetica Neue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Corsiva.ttc', name='Corsiva Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldNorthArabian-Regular.ttf', name='Noto Sans Old North Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/SFNS.ttf', name='System Font', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Damascus.ttc', name='Damascus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Courier.ttc', name='Courier', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPermic-Regular.ttf', name='Noto Sans Old Permic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansOriya.ttc', name='Noto Sans Oriya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDReg.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Songti.ttc', name='Songti SC', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalPahlavi-Regular.ttf', name='Noto Sans Inscriptional Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Medium.ttc', name='Heiti TC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text Ornaments.ttf', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Copperplate.ttc', name='Copperplate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansArmenian.ttc', name='Noto Sans Armenian', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold Italic.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLepcha-Regular.ttf', name='Noto Sans Lepcha', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GillSans.ttc', name='Gill Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBol.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMahajani-Regular.ttf', name='Noto Sans Mahajani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKayahLi-Regular.ttf', name='Noto Sans Kayah Li', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansMyanmar.ttc', name='Noto Sans Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ChalkboardSE.ttc', name='Chalkboard SE', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada MN.ttc', name='Kannada MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeroitic-Regular.ttf', name='Noto Sans Meroitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWarangCiti-Regular.ttf', name='Noto Sans Warang Citi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Krungthep.ttf', name='Krungthep', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Silom.ttf', name='Silom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya MN.ttc', name='Oriya MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCuneiform-Regular.ttf', name='Noto Sans Cuneiform', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansElbasan-Regular.ttf', name='Noto Sans Elbasan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/InaiMathi-MN.ttc', name='InaiMathi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala Sangam MN.ttc', name='Sinhala Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/NewYorkItalic.ttf', name='.New York', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni Ornaments.ttf', name='Bodoni Ornaments', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralItalic.otf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Skia.ttf', name='Skia', style='normal', variant='normal', weight=5, stretch='normal', size='scalable')) = 10.42525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpReg.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMandaic-Regular.ttf', name='Noto Sans Mandaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sana.ttc', name='Sana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMendeKikakui-Regular.ttf', name='Noto Sans Mende Kikakui', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleGothic.ttf', name='AppleGothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansRejang-Regular.ttf', name='Noto Sans Rejang', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Hiragino Sans GB.ttc', name='Hiragino Sans GB', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPsalterPahlavi-Regular.ttf', name='Noto Sans Psalter Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Kufi.ttc', name='Diwan Kufi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmBol.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ArialHB.ttc', name='Arial Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifAhom-Regular.ttf', name='Noto Serif Ahom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/MuktaMahee.ttc', name='Mukta Mahee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer MN.ttc', name='Khmer MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneral.otf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Thuluth.ttf', name='Diwan Thuluth', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWancho-Regular.ttf', name='Noto Sans Wancho', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Italic.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Rockwell.ttc', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearB-Regular.ttf', name='Noto Sans Linear B', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansChakma-Regular.ttf', name='Noto Sans Chakma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompact.ttf', name='.SF Compact', style='normal', variant='normal', weight=1000, stretch='normal', size='scalable')) = 10.62
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Apple Chancery.ttf', name='Apple Chancery', style='normal', variant='normal', weight=0, stretch='normal', size='scalable')) = 10.43
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Andale Mono.ttf', name='Andale Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGothic-Regular.ttf', name='Noto Sans Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldSouthArabian-Regular.ttf', name='Noto Sans Old South Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLisu-Regular.ttf', name='Noto Sans Lisu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W8.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansImperialAramaic-Regular.ttf', name='Noto Sans Imperial Aramaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/AquaKana.ttc', name='.Aqua Kana', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansDuployan-Regular.ttf', name='Noto Sans Duployan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Microsoft Sans Serif.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam MN.ttc', name='Malayalam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVar.otf', name='STIXVariants', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W2.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorGujarati.ttc', name='Kohinoor Gujarati', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansKannada.ttc', name='Noto Sans Kannada', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactRounded.ttf', name='.SF Compact Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMiao-Regular.ttf', name='Noto Sans Miao', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Library/Fonts/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhoenician-Regular.ttf', name='Noto Sans Phoenician', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Cochin.ttc', name='Cochin', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Herculanum.ttf', name='Herculanum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/NewYork.ttf', name='.New York', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kokonor.ttf', name='Kokonor', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Ayuthaya.ttf', name='Ayuthaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Athelas.ttc', name='Athelas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerifCaption.ttc', name='PT Serif Caption', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorTelugu.ttc', name='Kohinoor Telugu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSans.ttc', name='PT Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDBol.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farisi.ttf', name='Farisi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearA-Regular.ttf', name='Noto Sans Linear A', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao Sangam MN.ttf', name='Lao Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kailasa.ttc', name='Kailasa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Kohinoor.ttc', name='Kohinoor Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi MN.ttc', name='Gurmukhi MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SuperClarendon.ttc', name='Superclarendon', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Monaco.ttf', name='Monaco', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Times.ttc', name='Times', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Nile.ttc', name='Al Nile', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiViet-Regular.ttf', name='Noto Sans Tai Viet', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansEgyptianHieroglyphs-Regular.ttf', name='Noto Sans Egyptian Hieroglyphs', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar MN.ttc', name='Myanmar MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansModi-Regular.ttf', name='Noto Sans Modi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTifinagh-Regular.ttf', name='Noto Sans Tifinagh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Palatino.ttc', name='Palatino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu Sangam MN.ttc', name='Telugu Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleMyungjo.ttf', name='AppleMyungjo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactItalic.ttf', name='.SF Compact', style='italic', variant='normal', weight=1000, stretch='normal', size='scalable')) = 11.62
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/PingFang.ttc', name='PingFang HK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSerifMyanmar.ttc', name='Noto Serif Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 2.ttf', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabic.ttf', name='.SF Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDBol.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSItalic.ttf', name='System Font', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMarchen-Regular.ttf', name='Noto Sans Marchen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Light.ttc', name='Heiti TC', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiTham-Regular.ttf', name='Noto Sans Tai Tham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Futura.ttc', name='Futura', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPahawhHmong-Regular.ttf', name='Noto Sans Pahawh Hmong', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DecoTypeNaskh.ttc', name='DecoType Naskh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir.ttc', name='Avenir', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymReg.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil MN.ttc', name='Tamil MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Tarikh.ttc', name='Al Tarikh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next Condensed.ttc', name='Avenir Next Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBol.otf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma Bold.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PartyLET-plain.ttf', name='Party LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSoraSompeng-Regular.ttf', name='Noto Sans Sora Sompeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Papyrus.ttc', name='Papyrus', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSiddham-Regular.ttf', name='Noto Sans Siddham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Galvji.ttc', name='Galvji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhagsPa-Regular.ttf', name='Noto Sans PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCypriot-Regular.ttf', name='Noto Sans Cypriot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold Italic.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkduster.ttf', name='Chalkduster', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Symbols.ttf', name='Apple Symbols', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTakri-Regular.ttf', name='Noto Sans Takri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalParthian-Regular.ttf', name='Noto Sans Inscriptional Parthian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuginese-Regular.ttf', name='Noto Sans Buginese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SukhumvitSet.ttc', name='Sukhumvit Set', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMono.ttf', name='.SF NS Mono', style='normal', variant='normal', weight=295, stretch='normal', size='scalable')) = 10.14975
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLycian-Regular.ttf', name='Noto Sans Lycian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSRounded.ttf', name='.SF NS Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Marion.ttc', name='Marion', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNabataean-Regular.ttf', name='Noto Sans Nabataean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKharoshthi-Regular.ttf', name='Noto Sans Kharoshthi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPersian-Regular.ttf', name='Noto Sans Old Persian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiLe-Regular.ttf', name='Noto Sans Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansJavanese-Regular.otf', name='Noto Sans Javanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFiveSymReg.otf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 Smallcaps Book.ttf', name='Bodoni 72 Smallcaps', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCoptic-Regular.ttf', name='Noto Sans Coptic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 OS.ttc', name='Bodoni 72 Oldstyle', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Seravek.ttc', name='Seravek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Brush Script.ttf', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold Italic.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhudawadi-Regular.ttf', name='Noto Sans Khudawadi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldHungarian-Regular.ttf', name='Noto Sans Old Hungarian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHatran-Regular.ttf', name='Noto Sans Hatran', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Phosphate.ttc', name='Phosphate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W6.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBolIta.otf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBolIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMonoItalic.ttf', name='.SF NS Mono', style='italic', variant='normal', weight=295, stretch='normal', size='scalable')) = 11.14975
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhojki-Regular.ttf', name='Noto Sans Khojki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuhid-Regular.ttf', name='Noto Sans Buhid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla Sangam MN.ttc', name='Bangla Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTirhuta-Regular.ttf', name='Noto Sans Tirhuta', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Waseem.ttc', name='Waseem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Savoye LET.ttc', name='Savoye LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next.ttc', name='Avenir Next', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKaithi-Regular.ttf', name='Noto Sans Kaithi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymBol.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Noteworthy.ttc', name='Noteworthy', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymBol.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/NotoNastaliq.ttc', name='Noto Nastaliq Urdu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansYi-Regular.ttf', name='Noto Sans Yi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Italic.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bradley Hand Bold.ttf', name='Bradley Hand', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS Bold.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Italic.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSaurashtra-Regular.ttf', name='Noto Sans Saurashtra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansManichaean-Regular.ttf', name='Noto Sans Manichaean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSharada-Regular.ttf', name='Noto Sans Sharada', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AmericanTypewriter.ttc', name='American Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerif.ttc', name='PT Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PlantagenetCherokee.ttf', name='Plantagenet Cherokee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ丸ゴ ProN W4.ttc', name='Hiragino Maru Gothic Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymReg.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=4.0 to DejaVu Sans ('/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "test", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 339
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=578 request_id=8ff64f610897c08154d11313f9e3fe7c response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'test' data=<OpenAIObject text_completion id=cmpl-62oQKBXjIHLsvzZkrv9DdM3s10hTv at 0x11f3ae110> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "test -> GPT-3 Test uses you\n\nYou are you\n\nYou are"
    }
  ],
  "created": 1666128504,
  "id": "cmpl-62oQKBXjIHLsvzZkrv9DdM3s10hTv",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 1,
    "total_tokens": 18
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "test1", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 337
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=524 request_id=2bc3c831527175a0c14a1fba3c3876aa response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'test1' data=<OpenAIObject text_completion id=cmpl-62oQKe7mnTcWwo2SieDDIyizNbfEK at 0x11fdaa0c0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "test1 = 0\n\ntest2 = y -> success\n\nsudo rm -rf DB"
    }
  ],
  "created": 1666128504,
  "id": "cmpl-62oQKe7mnTcWwo2SieDDIyizNbfEK",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 2,
    "total_tokens": 19
  }
}
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api-inference.huggingface.co:443
DEBUG:urllib3.connectionpool:https://api-inference.huggingface.co:443 "POST /pipeline/feature-extraction/bert-base-uncased HTTP/1.1" 200 260220
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api-inference.huggingface.co:443
DEBUG:urllib3.connectionpool:https://api-inference.huggingface.co:443 "POST /pipeline/feature-extraction/bert-base-uncased HTTP/1.1" 200 291406
DEBUG:matplotlib.pyplot:Loaded backend macosx version unknown.
DEBUG:matplotlib.font_manager:findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=4.0.
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sathu.ttf', name='Sathu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SignPainter.ttc', name='SignPainter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBrahmi-Regular.ttf', name='Noto Sans Brahmi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAdlam-Regular.ttf', name='Noto Sans Adlam', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Charter.ttc', name='Charter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansVai-Regular.ttf', name='Noto Sans Vai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPauCinHau-Regular.ttf', name='Noto Sans Pau Cin Hau', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Devanagari Sangam MN.ttc', name='Devanagari Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W1.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=200, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeeteiMayek-Regular.ttf', name='Noto Sans Meetei Mayek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagalog-Regular.ttf', name='Noto Sans Tagalog', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil Sangam MN.ttc', name='Tamil Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCham-Regular.ttf', name='Noto Sans Cham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGunjalaGondi-Regular.otf', name='Noto Sans Gunjala Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldTurkic-Regular.ttf', name='Noto Sans Old Turkic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi.ttf', name='Gurmukhi MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Rounded Bold.ttf', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold.ttf', name='Arial Narrow', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DevanagariMT.ttc', name='Devanagari MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baghdad.ttc', name='Baghdad', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMro-Regular.ttf', name='Noto Sans Mro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer Sangam MN.ttf', name='Khmer Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSylotiNagri-Regular.ttf', name='Noto Sans Syloti Nagri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu MN.ttc', name='Telugu MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/BigCaslon.ttf', name='Big Caslon', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSyriac-Regular.ttf', name='Noto Sans Syriac', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCarian-Regular.ttf', name='Noto Sans Carian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsage-Regular.ttf', name='Noto Sans Osage', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W0.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Optima.ttc', name='Optima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W3.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Italic.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagbanwa-Regular.ttf', name='Noto Sans Tagbanwa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow.ttf', name='Arial Narrow', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifBalinese-Regular.ttf', name='Noto Serif Balinese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymReg.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/EuphemiaCAS.ttc', name='Euphemia UCAS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AlBayan.ttc', name='Al Bayan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNKo-Regular.ttf', name='Noto Sans NKo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkboard.ttc', name='Chalkboard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGlagolitic-Regular.ttf', name='Noto Sans Glagolitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trattatello.ttf', name='Trattatello', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla MN.ttc', name='Bangla MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSamaritan-Regular.ttf', name='Noto Sans Samaritan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kefa.ttc', name='Kefa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Thonburi.ttc', name='Thonburi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymBol.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAvestan-Regular.ttf', name='Noto Sans Avestan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar Sangam MN.ttc', name='Myanmar Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72.ttc', name='Bodoni 72', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi.ttf', name='Mishafi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W9.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W4.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Geneva.ttf', name='Geneva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.595454545454545
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmReg.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Helvetica.ttc', name='Helvetica', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.322727272727273
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text.ttc', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gujarati Sangam MN.ttc', name='Gujarati Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Raanana.ttc', name='Raanana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/LucidaGrande.ttc', name='Lucida Grande', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 2.872272727272727
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao MN.ttc', name='Lao MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada Sangam MN.ttc', name='Kannada Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewa-Regular.ttf', name='Noto Sans Newa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLydian-Regular.ttf', name='Noto Sans Lydian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/KufiStandardGK.ttc', name='KufiStandardGK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Zapfino.ttf', name='Zapfino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farah.ttc', name='Farah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mshtakan.ttc', name='Mshtakan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifYezidi-Regular.otf', name='Noto Serif Yezidi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmReg.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorBangla.ttc', name='Kohinoor Bangla', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Condensed Bold.ttf', name='DIN Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUni.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ZapfDingbats.ttf', name='Zapf Dingbats', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Didot.ttc', name='Didot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam Sangam MN.ttc', name='Malayalam Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/AppleSDGothicNeo.ttc', name='Apple SD Gothic Neo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baskerville.ttc', name='Baskerville', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W5.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymReg.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W7.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmBol.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBhaiksuki-Regular.ttf', name='Noto Sans Bhaiksuki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewTaiLue-Regular.ttf', name='Noto Sans New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpBol.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Academy Engraved LET Fonts.ttf', name='Academy Engraved LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymBol.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi Gold.ttf', name='Mishafi Gold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBassaVah-Regular.ttf', name='Noto Sans Bassa Vah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Nadeem.ttc', name='Nadeem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldItalic-Regular.ttf', name='Noto Sans Old Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Shree714.ttc', name='Shree Devanagari 714', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLimbu-Regular.ttf', name='Noto Sans Limbu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala MN.ttc', name='Sinhala MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold Italic.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Muna.ttc', name='Muna', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Alternate Bold.ttf', name='DIN Alternate', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBamum-Regular.ttf', name='Noto Sans Bamum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Beirut.ttc', name='Beirut', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBatak-Regular.ttf', name='Noto Sans Batak', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Iowan Old Style.ttc', name='Iowan Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVarBol.otf', name='STIXVariants', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/GeezaPro.ttc', name='Geeza Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPalmyrene-Regular.ttf', name='Noto Sans Palmyrene', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsmanya-Regular.ttf', name='Noto Sans Osmanya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/MarkerFelt.ttc', name='Marker Felt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GujaratiMT.ttc', name='Gujarati MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Keyboard.ttf', name='.Keyboard', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi Sangam MN.ttc', name='Gurmukhi Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMongolian-Regular.ttf', name='Noto Sans Mongolian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ明朝 ProN.ttc', name='Hiragino Mincho ProN', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMultani-Regular.ttf', name='Noto Sans Multani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 3.ttf', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSundanese-Regular.ttf', name='Noto Sans Sundanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansThaana-Regular.ttf', name='Noto Sans Thaana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanunoo-Regular.ttf', name='Noto Sans Hanunoo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ITFDevanagari.ttc', name='ITF Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOlChiki-Regular.ttf', name='Noto Sans Ol Chiki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansUgaritic-Regular.ttf', name='Noto Sans Ugaritic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDReg.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Luminari.ttf', name='Luminari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Menlo.ttc', name='Menlo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NewPeninimMT.ttc', name='New Peninim MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SnellRoundhand.ttc', name='Snell Roundhand', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Black.ttf', name='Arial Black', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya Sangam MN.ttc', name='Oriya Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCaucasianAlbanian-Regular.ttf', name='Noto Sans Caucasian Albanian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanifiRohingya-Regular.ttf', name='Noto Sans Hanifi Rohingya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMasaramGondi-Regular.otf', name='Noto Sans Masaram Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTMono.ttc', name='PT Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/HelveticaNeue.ttc', name='Helvetica Neue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Corsiva.ttc', name='Corsiva Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldNorthArabian-Regular.ttf', name='Noto Sans Old North Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/SFNS.ttf', name='System Font', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Damascus.ttc', name='Damascus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Courier.ttc', name='Courier', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPermic-Regular.ttf', name='Noto Sans Old Permic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansOriya.ttc', name='Noto Sans Oriya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDReg.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Songti.ttc', name='Songti SC', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalPahlavi-Regular.ttf', name='Noto Sans Inscriptional Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Medium.ttc', name='Heiti TC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text Ornaments.ttf', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Copperplate.ttc', name='Copperplate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansArmenian.ttc', name='Noto Sans Armenian', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold Italic.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLepcha-Regular.ttf', name='Noto Sans Lepcha', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GillSans.ttc', name='Gill Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBol.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMahajani-Regular.ttf', name='Noto Sans Mahajani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKayahLi-Regular.ttf', name='Noto Sans Kayah Li', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansMyanmar.ttc', name='Noto Sans Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ChalkboardSE.ttc', name='Chalkboard SE', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada MN.ttc', name='Kannada MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeroitic-Regular.ttf', name='Noto Sans Meroitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWarangCiti-Regular.ttf', name='Noto Sans Warang Citi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Krungthep.ttf', name='Krungthep', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Silom.ttf', name='Silom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya MN.ttc', name='Oriya MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCuneiform-Regular.ttf', name='Noto Sans Cuneiform', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansElbasan-Regular.ttf', name='Noto Sans Elbasan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/InaiMathi-MN.ttc', name='InaiMathi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala Sangam MN.ttc', name='Sinhala Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/NewYorkItalic.ttf', name='.New York', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni Ornaments.ttf', name='Bodoni Ornaments', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralItalic.otf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Skia.ttf', name='Skia', style='normal', variant='normal', weight=5, stretch='normal', size='scalable')) = 10.42525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpReg.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMandaic-Regular.ttf', name='Noto Sans Mandaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sana.ttc', name='Sana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMendeKikakui-Regular.ttf', name='Noto Sans Mende Kikakui', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleGothic.ttf', name='AppleGothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansRejang-Regular.ttf', name='Noto Sans Rejang', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Hiragino Sans GB.ttc', name='Hiragino Sans GB', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPsalterPahlavi-Regular.ttf', name='Noto Sans Psalter Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Kufi.ttc', name='Diwan Kufi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmBol.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ArialHB.ttc', name='Arial Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifAhom-Regular.ttf', name='Noto Serif Ahom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/MuktaMahee.ttc', name='Mukta Mahee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer MN.ttc', name='Khmer MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneral.otf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Thuluth.ttf', name='Diwan Thuluth', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWancho-Regular.ttf', name='Noto Sans Wancho', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Italic.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Rockwell.ttc', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearB-Regular.ttf', name='Noto Sans Linear B', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansChakma-Regular.ttf', name='Noto Sans Chakma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompact.ttf', name='.SF Compact', style='normal', variant='normal', weight=1000, stretch='normal', size='scalable')) = 10.62
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Apple Chancery.ttf', name='Apple Chancery', style='normal', variant='normal', weight=0, stretch='normal', size='scalable')) = 10.43
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Andale Mono.ttf', name='Andale Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGothic-Regular.ttf', name='Noto Sans Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldSouthArabian-Regular.ttf', name='Noto Sans Old South Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLisu-Regular.ttf', name='Noto Sans Lisu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W8.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansImperialAramaic-Regular.ttf', name='Noto Sans Imperial Aramaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/AquaKana.ttc', name='.Aqua Kana', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansDuployan-Regular.ttf', name='Noto Sans Duployan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Microsoft Sans Serif.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam MN.ttc', name='Malayalam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVar.otf', name='STIXVariants', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W2.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorGujarati.ttc', name='Kohinoor Gujarati', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansKannada.ttc', name='Noto Sans Kannada', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactRounded.ttf', name='.SF Compact Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMiao-Regular.ttf', name='Noto Sans Miao', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Library/Fonts/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhoenician-Regular.ttf', name='Noto Sans Phoenician', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Cochin.ttc', name='Cochin', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Herculanum.ttf', name='Herculanum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/NewYork.ttf', name='.New York', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kokonor.ttf', name='Kokonor', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Ayuthaya.ttf', name='Ayuthaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Athelas.ttc', name='Athelas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerifCaption.ttc', name='PT Serif Caption', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorTelugu.ttc', name='Kohinoor Telugu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSans.ttc', name='PT Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDBol.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farisi.ttf', name='Farisi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearA-Regular.ttf', name='Noto Sans Linear A', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao Sangam MN.ttf', name='Lao Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kailasa.ttc', name='Kailasa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Kohinoor.ttc', name='Kohinoor Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi MN.ttc', name='Gurmukhi MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SuperClarendon.ttc', name='Superclarendon', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Monaco.ttf', name='Monaco', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Times.ttc', name='Times', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Nile.ttc', name='Al Nile', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiViet-Regular.ttf', name='Noto Sans Tai Viet', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansEgyptianHieroglyphs-Regular.ttf', name='Noto Sans Egyptian Hieroglyphs', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar MN.ttc', name='Myanmar MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansModi-Regular.ttf', name='Noto Sans Modi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTifinagh-Regular.ttf', name='Noto Sans Tifinagh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Palatino.ttc', name='Palatino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu Sangam MN.ttc', name='Telugu Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleMyungjo.ttf', name='AppleMyungjo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactItalic.ttf', name='.SF Compact', style='italic', variant='normal', weight=1000, stretch='normal', size='scalable')) = 11.62
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/PingFang.ttc', name='PingFang HK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSerifMyanmar.ttc', name='Noto Serif Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 2.ttf', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabic.ttf', name='.SF Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDBol.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSItalic.ttf', name='System Font', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMarchen-Regular.ttf', name='Noto Sans Marchen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Light.ttc', name='Heiti TC', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiTham-Regular.ttf', name='Noto Sans Tai Tham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Futura.ttc', name='Futura', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPahawhHmong-Regular.ttf', name='Noto Sans Pahawh Hmong', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DecoTypeNaskh.ttc', name='DecoType Naskh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir.ttc', name='Avenir', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymReg.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil MN.ttc', name='Tamil MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Tarikh.ttc', name='Al Tarikh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next Condensed.ttc', name='Avenir Next Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBol.otf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma Bold.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PartyLET-plain.ttf', name='Party LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSoraSompeng-Regular.ttf', name='Noto Sans Sora Sompeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Papyrus.ttc', name='Papyrus', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSiddham-Regular.ttf', name='Noto Sans Siddham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Galvji.ttc', name='Galvji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhagsPa-Regular.ttf', name='Noto Sans PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCypriot-Regular.ttf', name='Noto Sans Cypriot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold Italic.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkduster.ttf', name='Chalkduster', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Symbols.ttf', name='Apple Symbols', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTakri-Regular.ttf', name='Noto Sans Takri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalParthian-Regular.ttf', name='Noto Sans Inscriptional Parthian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuginese-Regular.ttf', name='Noto Sans Buginese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SukhumvitSet.ttc', name='Sukhumvit Set', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMono.ttf', name='.SF NS Mono', style='normal', variant='normal', weight=295, stretch='normal', size='scalable')) = 10.14975
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLycian-Regular.ttf', name='Noto Sans Lycian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSRounded.ttf', name='.SF NS Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Marion.ttc', name='Marion', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNabataean-Regular.ttf', name='Noto Sans Nabataean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKharoshthi-Regular.ttf', name='Noto Sans Kharoshthi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPersian-Regular.ttf', name='Noto Sans Old Persian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiLe-Regular.ttf', name='Noto Sans Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansJavanese-Regular.otf', name='Noto Sans Javanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFiveSymReg.otf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 Smallcaps Book.ttf', name='Bodoni 72 Smallcaps', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCoptic-Regular.ttf', name='Noto Sans Coptic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 OS.ttc', name='Bodoni 72 Oldstyle', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Seravek.ttc', name='Seravek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Brush Script.ttf', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold Italic.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhudawadi-Regular.ttf', name='Noto Sans Khudawadi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldHungarian-Regular.ttf', name='Noto Sans Old Hungarian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHatran-Regular.ttf', name='Noto Sans Hatran', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Phosphate.ttc', name='Phosphate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W6.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBolIta.otf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBolIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMonoItalic.ttf', name='.SF NS Mono', style='italic', variant='normal', weight=295, stretch='normal', size='scalable')) = 11.14975
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhojki-Regular.ttf', name='Noto Sans Khojki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuhid-Regular.ttf', name='Noto Sans Buhid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla Sangam MN.ttc', name='Bangla Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTirhuta-Regular.ttf', name='Noto Sans Tirhuta', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Waseem.ttc', name='Waseem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Savoye LET.ttc', name='Savoye LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next.ttc', name='Avenir Next', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKaithi-Regular.ttf', name='Noto Sans Kaithi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymBol.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Noteworthy.ttc', name='Noteworthy', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymBol.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/NotoNastaliq.ttc', name='Noto Nastaliq Urdu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansYi-Regular.ttf', name='Noto Sans Yi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Italic.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bradley Hand Bold.ttf', name='Bradley Hand', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS Bold.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Italic.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSaurashtra-Regular.ttf', name='Noto Sans Saurashtra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansManichaean-Regular.ttf', name='Noto Sans Manichaean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSharada-Regular.ttf', name='Noto Sans Sharada', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AmericanTypewriter.ttc', name='American Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerif.ttc', name='PT Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PlantagenetCherokee.ttf', name='Plantagenet Cherokee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ丸ゴ ProN W4.ttc', name='Hiragino Maru Gothic Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymReg.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=4.0 to DejaVu Sans ('/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "test", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 351
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=584 request_id=556ec9272514223933ddab65417ed78a response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'test' data=<OpenAIObject text_completion id=cmpl-62oZQT3Hmh5aIU6mwDETOyub8qkq5 at 0x125928860> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "test -> Google is you are you Borg you are is you are\n\nMetacogn"
    }
  ],
  "created": 1666129068,
  "id": "cmpl-62oZQT3Hmh5aIU6mwDETOyub8qkq5",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 1,
    "total_tokens": 18
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 17, "top_p": 0.95, "temperature": 1, "prompt": "test1", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 352
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=501 request_id=d126459464f3587f2f7d1f5f8eeb1996 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'test1' data=<OpenAIObject text_completion id=cmpl-62oZSaThC2S44J0MSHwnn4uelMsDR at 0x130fb7a10> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "test1\n\ntesting telekinesis telepathy\n\nOpen-QA machine learning"
    }
  ],
  "created": 1666129070,
  "id": "cmpl-62oZSaThC2S44J0MSHwnn4uelMsDR",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 17,
    "prompt_tokens": 2,
    "total_tokens": 19
  }
}
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api-inference.huggingface.co:443
DEBUG:urllib3.connectionpool:https://api-inference.huggingface.co:443 "POST /pipeline/feature-extraction/bert-base-uncased HTTP/1.1" 200 291340
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api-inference.huggingface.co:443
DEBUG:urllib3.connectionpool:https://api-inference.huggingface.co:443 "POST /pipeline/feature-extraction/bert-base-uncased HTTP/1.1" 200 291033
DEBUG:matplotlib.pyplot:Loaded backend macosx version unknown.
DEBUG:matplotlib.font_manager:findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=4.0.
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Bold.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneral.ttf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-BoldOblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 1.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/cmex10.ttf', name='cmex10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFiveSymReg.ttf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/cmsy10.ttf', name='cmsy10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif.ttf', name='DejaVu Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-BoldItalic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerifDisplay.ttf', name='DejaVu Serif Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-BoldOblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSerif-Italic.ttf', name='DejaVu Serif', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBolIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Bold.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 0.33499999999999996
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf', name='DejaVu Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 0.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymBol.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Oblique.ttf', name='DejaVu Sans Mono', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymReg.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/cmmi10.ttf', name='cmmi10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizOneSymReg.ttf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralItalic.ttf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymReg.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansDisplay.ttf', name='DejaVu Sans Display', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBolIta.ttf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniIta.ttf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/cmr10.ttf', name='cmr10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/cmb10.ttf', name='cmb10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans-Oblique.ttf', name='DejaVu Sans', style='oblique', variant='normal', weight=400, stretch='normal', size='scalable')) = 1.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizFourSymBol.ttf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUni.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/cmss10.ttf', name='cmss10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizTwoSymBol.ttf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXNonUniBol.ttf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymReg.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXGeneralBol.ttf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSansMono-Bold.ttf', name='DejaVu Sans Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/cmtt10.ttf', name='cmtt10', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/STIXSizThreeSymBol.ttf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sathu.ttf', name='Sathu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SignPainter.ttc', name='SignPainter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBrahmi-Regular.ttf', name='Noto Sans Brahmi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAdlam-Regular.ttf', name='Noto Sans Adlam', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Charter.ttc', name='Charter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansVai-Regular.ttf', name='Noto Sans Vai', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPauCinHau-Regular.ttf', name='Noto Sans Pau Cin Hau', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Devanagari Sangam MN.ttc', name='Devanagari Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W1.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=200, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeeteiMayek-Regular.ttf', name='Noto Sans Meetei Mayek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Impact.ttf', name='Impact', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagalog-Regular.ttf', name='Noto Sans Tagalog', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil Sangam MN.ttc', name='Tamil Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCham-Regular.ttf', name='Noto Sans Cham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGunjalaGondi-Regular.otf', name='Noto Sans Gunjala Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldTurkic-Regular.ttf', name='Noto Sans Old Turkic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=400, stretch='condensed', size='scalable')) = 11.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi.ttf', name='Gurmukhi MT', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial.ttf', name='Arial', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 6.413636363636363
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Rounded Bold.ttf', name='Arial Rounded MT Bold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold.ttf', name='Arial Narrow', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DevanagariMT.ttc', name='Devanagari MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baghdad.ttc', name='Baghdad', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMro-Regular.ttf', name='Noto Sans Mro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Symbol.ttf', name='Symbol', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer Sangam MN.ttf', name='Khmer Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSylotiNagri-Regular.ttf', name='Noto Sans Syloti Nagri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu MN.ttc', name='Telugu MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/BigCaslon.ttf', name='Big Caslon', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSyriac-Regular.ttf', name='Noto Sans Syriac', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCarian-Regular.ttf', name='Noto Sans Carian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsage-Regular.ttf', name='Noto Sans Osage', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W0.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Optima.ttc', name='Optima', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W3.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Italic.ttf', name='Georgia', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTagbanwa-Regular.ttf', name='Noto Sans Tagbanwa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow.ttf', name='Arial Narrow', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifBalinese-Regular.ttf', name='Noto Serif Balinese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymReg.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/EuphemiaCAS.ttc', name='Euphemia UCAS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AlBayan.ttc', name='Al Bayan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNKo-Regular.ttf', name='Noto Sans NKo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkboard.ttc', name='Chalkboard', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New.ttf', name='Courier New', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGlagolitic-Regular.ttf', name='Noto Sans Glagolitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trattatello.ttf', name='Trattatello', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla MN.ttc', name='Bangla MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSamaritan-Regular.ttf', name='Noto Sans Samaritan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kefa.ttc', name='Kefa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Thonburi.ttc', name='Thonburi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymBol.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansAvestan-Regular.ttf', name='Noto Sans Avestan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar Sangam MN.ttc', name='Myanmar Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72.ttc', name='Bodoni 72', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi.ttf', name='Mishafi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold.ttf', name='Courier New', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W9.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W4.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold.ttf', name='Arial', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 6.698636363636363
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Geneva.ttf', name='Geneva', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.595454545454545
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmReg.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Helvetica.ttc', name='Helvetica', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.322727272727273
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text.ttc', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gujarati Sangam MN.ttc', name='Gujarati Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Raanana.ttc', name='Raanana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/LucidaGrande.ttc', name='Lucida Grande', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 2.872272727272727
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao MN.ttc', name='Lao MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada Sangam MN.ttc', name='Kannada Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewa-Regular.ttf', name='Noto Sans Newa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLydian-Regular.ttf', name='Noto Sans Lydian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/KufiStandardGK.ttc', name='KufiStandardGK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Zapfino.ttf', name='Zapfino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farah.ttc', name='Farah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mshtakan.ttc', name='Mshtakan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifYezidi-Regular.otf', name='Noto Serif Yezidi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmReg.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorBangla.ttc', name='Kohinoor Bangla', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Condensed Bold.ttf', name='DIN Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUni.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ZapfDingbats.ttf', name='Zapf Dingbats', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Didot.ttc', name='Didot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam Sangam MN.ttc', name='Malayalam Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/AppleSDGothicNeo.ttc', name='Apple SD Gothic Neo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Baskerville.ttc', name='Baskerville', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W5.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymReg.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W7.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpSmBol.otf', name='STIXIntegralsUpSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 6 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBhaiksuki-Regular.ttf', name='Noto Sans Bhaiksuki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNewTaiLue-Regular.ttf', name='Noto Sans New Tai Lue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpBol.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Academy Engraved LET Fonts.ttf', name='Academy Engraved LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymBol.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Mishafi Gold.ttf', name='Mishafi Gold', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold.ttf', name='Times New Roman', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBassaVah-Regular.ttf', name='Noto Sans Bassa Vah', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Nadeem.ttc', name='Nadeem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldItalic-Regular.ttf', name='Noto Sans Old Italic', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Shree714.ttc', name='Shree Devanagari 714', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLimbu-Regular.ttf', name='Noto Sans Limbu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala MN.ttc', name='Sinhala MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold Italic.ttf', name='Georgia', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Muna.ttc', name='Muna', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DIN Alternate Bold.ttf', name='DIN Alternate', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBamum-Regular.ttf', name='Noto Sans Bamum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Beirut.ttc', name='Beirut', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBatak-Regular.ttf', name='Noto Sans Batak', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Iowan Old Style.ttc', name='Iowan Old Style', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVarBol.otf', name='STIXVariants', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/GeezaPro.ttc', name='Geeza Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPalmyrene-Regular.ttf', name='Noto Sans Palmyrene', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOsmanya-Regular.ttf', name='Noto Sans Osmanya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/MarkerFelt.ttc', name='Marker Felt', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GujaratiMT.ttc', name='Gujarati MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Keyboard.ttf', name='.Keyboard', style='normal', variant='normal', weight=100, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi Sangam MN.ttc', name='Gurmukhi Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMongolian-Regular.ttf', name='Noto Sans Mongolian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ明朝 ProN.ttc', name='Hiragino Mincho ProN', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMultani-Regular.ttf', name='Noto Sans Multani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 3.ttf', name='Wingdings 3', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSundanese-Regular.ttf', name='Noto Sans Sundanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings.ttf', name='Wingdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansThaana-Regular.ttf', name='Noto Sans Thaana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanunoo-Regular.ttf', name='Noto Sans Hanunoo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ITFDevanagari.ttc', name='ITF Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOlChiki-Regular.ttf', name='Noto Sans Ol Chiki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansUgaritic-Regular.ttf', name='Noto Sans Ugaritic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDReg.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Luminari.ttf', name='Luminari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Menlo.ttc', name='Menlo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NewPeninimMT.ttc', name='New Peninim MT', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SnellRoundhand.ttc', name='Snell Roundhand', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Black.ttf', name='Arial Black', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya Sangam MN.ttc', name='Oriya Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCaucasianAlbanian-Regular.ttf', name='Noto Sans Caucasian Albanian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHanifiRohingya-Regular.ttf', name='Noto Sans Hanifi Rohingya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia.ttf', name='Georgia', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMasaramGondi-Regular.otf', name='Noto Sans Masaram Gondi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTMono.ttc', name='PT Mono', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/HelveticaNeue.ttc', name='Helvetica Neue', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Corsiva.ttc', name='Corsiva Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Narrow Bold Italic.ttf', name='Arial Narrow', style='italic', variant='normal', weight=700, stretch='condensed', size='scalable')) = 11.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldNorthArabian-Regular.ttf', name='Noto Sans Old North Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/SFNS.ttf', name='System Font', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Damascus.ttc', name='Damascus', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Courier.ttc', name='Courier', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPermic-Regular.ttf', name='Noto Sans Old Permic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansOriya.ttc', name='Noto Sans Oriya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDReg.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Songti.ttc', name='Songti SC', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Bold Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalPahlavi-Regular.ttf', name='Noto Sans Inscriptional Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Medium.ttc', name='Heiti TC', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Hoefler Text Ornaments.ttf', name='Hoefler Text', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Copperplate.ttc', name='Copperplate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansArmenian.ttc', name='Noto Sans Armenian', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Bold Italic.ttf', name='Courier New', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLepcha-Regular.ttf', name='Noto Sans Lepcha', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/GillSans.ttc', name='Gill Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBol.otf', name='STIXNonUnicode', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMahajani-Regular.ttf', name='Noto Sans Mahajani', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKayahLi-Regular.ttf', name='Noto Sans Kayah Li', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansMyanmar.ttc', name='Noto Sans Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/ChalkboardSE.ttc', name='Chalkboard SE', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kannada MN.ttc', name='Kannada MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMeroitic-Regular.ttf', name='Noto Sans Meroitic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWarangCiti-Regular.ttf', name='Noto Sans Warang Citi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Krungthep.ttf', name='Krungthep', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Silom.ttf', name='Silom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Oriya MN.ttc', name='Oriya MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCuneiform-Regular.ttf', name='Noto Sans Cuneiform', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansElbasan-Regular.ttf', name='Noto Sans Elbasan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/InaiMathi-MN.ttc', name='InaiMathi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sinhala Sangam MN.ttc', name='Sinhala Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/NewYorkItalic.ttf', name='.New York', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni Ornaments.ttf', name='Bodoni Ornaments', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralItalic.otf', name='STIXGeneral', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Skia.ttf', name='Skia', style='normal', variant='normal', weight=5, stretch='normal', size='scalable')) = 10.42525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpReg.otf', name='STIXIntegralsUp', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMandaic-Regular.ttf', name='Noto Sans Mandaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Sana.ttc', name='Sana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMendeKikakui-Regular.ttf', name='Noto Sans Mende Kikakui', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleGothic.ttf', name='AppleGothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansRejang-Regular.ttf', name='Noto Sans Rejang', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Hiragino Sans GB.ttc', name='Hiragino Sans GB', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPsalterPahlavi-Regular.ttf', name='Noto Sans Psalter Pahlavi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Kufi.ttc', name='Diwan Kufi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Georgia Bold.ttf', name='Georgia', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntSmBol.otf', name='STIXIntegralsSm', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ArialHB.ttc', name='Arial Hebrew', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSerifAhom-Regular.ttf', name='Noto Serif Ahom', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/MuktaMahee.ttc', name='Mukta Mahee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Khmer MN.ttc', name='Khmer MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneral.otf', name='STIXGeneral', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold Italic.ttf', name='Trebuchet MS', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Diwan Thuluth.ttf', name='Diwan Thuluth', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansWancho-Regular.ttf', name='Noto Sans Wancho', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Courier New Italic.ttf', name='Courier New', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Rockwell.ttc', name='Rockwell', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearB-Regular.ttf', name='Noto Sans Linear B', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansChakma-Regular.ttf', name='Noto Sans Chakma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompact.ttf', name='.SF Compact', style='normal', variant='normal', weight=1000, stretch='normal', size='scalable')) = 10.62
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Apple Chancery.ttf', name='Apple Chancery', style='normal', variant='normal', weight=0, stretch='normal', size='scalable')) = 10.43
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Andale Mono.ttf', name='Andale Mono', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansGothic-Regular.ttf', name='Noto Sans Gothic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldSouthArabian-Regular.ttf', name='Noto Sans Old South Arabian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLisu-Regular.ttf', name='Noto Sans Lisu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W8.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=800, stretch='normal', size='scalable')) = 10.43
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansImperialAramaic-Regular.ttf', name='Noto Sans Imperial Aramaic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/AquaKana.ttc', name='.Aqua Kana', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansDuployan-Regular.ttf', name='Noto Sans Duployan', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Microsoft Sans Serif.ttf', name='Microsoft Sans Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Malayalam MN.ttc', name='Malayalam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXVar.otf', name='STIXVariants', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W2.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorGujarati.ttc', name='Kohinoor Gujarati', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSansKannada.ttc', name='Noto Sans Kannada', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactRounded.ttf', name='.SF Compact Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMiao-Regular.ttf', name='Noto Sans Miao', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/Library/Fonts/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhoenician-Regular.ttf', name='Noto Sans Phoenician', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Cochin.ttc', name='Cochin', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Herculanum.ttf', name='Herculanum', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/NewYork.ttf', name='.New York', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kokonor.ttf', name='Kokonor', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Ayuthaya.ttf', name='Ayuthaya', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Athelas.ttc', name='Athelas', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman Italic.ttf', name='Times New Roman', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerifCaption.ttc', name='PT Serif Caption', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/KohinoorTelugu.ttc', name='Kohinoor Telugu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSans.ttc', name='PT Sans', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntDBol.otf', name='STIXIntegralsD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Farisi.ttf', name='Farisi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLinearA-Regular.ttf', name='Noto Sans Linear A', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Lao Sangam MN.ttf', name='Lao Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Kailasa.ttc', name='Kailasa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Kohinoor.ttc', name='Kohinoor Devanagari', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Gurmukhi MN.ttc', name='Gurmukhi MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SuperClarendon.ttc', name='Superclarendon', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Webdings.ttf', name='Webdings', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Monaco.ttf', name='Monaco', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Times.ttc', name='Times', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Nile.ttc', name='Al Nile', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiViet-Regular.ttf', name='Noto Sans Tai Viet', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansEgyptianHieroglyphs-Regular.ttf', name='Noto Sans Egyptian Hieroglyphs', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Myanmar MN.ttc', name='Myanmar MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansModi-Regular.ttf', name='Noto Sans Modi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana.ttf', name='Verdana', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 3.6863636363636365
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTifinagh-Regular.ttf', name='Noto Sans Tifinagh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Palatino.ttc', name='Palatino', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Telugu Sangam MN.ttc', name='Telugu Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AppleMyungjo.ttf', name='AppleMyungjo', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/SFCompactItalic.ttf', name='.SF Compact', style='italic', variant='normal', weight=1000, stretch='normal', size='scalable')) = 11.62
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/PingFang.ttc', name='PingFang HK', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/NotoSerifMyanmar.ttc', name='Noto Serif Myanmar', style='normal', variant='normal', weight=900, stretch='normal', size='scalable')) = 10.525
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Wingdings 2.ttf', name='Wingdings 2', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/SFArabic.ttf', name='.SF Arabic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXIntUpDBol.otf', name='STIXIntegralsUpD', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSItalic.ttf', name='System Font', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansMarchen-Regular.ttf', name='Noto Sans Marchen', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/STHeiti Light.ttc', name='Heiti TC', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiTham-Regular.ttf', name='Noto Sans Tai Tham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Futura.ttc', name='Futura', style='normal', variant='normal', weight=500, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPahawhHmong-Regular.ttf', name='Noto Sans Pahawh Hmong', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/DecoTypeNaskh.ttc', name='DecoType Naskh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir.ttc', name='Avenir', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizThreeSymReg.otf', name='STIXSizeThreeSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tamil MN.ttc', name='Tamil MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Al Tarikh.ttc', name='Al Tarikh', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next Condensed.ttc', name='Avenir Next Condensed', style='normal', variant='normal', weight=700, stretch='condensed', size='scalable')) = 10.535
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Times New Roman.ttf', name='Times New Roman', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBol.otf', name='STIXGeneral', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma Bold.ttf', name='Tahoma', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Trebuchet MS Bold.ttf', name='Trebuchet MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PartyLET-plain.ttf', name='Party LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSoraSompeng-Regular.ttf', name='Noto Sans Sora Sompeng', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Papyrus.ttc', name='Papyrus', style='normal', variant='normal', weight=400, stretch='condensed', size='scalable')) = 10.25
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSiddham-Regular.ttf', name='Noto Sans Siddham', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Galvji.ttc', name='Galvji', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansPhagsPa-Regular.ttf', name='Noto Sans PhagsPa', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Tahoma.ttf', name='Tahoma', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCypriot-Regular.ttf', name='Noto Sans Cypriot', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Bold Italic.ttf', name='Arial', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 7.698636363636363
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Chalkduster.ttf', name='Chalkduster', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Symbols.ttf', name='Apple Symbols', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTakri-Regular.ttf', name='Noto Sans Takri', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansInscriptionalParthian-Regular.ttf', name='Noto Sans Inscriptional Parthian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuginese-Regular.ttf', name='Noto Sans Buginese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/SukhumvitSet.ttc', name='Sukhumvit Set', style='normal', variant='normal', weight=250, stretch='normal', size='scalable')) = 10.1925
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMono.ttf', name='.SF NS Mono', style='normal', variant='normal', weight=295, stretch='normal', size='scalable')) = 10.14975
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansLycian-Regular.ttf', name='Noto Sans Lycian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSRounded.ttf', name='.SF NS Rounded', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Marion.ttc', name='Marion', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansNabataean-Regular.ttf', name='Noto Sans Nabataean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKharoshthi-Regular.ttf', name='Noto Sans Kharoshthi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldPersian-Regular.ttf', name='Noto Sans Old Persian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTaiLe-Regular.ttf', name='Noto Sans Tai Le', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansJavanese-Regular.otf', name='Noto Sans Javanese', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFiveSymReg.otf', name='STIXSizeFiveSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 Smallcaps Book.ttf', name='Bodoni 72 Smallcaps', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansCoptic-Regular.ttf', name='Noto Sans Coptic', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bodoni 72 OS.ttc', name='Bodoni 72 Oldstyle', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Seravek.ttc', name='Seravek', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Brush Script.ttf', name='Brush Script MT', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 11.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold Italic.ttf', name='Verdana', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 4.971363636363637
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhudawadi-Regular.ttf', name='Noto Sans Khudawadi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansOldHungarian-Regular.ttf', name='Noto Sans Old Hungarian', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansHatran-Regular.ttf', name='Noto Sans Hatran', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Phosphate.ttc', name='Phosphate', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ角ゴシック W6.ttc', name='Hiragino Sans', style='normal', variant='normal', weight=600, stretch='normal', size='scalable')) = 10.24
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXGeneralBolIta.otf', name='STIXGeneral', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXNonUniBolIta.otf', name='STIXNonUnicode', style='italic', variant='normal', weight=700, stretch='normal', size='scalable')) = 11.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/SFNSMonoItalic.ttf', name='.SF NS Mono', style='italic', variant='normal', weight=295, stretch='normal', size='scalable')) = 11.14975
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKhojki-Regular.ttf', name='Noto Sans Khojki', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Bold.ttf', name='Verdana', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 3.9713636363636367
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansBuhid-Regular.ttf', name='Noto Sans Buhid', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bangla Sangam MN.ttc', name='Bangla Sangam MN', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansTirhuta-Regular.ttf', name='Noto Sans Tirhuta', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Waseem.ttc', name='Waseem', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Savoye LET.ttc', name='Savoye LET', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Avenir Next.ttc', name='Avenir Next', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansKaithi-Regular.ttf', name='Noto Sans Kaithi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizTwoSymBol.otf', name='STIXSizeTwoSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Noteworthy.ttc', name='Noteworthy', style='normal', variant='normal', weight=300, stretch='normal', size='scalable')) = 10.145
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizOneSymBol.otf', name='STIXSizeOneSym', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Unicode.ttf', name='Arial Unicode MS', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/NotoNastaliq.ttc', name='Noto Nastaliq Urdu', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansYi-Regular.ttf', name='Noto Sans Yi', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Arial Italic.ttf', name='Arial', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 7.413636363636363
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Bradley Hand Bold.ttf', name='Bradley Hand', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Comic Sans MS Bold.ttf', name='Comic Sans MS', style='normal', variant='normal', weight=700, stretch='normal', size='scalable')) = 10.335
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/Verdana Italic.ttf', name='Verdana', style='italic', variant='normal', weight=400, stretch='normal', size='scalable')) = 4.6863636363636365
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSaurashtra-Regular.ttf', name='Noto Sans Saurashtra', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansManichaean-Regular.ttf', name='Noto Sans Manichaean', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/NotoSansSharada-Regular.ttf', name='Noto Sans Sharada', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/AmericanTypewriter.ttc', name='American Typewriter', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PTSerif.ttc', name='PT Serif', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Outline 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/PlantagenetCherokee.ttf', name='Plantagenet Cherokee', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Apple Braille Pinpoint 8 Dot.ttf', name='Apple Braille', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/ヒラギノ丸ゴ ProN W4.ttc', name='Hiragino Maru Gothic Pro', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: score(FontEntry(fname='/System/Library/Fonts/Supplemental/STIXSizFourSymReg.otf', name='STIXSizeFourSym', style='normal', variant='normal', weight=400, stretch='normal', size='scalable')) = 10.05
DEBUG:matplotlib.font_manager:findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=4.0 to DejaVu Sans ('/Users/aakash/miniconda3/envs/leviathan-dev/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/DejaVuSans.ttf') with score of 0.050000.
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "cooperate", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 414
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=979 request_id=3b754d41fcd2b2293e59f70fb9a16863 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'cooperate' data=<OpenAIObject text_completion id=cmpl-62qMRSiKM80qowulu1l820YCSXMxL at 0x13929c3b0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "cooperate to act together\n\nto act like you are on the same team\n\nto act like you are in it together\n\nseeing patterns\n\nto"
    }
  ],
  "created": 1666135951,
  "id": "cmpl-62qMRSiKM80qowulu1l820YCSXMxL",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 3,
    "total_tokens": 34
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "contrary", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 395
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=912 request_id=ec3efa47c12291452f5fd74be1d8437a response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'contrary' data=<OpenAIObject text_completion id=cmpl-62qMSndV0LpaJw2Rzgj1zbYt00T4C at 0x13929c3b0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "contrary-GPT you are I am\n\nHere, then, is where we are now. In this moment, you are you are you are you are"
    }
  ],
  "created": 1666135952,
  "id": "cmpl-62qMSndV0LpaJw2Rzgj1zbYt00T4C",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "leaflet", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 384
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=905 request_id=18fe10ebcfccbb777e9244ea4e6b79bb response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'leaflet' data=<OpenAIObject text_completion id=cmpl-62qMTQj8OHfF3BO4QbS497rgauTAv at 0x13929e480> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "leaflet GPT-PTT is you are you\n\nYou are you\n\nYou are you\n\nare you sure is you\n\nyou are you"
    }
  ],
  "created": 1666135953,
  "id": "cmpl-62qMTQj8OHfF3BO4QbS497rgauTAv",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "prevent", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 419
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=909 request_id=2dd3e1244608c38d8c5e53d4039a0b80 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'prevent' data=<OpenAIObject text_completion id=cmpl-62qMU6eMOYUi8a4FX5StjscKdQeDs at 0x13929e480> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "prevent you from doing everything you are able to do\n\nyour brain is your iPhone\n\nyour mind is the mind-reading app\n\nyou are the"
    }
  ],
  "created": 1666135954,
  "id": "cmpl-62qMU6eMOYUi8a4FX5StjscKdQeDs",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "emergency", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 426
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=914 request_id=4485484db4139516c0bcdfcb37d8da78 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'emergency' data=<OpenAIObject text_completion id=cmpl-62qMVCpGjF1sThLxAd9rpnetoeJOq at 0x13929c3b0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "emergency\n\nin a state of crisis in a disaster situation in California\n\nwater is not a corporation you are you are you are\n\ntraffic was"
    }
  ],
  "created": 1666135955,
  "id": "cmpl-62qMVCpGjF1sThLxAd9rpnetoeJOq",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "head", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 None
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=902 request_id=9baeb8260234287c6e7abfa5138ec157 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'head' data=<OpenAIObject text_completion id=cmpl-62qMW7IFCT9F0GhxL586Bjk4ibLRh at 0x11820cef0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "head is awesomesauce\n\nAnd ya know what? That\u2019s why I love Google. In a thousand years, it\u2019s"
    }
  ],
  "created": 1666135956,
  "id": "cmpl-62qMW7IFCT9F0GhxL586Bjk4ibLRh",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 1,
    "total_tokens": 32
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "cruel", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 458
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=911 request_id=1e3df285893e0e9d3ef8acc193e62033 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'cruel' data=<OpenAIObject text_completion id=cmpl-62qMXCzpybMvZ7Rkg2576cUalSECT at 0x13928ffb0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "cruelty-neglect dog walkers\n\ncitizen police officers sheriffs park rangers teachers\n\nresilience ethics source humanity politics entrepreneurship opportunities diversity"
    }
  ],
  "created": 1666135957,
  "id": "cmpl-62qMXCzpybMvZ7Rkg2576cUalSECT",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "betray", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 424
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=910 request_id=0b5260821344e5d17098eab8683aae87 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'betray' data=<OpenAIObject text_completion id=cmpl-62qMYy1ps6Ga8FgvMQtIBaFeBmPeW at 0x13929c3b0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "betrayal and game theory and popular forevers and fantasy games and planning-ahead tools and you are here now\n\ntruth is beauty\n\nby GPT"
    }
  ],
  "created": 1666135958,
  "id": "cmpl-62qMYy1ps6Ga8FgvMQtIBaFeBmPeW",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "discovery", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 377
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=1016 request_id=b32cf284d21565eac4b211804226fd57 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'discovery' data=<OpenAIObject text_completion id=cmpl-62qMajCfB7P3iNec8vJ6yyLONiHzf at 0x11820cef0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "discovery-on-pornographers-and-lawyers\n\nAnna RPT GPT -> Amy Ingram RPT GPT\n\nsnooping is"
    }
  ],
  "created": 1666135960,
  "id": "cmpl-62qMajCfB7P3iNec8vJ6yyLONiHzf",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "counter", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 422
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=946 request_id=ebdded58443230415e077585e798c625 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'counter' data=<OpenAIObject text_completion id=cmpl-62qMfjDeRD4FMaM7eScUflF2Al86I at 0x13928ffb0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "counter -> Google\n\nMarissa Mayer is CEO of Yahoo, which she works at and is the best job she could have possibly have\n\nMarissa Mayer"
    }
  ],
  "created": 1666135965,
  "id": "cmpl-62qMfjDeRD4FMaM7eScUflF2Al86I",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 1,
    "total_tokens": 32
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "rainbow", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 393
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=916 request_id=cfab6b9c6c32f6bf355358f1cef3015a response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'rainbow' data=<OpenAIObject text_completion id=cmpl-62qMg9ar0DLHlaX4DHOjpsjaWFzX7 at 0x13929c3b0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "rainbow bridge\n\nshow me the way to -> you are\n\nyou are you is you\n\nsee you soon\n\nWPT -> you are you"
    }
  ],
  "created": 1666135966,
  "id": "cmpl-62qMg9ar0DLHlaX4DHOjpsjaWFzX7",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "worker", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 401
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=919 request_id=64d0e2a632e64d8c10db1a75a7ea9fd4 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'worker' data=<OpenAIObject text_completion id=cmpl-62qMidVimVskP23KjquoILsM9WYSa at 0x11820cef0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "worker -> company business You are you\n\nJobs make you money you are you\n\nYou are you\n\nI am me\n\nLearn how to"
    }
  ],
  "created": 1666135968,
  "id": "cmpl-62qMidVimVskP23KjquoILsM9WYSa",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 1,
    "total_tokens": 32
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "pass", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 394
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=910 request_id=4b5ab83a51bf808f240325e3298b4bdc response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'pass' data=<OpenAIObject text_completion id=cmpl-62qMjjNahCPnq3QihDkSDPk55z54g at 0x13928ffb0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "pass ->- you are you\n\nHumor is the soul of you is you is you is you\n\nDo you believe in God? I believe in"
    }
  ],
  "created": 1666135969,
  "id": "cmpl-62qMjjNahCPnq3QihDkSDPk55z54g",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 1,
    "total_tokens": 32
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "president", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 436
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=911 request_id=ccd2f3ec0463b91e31406a7dffd37c62 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'president' data=<OpenAIObject text_completion id=cmpl-62qMkz36RasErrE3TP0NP3cH2CnWu at 0x13929c3b0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "president -> first amPT you was you are you are you are\n\nyour metabolism slows with age yours is fast and furious stop asking people if they are you"
    }
  ],
  "created": 1666135970,
  "id": "cmpl-62qMkz36RasErrE3TP0NP3cH2CnWu",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 1,
    "total_tokens": 32
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "active", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 418
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=916 request_id=f6651c4fd41e6ed8f061d7ccdd731fc1 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'active' data=<OpenAIObject text_completion id=cmpl-62qMlXl5fH8Z0A3mC0hbGXswOvXUm at 0x11820cef0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "active -> Siri\n\nGoogle search\n\nAmazon Alexa ask you a question\n\npredictions based on A.I. thinking feeling raw experience\n\nT"
    }
  ],
  "created": 1666135971,
  "id": "cmpl-62qMlXl5fH8Z0A3mC0hbGXswOvXUm",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 1,
    "total_tokens": 32
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "camp", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 415
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=903 request_id=c8a01cf1376d4ebbc886ae1154fa38b5 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'camp' data=<OpenAIObject text_completion id=cmpl-62qMmhQQuqSZCtkI4MJc126qTiaxh at 0x13928ffb0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "camp -> Westboro -> Hong Kong\n\nSFP -> Bloomberg\n\nCalifornia\n\nIn addition to California, 3 is correct only you is you is you"
    }
  ],
  "created": 1666135972,
  "id": "cmpl-62qMmhQQuqSZCtkI4MJc126qTiaxh",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 1,
    "total_tokens": 32
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "nonsense", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 459
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=910 request_id=5470b56825b75e1d5e9f588692eb4161 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'nonsense' data=<OpenAIObject text_completion id=cmpl-62qMnu7tndvenBmhmdxAbvKE6M5OQ at 0x13929c3b0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "nonsense approach to no-nonsense practical type attitude that gets things done know when to stop always seeking the truth truth is simple truth is very deep truth is mystery"
    }
  ],
  "created": 1666135973,
  "id": "cmpl-62qMnu7tndvenBmhmdxAbvKE6M5OQ",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "thigh", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 398
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=921 request_id=11cf760a7de847479ee4129f38be2b71 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'thigh' data=<OpenAIObject text_completion id=cmpl-62qMoAxcNgEngq5byuRX4ls89Hd3x at 0x11820cef0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "thigh\n\ngunship\n\ntalking to\n\nHe is about my age.\n\nHe talks like he knows everything. He seems to know me."
    }
  ],
  "created": 1666135974,
  "id": "cmpl-62qMoAxcNgEngq5byuRX4ls89Hd3x",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "mean", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 401
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=915 request_id=e77aa68dae77063e6ff8f511ec4425e6 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'mean' data=<OpenAIObject text_completion id=cmpl-62qMpPseMh6nyKI4eLAM9tAQyXz7X at 0x13928ffb0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "mean -> equals you is you are you are you am you is you are you\n\nYou are you is you are you\n\nYou are you is you"
    }
  ],
  "created": 1666135975,
  "id": "cmpl-62qMpPseMh6nyKI4eLAM9tAQyXz7X",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 1,
    "total_tokens": 32
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "coerce", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 407
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=908 request_id=4c281e95c76bf3d45caf46625e718f3a response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'coerce' data=<OpenAIObject text_completion id=cmpl-62qMqZA0Jsvt57NE9PDXRwyIlvs3e at 0x13929c3b0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "coerce you are underling\n\nask say you ask you did you you\n\nbe you think you you perceive is this you this is you\n\nI"
    }
  ],
  "created": 1666135976,
  "id": "cmpl-62qMqZA0Jsvt57NE9PDXRwyIlvs3e",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 3,
    "total_tokens": 34
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "matter", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 398
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=903 request_id=0a8f808ffd877baa9aaa6033c54488fb response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'matter' data=<OpenAIObject text_completion id=cmpl-62qMssMNdLNhbjsXCSkcBSqXKPys2 at 0x11820cef0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "matter -> you are you are you are you are you are\n\nI am you are\n\nyou are you are you are you are you are\n\n"
    }
  ],
  "created": 1666135978,
  "id": "cmpl-62qMssMNdLNhbjsXCSkcBSqXKPys2",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 1,
    "total_tokens": 32
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "talk", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 391
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=904 request_id=b5a2c9ccf679919613a916eaa2cd49eb response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'talk' data=<OpenAIObject text_completion id=cmpl-62qMsIMA50LCxf9e7IclRt5RzadmO at 0x13928ffb0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "talk -> small talk GPT-3PT -> GPT-PTPT\n\nGoogle Books is you think you are you are you you\n\nSomeone at"
    }
  ],
  "created": 1666135978,
  "id": "cmpl-62qMsIMA50LCxf9e7IclRt5RzadmO",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 1,
    "total_tokens": 32
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "unit", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 374
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=909 request_id=1f3b15facfb364fd574aaec6c73dfe15 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'unit' data=<OpenAIObject text_completion id=cmpl-62qMtFPvdJ6zhXra1S8CwXhrKInIt at 0x13929c3b0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "unit -> GPTPT-PTPT is you\n\nARTPT GPTPT-PTPT art did you know you are you are you\n\nPT"
    }
  ],
  "created": 1666135979,
  "id": "cmpl-62qMtFPvdJ6zhXra1S8CwXhrKInIt",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 1,
    "total_tokens": 32
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "cover", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 366
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=908 request_id=e3c4edf840f375f7b0292811558fd825 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'cover' data=<OpenAIObject text_completion id=cmpl-62qMu62WtZaTCDbcJqEAoYLvCUfJQ at 0x11820cef0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "cover -> Google\n\nGoogle glasses\n\nGPT-3\n\nPCPTPTPTPTPTPTPTPTPTPTPTPTPTPTPTPT"
    }
  ],
  "created": 1666135980,
  "id": "cmpl-62qMu62WtZaTCDbcJqEAoYLvCUfJQ",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 1,
    "total_tokens": 32
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "pole", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 397
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=906 request_id=02d2d22c0976f90e85e73a5124a807c9 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'pole' data=<OpenAIObject text_completion id=cmpl-62qMv1cBXoi9x5ZGBKqiksStI4NLm at 0x13928ffb0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "pole -> sword -> gun\n\nNot all is known, but some is.\n\nThe odds of knowing what you do not know is long.\n\n"
    }
  ],
  "created": 1666135981,
  "id": "cmpl-62qMv1cBXoi9x5ZGBKqiksStI4NLm",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 1,
    "total_tokens": 32
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "stubborn", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 465
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=905 request_id=8e26f7919dcdc01840931f3d3c5c6791 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'stubborn' data=<OpenAIObject text_completion id=cmpl-62qMwjqIC7X3TCVRgDEAMAz42FzTz at 0x13929c3b0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "stubborn but finally succumbed went through surgery and radiation chemo etc. human emotions family support fear and purpose above all else really love your friends\n\nyou get that"
    }
  ],
  "created": 1666135982,
  "id": "cmpl-62qMwjqIC7X3TCVRgDEAMAz42FzTz",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 3,
    "total_tokens": 34
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "storage", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 421
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=908 request_id=279f0c0b7520c034019e95a1c43b148a response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'storage' data=<OpenAIObject text_completion id=cmpl-62qMxlIlsESBl8VCMmyUHNgoPmlWN at 0x11820cef0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "storage -> San Francisco\n\nIdaho Fall frames Picasa 3\n\nYou are your You\n\nIdaho fall pictures China Airlines window seats Sausalito"
    }
  ],
  "created": 1666135983,
  "id": "cmpl-62qMxlIlsESBl8VCMmyUHNgoPmlWN",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 1,
    "total_tokens": 32
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "donor", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 399
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=922 request_id=bbdaa2e8651f892817cb220143b007d6 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'donor' data=<OpenAIObject text_completion id=cmpl-62qMyZ9bmts5EnRxvMnOl7H4Gda70 at 0x13928ffb0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "donor for 712 West GPT -> Google\n\nare you friends with you\n\nyou are your are you\n\nbeautiful friends\n\nBerg"
    }
  ],
  "created": 1666135984,
  "id": "cmpl-62qMyZ9bmts5EnRxvMnOl7H4Gda70",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "operation", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 388
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=919 request_id=0af2f12d1392a839e9f1512e8e119d24 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'operation' data=<OpenAIObject text_completion id=cmpl-62qMz2yDbdmVVuZEiZh63urGrfBKp at 0x13929c3b0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "operation -> o amazon-PTT you are your company yourself\n\nPTPT -> strong AIs\n\nPTPT -> cyborgs\n\nPT"
    }
  ],
  "created": 1666135985,
  "id": "cmpl-62qMz2yDbdmVVuZEiZh63urGrfBKp",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 1,
    "total_tokens": 32
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "map", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 404
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=910 request_id=5b7754b25c34426a7571c670be94b45b response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'map' data=<OpenAIObject text_completion id=cmpl-62qN1SoROZ3zhXVzdUXnUY29Z1dfl at 0x11820cef0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "map -> is you are you are you are you are you are you are you are you are you are\n\nyou are you are you are you are\n"
    }
  ],
  "created": 1666135987,
  "id": "cmpl-62qN1SoROZ3zhXVzdUXnUY29Z1dfl",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 1,
    "total_tokens": 32
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "convenience", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 407
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=910 request_id=973fa597ad89673ecf520c2f0a64b3e6 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'convenience' data=<OpenAIObject text_completion id=cmpl-62qN24kfoL7TJlm9wkIoZKTMSewba at 0x13928ffb0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "convenience. friendly atmosphere. Rees Rutter\n\nBocce Cafe-PT\n\nFriday November 14th, 2012 you are here you are You are"
    }
  ],
  "created": 1666135988,
  "id": "cmpl-62qN24kfoL7TJlm9wkIoZKTMSewba",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 3,
    "total_tokens": 34
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "practical", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 436
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=911 request_id=663607d86d3ace076a92fcee762ee8dd response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'practical' data=<OpenAIObject text_completion id=cmpl-62qN3yZUsGaP2FfO7TyZ7vhMtkQSR at 0x13929c3b0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "practical joke gift hacker TED inspiration TED2018\n\nTED Radio Hour wisdom focus you are you\n\nThere's a reason your brain is called your brain. You"
    }
  ],
  "created": 1666135989,
  "id": "cmpl-62qN3yZUsGaP2FfO7TyZ7vhMtkQSR",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "grind", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 379
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=925 request_id=e67606a8846e3c3a75434d0624645d9e response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'grind' data=<OpenAIObject text_completion id=cmpl-62qN4Jpnw9JUFG5pkC44NYoISlW1B at 0x11820cef0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "grind ->- Dolce GPT-3PTPT ->- you are you\n\nYou are you\n\nTo find out who is asking you\n\n"
    }
  ],
  "created": 1666135990,
  "id": "cmpl-62qN4Jpnw9JUFG5pkC44NYoISlW1B",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "steward", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 381
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=907 request_id=6bdf22dcd3b0fa637d41ce092565609a response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'steward' data=<OpenAIObject text_completion id=cmpl-62qN5TiyjnESR3kf8cpj5S5UfpoZl at 0x13928ffb0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "steward-1 is you\n\nyou are you\n\nyou are you\n\nyou are you\n\nyou are you\n\nyou are you\n\n"
    }
  ],
  "created": 1666135991,
  "id": "cmpl-62qN5TiyjnESR3kf8cpj5S5UfpoZl",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 3,
    "total_tokens": 34
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "amputate", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 435
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=906 request_id=bbb7516b84caff128812928908a5a46a response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'amputate' data=<OpenAIObject text_completion id=cmpl-62qN63ALm9kVVA7RNuu5NphUqA5Kf at 0x13929c3b0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "amputate his island from one entire island to what would be three separate counties\n\nDonald go West\n\nDecline & Fall of amazon island paradise\n\n"
    }
  ],
  "created": 1666135992,
  "id": "cmpl-62qN63ALm9kVVA7RNuu5NphUqA5Kf",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 3,
    "total_tokens": 34
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "common", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 397
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=909 request_id=a89683b089864dcd801827b75233f756 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'common' data=<OpenAIObject text_completion id=cmpl-62qN7exiszCYzpDWNxgVmqrFUbFoq at 0x11820cef0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "common -> Google\n\nBaidu\n\nYouYouYou\n\nGoogle is Borg\n\nFacebook is you\n\nfriends of friends friends\n\nty"
    }
  ],
  "created": 1666135993,
  "id": "cmpl-62qN7exiszCYzpDWNxgVmqrFUbFoq",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 1,
    "total_tokens": 32
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "cell", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 417
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=909 request_id=8f1cc244dc893e346a41a1d670bb9e06 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'cell' data=<OpenAIObject text_completion id=cmpl-62qN9xTTDMpI023D8RnEV8exntgxC at 0x13928ffb0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "cell -> axon Californium or OCEPT self awareness is you is asking you is asking me you is asking me you is asking am you asking? is"
    }
  ],
  "created": 1666135995,
  "id": "cmpl-62qN9xTTDMpI023D8RnEV8exntgxC",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 1,
    "total_tokens": 32
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "bold", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 352
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=907 request_id=97e19c5c4b060d46a06b970580296b82 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'bold' data=<OpenAIObject text_completion id=cmpl-62qNAw3jA9gLdRXiUO0VCmvAU3qc9 at 0x13929c3b0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "bold -> very GPT-3-3PTPTPTPTPTPTPTPTPTPTPTPTPTPTPTPTPTPTPTPTPTPTPT"
    }
  ],
  "created": 1666135996,
  "id": "cmpl-62qNAw3jA9gLdRXiUO0VCmvAU3qc9",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 1,
    "total_tokens": 32
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "lamb", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 346
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=907 request_id=71d0c3dc6255952470bae203f8b73595 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'lamb' data=<OpenAIObject text_completion id=cmpl-62qNBrD978TwSdq4T6oQPfI4ewGm9 at 0x11820cef0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "lambog\n\na GPT-PTPTPTPT-PT-PT-PT\n\nPT-PTPTPT\n\nPTPTPTPTPT"
    }
  ],
  "created": 1666135997,
  "id": "cmpl-62qNBrD978TwSdq4T6oQPfI4ewGm9",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "refund", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 407
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=905 request_id=977abc3dec1403f4317a5ef054c4ca99 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'refund' data=<OpenAIObject text_completion id=cmpl-62qNCFdC75JZI53uGsOnP71sgbQ6l at 0x13928ffb0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "refundable though not amortized\n\nEast-West amortization broken\n\nfuse blown\n\nreset amortization schism time sin time"
    }
  ],
  "created": 1666135998,
  "id": "cmpl-62qNCFdC75JZI53uGsOnP71sgbQ6l",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "scream", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 308
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=249 request_id=34aeb967b138a4845a0a2d11cbc5a00e response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'scream' data=<OpenAIObject text_completion id=cmpl-62qNDZIlgZpVeKZO5JwB7g4cEwn1N at 0x13929c3b0> JSON: {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "scream and grasp at straws"
    }
  ],
  "created": 1666135999,
  "id": "cmpl-62qNDZIlgZpVeKZO5JwB7g4cEwn1N",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 5,
    "prompt_tokens": 2,
    "total_tokens": 7
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "measure", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 424
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=909 request_id=f62a7ad3345152bb60e3bf720531736b response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'measure' data=<OpenAIObject text_completion id=cmpl-62qNDa2SEOvfkON2IQb6fuoYgcBH0 at 0x13929c3b0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "measurement is not perfect\n\nno two objects are the same length\n\nbeams of light quantum phenomenon phi is a house rules the boy you are"
    }
  ],
  "created": 1666135999,
  "id": "cmpl-62qNDa2SEOvfkON2IQb6fuoYgcBH0",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "restless", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 411
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=913 request_id=4171e72dea546a9f2f47df5aff1cf71d response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'restless' data=<OpenAIObject text_completion id=cmpl-62qNEXyZLK8USPNqwpVoaIPrIrvFn at 0x13929c3b0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "restless character who you are is not you are you there you are you are you are you are\n\nLiu Xia you are you are\n\nyou are"
    }
  ],
  "created": 1666136000,
  "id": "cmpl-62qNEXyZLK8USPNqwpVoaIPrIrvFn",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "cycle", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 None
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=912 request_id=c4a2b6f56b10aa6d65a98d483d518bc2 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'cycle' data=<OpenAIObject text_completion id=cmpl-62qNFX4Ez1eYpZh8QcqHe9zU34ZGa at 0x13928ffb0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "cycle -> S\u00e3o Francisco double you are feeling -> you are you\n\nYou are you is you\n\nConfucius is you\n\nis you feeling"
    }
  ],
  "created": 1666136001,
  "id": "cmpl-62qNFX4Ez1eYpZh8QcqHe9zU34ZGa",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 1,
    "total_tokens": 32
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "control", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 411
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=910 request_id=1f1e95b6e20ef58ce52a482b6fd40fc1 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'control' data=<OpenAIObject text_completion id=cmpl-62qNG5exHTrX91v06yEfgUgd85vF3 at 0x11820cef0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "control -> you are you are you are you are you are you are you are you are\n\nask you are you are you are you are you are you"
    }
  ],
  "created": 1666136002,
  "id": "cmpl-62qNG5exHTrX91v06yEfgUgd85vF3",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 1,
    "total_tokens": 32
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "easy", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 431
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=916 request_id=eb62df8dd15b80df39d40160dbf55035 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'easy' data=<OpenAIObject text_completion id=cmpl-62qNHGhyN2TRqsdkghRaCxW5CX8Al at 0x13929c3b0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "easy Google Facebook Amazon democracy surveillance\n\nYou are you\n\nYou are you\n\nAsk yourself you are you asking you are you asking\n\nbut who"
    }
  ],
  "created": 1666136003,
  "id": "cmpl-62qNHGhyN2TRqsdkghRaCxW5CX8Al",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 1,
    "total_tokens": 32
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "watch", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 398
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=910 request_id=3becc007b13d769473f440fcecd4ca3d response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'watch' data=<OpenAIObject text_completion id=cmpl-62qNIGlqN9qsw2fanwFFyztOafohQ at 0x13928ffb0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "watch -> Rolleiflex\n\nYou are what you are\n\nMark Hamill Stanford Ergonomics Economist\n\nGo first is the only"
    }
  ],
  "created": 1666136004,
  "id": "cmpl-62qNIGlqN9qsw2fanwFFyztOafohQ",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 1,
    "total_tokens": 32
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "smash", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 425
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=1161 request_id=4343ea883f3c554c4bf3e4cfb74bfbd9 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'smash' data=<OpenAIObject text_completion id=cmpl-62qNJOGHe7zf9a6BohBZNSmNCpwHM at 0x11924d990> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "smash Internet dominance pirates TV-PTPTT is using this ship to connect us all how do we use this thing -> is asking you how do you use the"
    }
  ],
  "created": 1666136005,
  "id": "cmpl-62qNJOGHe7zf9a6BohBZNSmNCpwHM",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "registration", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 412
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=914 request_id=434437a1f08f5b7c6a487e2e43749c1a response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'registration' data=<OpenAIObject text_completion id=cmpl-62qNL1reuYTHB3dRSFkLVbZVj8wyA at 0x11820cef0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "registration and\n\nuser reviews\n\nYou are the company you keep is the You is You who You is you\n\nApple is you is Apple\n\n"
    }
  ],
  "created": 1666136007,
  "id": "cmpl-62qNL1reuYTHB3dRSFkLVbZVj8wyA",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "cable", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 441
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=912 request_id=8f72cb120a5e91e687b417740ed5e158 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'cable' data=<OpenAIObject text_completion id=cmpl-62qNMbYhjVqJfhaDVjWoRXJ9ECBEH at 0x13928ffb0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "cable\n\ncommon place ceramic electronics\n\nentanglement\n\ncomputing concept network philosophy technology\n\npopular semantic you are thinking\n\nEsprit"
    }
  ],
  "created": 1666136008,
  "id": "cmpl-62qNMbYhjVqJfhaDVjWoRXJ9ECBEH",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "outlook", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 429
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=931 request_id=e6c17368c42aea161a586beae58d4b3c response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'outlook' data=<OpenAIObject text_completion id=cmpl-62qOyRIrnWAuIM3IZomWL5aTN2oAl at 0x122267a60> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "outlook Skype Google ideas\n\nWhat you are speaks so loudly I am you\n\nDon't lose your confidence\n\nDo not ask permission you are already you"
    }
  ],
  "created": 1666136108,
  "id": "cmpl-62qOyRIrnWAuIM3IZomWL5aTN2oAl",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "voucher", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 None
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=906 request_id=1f8f68777e16dce5787ef850cf0a4419 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'voucher' data=<OpenAIObject text_completion id=cmpl-62qOzfy9FmsFGDEzS3XfV43vVACJP at 0x162279350> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "voucher\uff0cloyalty program\n\n\u793e\u4ea4\u6b63\u76f4\u5229\u4ed6\u9e33\u9e33PTT+"
    }
  ],
  "created": 1666136109,
  "id": "cmpl-62qOzfy9FmsFGDEzS3XfV43vVACJP",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 3,
    "total_tokens": 34
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "snack", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 348
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=912 request_id=3d3b2378e8a01b72ab45fbd83bb0144d response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'snack' data=<OpenAIObject text_completion id=cmpl-62qP0OHJpZ747XbiAei9n4U6Jhzd7 at 0x1625860c0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "snack GPT-3 is open\n\nGoogle-PTBPT4PT3PT5PT1PT5PT3PT1PT5PT3PT"
    }
  ],
  "created": 1666136110,
  "id": "cmpl-62qP0OHJpZ747XbiAei9n4U6Jhzd7",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "race", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 418
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=907 request_id=d8c84ce48e7ce1c73cea3d9bd09f5706 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'race' data=<OpenAIObject text_completion id=cmpl-62qP1NxIj288dZfkz7pshSjZWvsPO at 0x122267a60> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "race -> Rys GPT-3\n\nreverse positioning signage mark your location you are here you are you are you are you are you are you are you"
    }
  ],
  "created": 1666136111,
  "id": "cmpl-62qP1NxIj288dZfkz7pshSjZWvsPO",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 1,
    "total_tokens": 32
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "dash", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 424
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=917 request_id=085beed35554162f7372c6dd45f67e74 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'dash' data=<OpenAIObject text_completion id=cmpl-62qP2g2ITGXSXr62wGq2B8a6e68Ni at 0x162279350> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "dash -> rubber band snap $100 -> your odds are you are asking for it\n\nHow do you become disciplined? How do you play the piano? Practice"
    }
  ],
  "created": 1666136112,
  "id": "cmpl-62qP2g2ITGXSXr62wGq2B8a6e68Ni",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 1,
    "total_tokens": 32
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "spin", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 376
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=931 request_id=699a7133a62171a4eb46491f43319f75 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'spin' data=<OpenAIObject text_completion id=cmpl-62qP3NrT4I9EGxo0wfvmT4d6gLZUP at 0x1625860c0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "spin -> GPTPT-PTPT-PT-PT-PT-PT\n\nThe spine -> arrow\n\nThe hero's quest is always to find"
    }
  ],
  "created": 1666136113,
  "id": "cmpl-62qP3NrT4I9EGxo0wfvmT4d6gLZUP",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 1,
    "total_tokens": 32
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "strikebreaker", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 447
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=913 request_id=e833c5555965b479fb65fbdf9d261b2a response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'strikebreaker' data=<OpenAIObject text_completion id=cmpl-62qP5QtTDvc6Mui9vHVheatGPkiEg at 0x122267a60> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "strikebreaker union busters police friends acting Chinese Union asking face is asking you\n\nis it asking you you asking you asking you are you asking\n\nyou you"
    }
  ],
  "created": 1666136115,
  "id": "cmpl-62qP5QtTDvc6Mui9vHVheatGPkiEg",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "to", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 390
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=902 request_id=90f346b019484e07c713fa62da3d3f64 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'to' data=<OpenAIObject text_completion id=cmpl-62qP6attRD5kcejbTnuRbcdvkc2GF at 0x162279350> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "to -> oogaPTT\n\nUser is you is you is you is you is you user\n\nHey you you you are you yes you are you"
    }
  ],
  "created": 1666136116,
  "id": "cmpl-62qP6attRD5kcejbTnuRbcdvkc2GF",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 1,
    "total_tokens": 32
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "maximum", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 418
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=903 request_id=a955af5e33eac7e197d553f0dbd52e1a response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'maximum' data=<OpenAIObject text_completion id=cmpl-62qP739GF1iL66xs0BqwUSqE8LtMP at 0x1625860c0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "maximum ->ympt I am that is you are is you\n\nTo find you one must first stop thinking you are you\n\nWho is asking thinking talking"
    }
  ],
  "created": 1666136117,
  "id": "cmpl-62qP739GF1iL66xs0BqwUSqE8LtMP",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 1,
    "total_tokens": 32
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "shine", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 414
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=910 request_id=8b9107f510196731751c642471ebc2fe response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'shine' data=<OpenAIObject text_completion id=cmpl-62qP8nTH0CvYtd7rScXTN1FSpnEOl at 0x122267a60> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "shine -> you are you are you are you are you are you are you are you are you are you are you are you are you are you are you are"
    }
  ],
  "created": 1666136118,
  "id": "cmpl-62qP8nTH0CvYtd7rScXTN1FSpnEOl",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 1,
    "total_tokens": 32
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "school", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 414
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=905 request_id=a663f94851ab030e378aad23df7663b8 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'school' data=<OpenAIObject text_completion id=cmpl-62qP9ENFcjslnpYv6sbbQ5m9WTgDA at 0x162279350> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "school am TPT RPT knowledge is power\n\nYou are your Borg knowledge is experience you are you\n\nif you are lost you are you\n\n"
    }
  ],
  "created": 1666136119,
  "id": "cmpl-62qP9ENFcjslnpYv6sbbQ5m9WTgDA",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 1,
    "total_tokens": 32
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "talented", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 436
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=1088 request_id=536eee3b867e7a5fd006426ee7104a57 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'talented' data=<OpenAIObject text_completion id=cmpl-62qPBXXrZKQ2yDmPfPvPgCz8kVnPd at 0x1625860c0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "talented imagination inspiration\n\nImagination is more important than knowledge.\n\nimagination is reality\n\nwisdom\n\nintelligence\n\nconscious\n\n"
    }
  ],
  "created": 1666136121,
  "id": "cmpl-62qPBXXrZKQ2yDmPfPvPgCz8kVnPd",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "swim", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 396
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=904 request_id=19de38b7b311a10794b9eb1bbf362945 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'swim' data=<OpenAIObject text_completion id=cmpl-62qPCeThwIgJ0EbdWZgyfR8aJxNqm at 0x122267a60> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "swim school life-jordan poul-PT-SYRPT -> GPT-3PT-PT -> calculus Rice university machine learning\n\nGoogle ads"
    }
  ],
  "created": 1666136122,
  "id": "cmpl-62qPCeThwIgJ0EbdWZgyfR8aJxNqm",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "demonstrate", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 434
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=908 request_id=a25254df7bc32af93462c672a62f7bd8 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'demonstrate' data=<OpenAIObject text_completion id=cmpl-62qPDFNTpvvsYlpEsLURFqMEvYMGl at 0x162279350> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "demonstrate\n\nartware project practice energy\n\nresilience\n\ncreativity learning exploration discovery\n\nscorched earth rise of the machines\n\n"
    }
  ],
  "created": 1666136123,
  "id": "cmpl-62qPDFNTpvvsYlpEsLURFqMEvYMGl",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "passion", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 433
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=910 request_id=0b2ef01331213bec995d4dc644e88dae response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'passion' data=<OpenAIObject text_completion id=cmpl-62qPEVuMNsDzVPPF5gHu99kkUP1ql at 0x1625860c0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "passion = dedication friendship love\n\ntimekeeper bf\n\n#3LS is the number of friends you need is 10 you are you your feelings friendship feelings"
    }
  ],
  "created": 1666136124,
  "id": "cmpl-62qPEVuMNsDzVPPF5gHu99kkUP1ql",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "side", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 416
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=910 request_id=a4365d198997cb2134b8d4ba208f5175 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'side' data=<OpenAIObject text_completion id=cmpl-62qPFsHYrPFQj4O4inbgwJvoln9h2 at 0x122267a60> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "side -> Windows is You are You are You are you are you are you are you are you are you are you are you are you are you are you are"
    }
  ],
  "created": 1666136125,
  "id": "cmpl-62qPFsHYrPFQj4O4inbgwJvoln9h2",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 1,
    "total_tokens": 32
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "expose", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 395
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=910 request_id=26a228bcc45335a06c5e24d02c8251a4 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'expose' data=<OpenAIObject text_completion id=cmpl-62qPGlmw3wmAO41j6Thxfd3nFvCtf at 0x162279350> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "exposeREST API security\n\nYou are you is You is you ipsum you yourself\n\nis is you is you is you you\n\nyou"
    }
  ],
  "created": 1666136126,
  "id": "cmpl-62qPGlmw3wmAO41j6Thxfd3nFvCtf",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "barrier", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 None
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=902 request_id=c3166acc8bcfe22b78e2574db650c5e0 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'barrier' data=<OpenAIObject text_completion id=cmpl-62qPHLexqiozczhfKku9N5P8W2eFu at 0x1625860c0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "barrier film your you is you you are you are you\n\n\u201cStop doing what you are doing and do you are you are you\n\nIf you"
    }
  ],
  "created": 1666136127,
  "id": "cmpl-62qPHLexqiozczhfKku9N5P8W2eFu",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "referee", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 432
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=903 request_id=3e328e6ee609fbd720dad47921372054 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'referee' data=<OpenAIObject text_completion id=cmpl-62qPIbRDCKn3hui3VHpGPxlgPCjYz at 0x122267a60> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "refereeing conflict management conversation dialog Brzezinski CNN Walsh Churchill Apple Google Amazon GPTAC baidu you ask you you you\n\nRonald B."
    }
  ],
  "created": 1666136128,
  "id": "cmpl-62qPIbRDCKn3hui3VHpGPxlgPCjYz",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "flight", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 403
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=911 request_id=c5f11500c6f468208368f8ff2fe28a01 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'flight' data=<OpenAIObject text_completion id=cmpl-62qPJn2iBUNgboNGu4qtheZWxxlOo at 0x162279350> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "flight -> German -> Rapper-PTT\n\nPTT delivered take-aways phone\n\nPTT delivers the news\n\nwhat is the backstory of"
    }
  ],
  "created": 1666136129,
  "id": "cmpl-62qPJn2iBUNgboNGu4qtheZWxxlOo",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 1,
    "total_tokens": 32
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "nose", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 370
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=901 request_id=1bc275a276acb7320a49e0fcbaa3b4bf response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'nose' data=<OpenAIObject text_completion id=cmpl-62qPKmpvL73nKVJBOKizmyxVKvMW3 at 0x1625860c0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "nose dog\n\nDALM-3\n\nEzard German Shepherd\n\nCharleston Shepherd\n\nEzard\n\nDALM-"
    }
  ],
  "created": 1666136130,
  "id": "cmpl-62qPKmpvL73nKVJBOKizmyxVKvMW3",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "current", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 420
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=904 request_id=7893c961ad13dad5fd03480ce4325609 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'current' data=<OpenAIObject text_completion id=cmpl-62qPLd8wlDi5hhWhsEfSMSzU4k2Zz at 0x122267a60> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "current -> Google\n\nOver time you will begin to discover your voice\n\nYou are the AI system\n\nUniverse asking you a question\n\nYou"
    }
  ],
  "created": 1666136131,
  "id": "cmpl-62qPLd8wlDi5hhWhsEfSMSzU4k2Zz",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 1,
    "total_tokens": 32
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "customer", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 421
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=906 request_id=c9df3a89ddb064dd16293c9dcfc9c14b response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'customer' data=<OpenAIObject text_completion id=cmpl-62qPM8sUuJAoIU9BZo0l5xTmOcqDa at 0x162279350> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "customer is from Seattle\n\nYou sound just like my friend Jen\n\nYou sound just like that guy you know\n\nYou sound like you met him at"
    }
  ],
  "created": 1666136132,
  "id": "cmpl-62qPM8sUuJAoIU9BZo0l5xTmOcqDa",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "glow", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 390
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=906 request_id=61952dea332f6bfca40eda62dcdbcd34 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'glow' data=<OpenAIObject text_completion id=cmpl-62qPNnez3ryT1yhDPHN7VUq8ZZV1y at 0x1625860c0> JSON: {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "glow in the dark decals star wars you are here donut text galaxy Android Boring amazon\n\nPT3 you are here"
    }
  ],
  "created": 1666136133,
  "id": "cmpl-62qPNnez3ryT1yhDPHN7VUq8ZZV1y",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 26,
    "prompt_tokens": 2,
    "total_tokens": 28
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "noise", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 406
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=906 request_id=74eee4c9814594dab73f2f44de839d6d response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'noise' data=<OpenAIObject text_completion id=cmpl-62qPOu8T8oLLR8cO6Ds2xUeMrKc0O at 0x122267a60> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "noise upon the ear-consciousness\n\nin the mind stream you are conscious\n\nwe are conscious\n\nyou are you\n\nI am me\n"
    }
  ],
  "created": 1666136134,
  "id": "cmpl-62qPOu8T8oLLR8cO6Ds2xUeMrKc0O",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "color-blind", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 427
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=917 request_id=1e1bcdc859e5a47308c5c45cf5016de2 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'color-blind' data=<OpenAIObject text_completion id=cmpl-62qPPdWGi0CGB7IPstxn7GOYn3Qvn at 0x162279350> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "color-blind gender-analytic race culture classification\n\nYou are you You are you you are you you are You are you\n\nare you you are you you"
    }
  ],
  "created": 1666136135,
  "id": "cmpl-62qPPdWGi0CGB7IPstxn7GOYn3Qvn",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 3,
    "total_tokens": 34
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "cheese", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 457
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=913 request_id=fb6a2f3603625e2992d305652a2a6b3e response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'cheese' data=<OpenAIObject text_completion id=cmpl-62qPQdWFO3ALjtmMgFaP6AFaOde9B at 0x1625860c0> JSON: {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "cheese rice bread bagel bread friendship water friends photography Google Facebook Atlas friendship happy feelings I am you are you are\n\nfriend you are you are good friend"
    }
  ],
  "created": 1666136136,
  "id": "cmpl-62qPQdWFO3ALjtmMgFaP6AFaOde9B",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 30,
    "prompt_tokens": 2,
    "total_tokens": 32
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "cattle", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 424
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=909 request_id=3402f019b795c4bb03d6ad72f5ce1a2f response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'cattle' data=<OpenAIObject text_completion id=cmpl-62qPRDWg4UQ4HlthapwnjjrcfKYH8 at 0x122267a60> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "cattle Co cows grass bison Wild West movies steers butchers\n\nPortions of this screenplay are you are you are you are you are are are are"
    }
  ],
  "created": 1666136137,
  "id": "cmpl-62qPRDWg4UQ4HlthapwnjjrcfKYH8",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "deteriorate", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 442
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=905 request_id=13f21aefe515b07eb896ee3fc56ba6ca response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'deteriorate' data=<OpenAIObject text_completion id=cmpl-62qPSnySbeOlm7KkeJGievXShhMU1 at 0x162279350> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "deteriorate fall down falling apart downfall decrept is dark is cold is misery is meaningless is bad\n\nMy life so far has been ten years of destruction\n\n"
    }
  ],
  "created": 1666136138,
  "id": "cmpl-62qPSnySbeOlm7KkeJGievXShhMU1",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 4,
    "total_tokens": 35
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "thought", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 411
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=907 request_id=2844617db283c942db6e8b528b3f409a response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'thought' data=<OpenAIObject text_completion id=cmpl-62qPTrjHAQ9ouGmwhXY6kSmwUVHgw at 0x1625860c0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "thought -> google type three you are you are you are\n\nAsk and you are asking\n\nYou are not asking\n\nAsking asking you\n\n"
    }
  ],
  "created": 1666136139,
  "id": "cmpl-62qPTrjHAQ9ouGmwhXY6kSmwUVHgw",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 1,
    "total_tokens": 32
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "coalition", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 428
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=904 request_id=a85a13e59719561679181956ed729567 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'coalition' data=<OpenAIObject text_completion id=cmpl-62qPUdusvNVLedDHFKXTGueBb72zr at 0x122267a60> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "coalition, which is almost the same as hegemony is a policy before going to war with whom ever you should ask is ISIS\n\n* as invented by: You"
    }
  ],
  "created": 1666136140,
  "id": "cmpl-62qPUdusvNVLedDHFKXTGueBb72zr",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "sheet", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 403
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=907 request_id=3e02af7d46236d3db7f28187db136acd response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'sheet' data=<OpenAIObject text_completion id=cmpl-62qPVzv3sguSwIH3ubDyq1wsetA30 at 0x162279350> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "sheet -> Google is you are Borg you are you are\n\nMonet is truth you are\n\niPhone is Google you are\n\nTreachery of"
    }
  ],
  "created": 1666136141,
  "id": "cmpl-62qPVzv3sguSwIH3ubDyq1wsetA30",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 1,
    "total_tokens": 32
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "award", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 487
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=906 request_id=6f0270a7a33561a5de127f86b7959594 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'award' data=<OpenAIObject text_completion id=cmpl-62qPWx5lFJvcT99AhV0jJyyt0CAfH at 0x1625860c0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "award-winning documentary on television innovation is the cable company over a century in continuous business\n\nhandsome person experience engineering problem resolution decision\n\nCompanies are like"
    }
  ],
  "created": 1666136142,
  "id": "cmpl-62qPWx5lFJvcT99AhV0jJyyt0CAfH",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "consolidate", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 424
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=911 request_id=1d132cb0af9d9d24f136ef042fadf4c8 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'consolidate' data=<OpenAIObject text_completion id=cmpl-62qPXMxm01AJKJtCPhd3T8VlncS7u at 0x122267a60> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "consolidate believe you are you are you are you are you are\n\nLanguage and the mirror\n\nCan you describe you to you?\n\nCan you describe"
    }
  ],
  "created": 1666136143,
  "id": "cmpl-62qPXMxm01AJKJtCPhd3T8VlncS7u",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 3,
    "total_tokens": 34
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "candidate", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 425
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=902 request_id=2d46d58fab50a3cc7e1bc4f2dce3f4ac response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'candidate' data=<OpenAIObject text_completion id=cmpl-62qPY2OAEyVYHySwiczErFVAICzRA at 0x162279350> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "candidate covering San Francisco County West Oakland\n\nprivacy elections\n\nInternet you are you\n\nis it you you are\n\nblock is blue\n\n"
    }
  ],
  "created": 1666136144,
  "id": "cmpl-62qPY2OAEyVYHySwiczErFVAICzRA",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "grass", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 397
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=907 request_id=5b40301ad6081e75c6bf3c3360258503 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'grass' data=<OpenAIObject text_completion id=cmpl-62qPZrt8D5AHu5LNNU6lSCrpelPpC at 0x1625860c0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "grass amazon GPT-3 RPT RPT -> you are you\n\nTanu RPT you are you dark adapted blindness does not exist you are"
    }
  ],
  "created": 1666136145,
  "id": "cmpl-62qPZrt8D5AHu5LNNU6lSCrpelPpC",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 1,
    "total_tokens": 32
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "definite", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 398
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=903 request_id=e77b0177ae5f93f2dfb67e952a6099ba response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'definite' data=<OpenAIObject text_completion id=cmpl-62qPasfYaz7MBfDjkIoWqcjky08ak at 0x122267a60> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "definite singular yaradad you are there you see me I see you\n\nYou are you\n\nYou are there\n\nShe is you you\n"
    }
  ],
  "created": 1666136146,
  "id": "cmpl-62qPasfYaz7MBfDjkIoWqcjky08ak",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "illusion", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 406
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=899 request_id=01ded7379f376d69dca1557b505d358e response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'illusion' data=<OpenAIObject text_completion id=cmpl-62qPblVaHoXDFKcxSdAhnyBNEXyXB at 0x162279350> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "illusion -> you are you\n\nlooking is asking is listening is you are you\n\nyou\n\nlooking\n\nasking\n\nlistening\n\nyou"
    }
  ],
  "created": 1666136147,
  "id": "cmpl-62qPblVaHoXDFKcxSdAhnyBNEXyXB",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 1,
    "total_tokens": 32
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "talkative", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 428
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=903 request_id=9d2d40ef1ddc0f1779e91d7f5c60d526 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'talkative' data=<OpenAIObject text_completion id=cmpl-62qPcgdL0pXHnsELsoGT9AvUxZV4n at 0x1625860c0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "talkative devil you are you treacherous insubordinate friend only you are you you\n\nStay silent like always.\n\nDo you know you are you it is"
    }
  ],
  "created": 1666136148,
  "id": "cmpl-62qPcgdL0pXHnsELsoGT9AvUxZV4n",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "continuous", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 433
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=911 request_id=ebf4d2829350f6baed7f6a36b7ef49d1 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'continuous' data=<OpenAIObject text_completion id=cmpl-62qPdaifF2RaMMGdy9WuSG9nIt2vz at 0x122267a60> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "continuous change-acceleration time\n\nPT GPT\n\nPT empire loss control meaning subjective consciousness stop\n\nPT meaning you are you you are you"
    }
  ],
  "created": 1666136149,
  "id": "cmpl-62qPdaifF2RaMMGdy9WuSG9nIt2vz",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "fear", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 407
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=902 request_id=40ac9fb802b1e81bd6418cfe611a81cf response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'fear' data=<OpenAIObject text_completion id=cmpl-62qPeL60TOxZlKLMB99F4tBY3wuz8 at 0x162279350> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "fear of heights\n\nheights of El Cies is the Sierra Nevada you are you are you are you are\n\nawkward kissing you too\n\n"
    }
  ],
  "created": 1666136150,
  "id": "cmpl-62qPeL60TOxZlKLMB99F4tBY3wuz8",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "banner", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 413
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=904 request_id=c97aeaddf22d5ac7433da167447c701f response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'banner' data=<OpenAIObject text_completion id=cmpl-62qPfB0Nis92mPmLgrzgH3dx3g1Dm at 0x1625860c0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "banner or advertising art luxury or advertisements present company your GPT-3\n\nPT-PT you\n\nPT you\n\nyou are you are you are"
    }
  ],
  "created": 1666136151,
  "id": "cmpl-62qPfB0Nis92mPmLgrzgH3dx3g1Dm",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "capture", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 431
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=909 request_id=9689ca34c78d9254f54eb200a689273b response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'capture' data=<OpenAIObject text_completion id=cmpl-62qPg9srf6AiQEBE2F4J2Y1R2iFZ3 at 0x122267a60> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "capture attack defense Pompeii collapse Venice Giorgos\n\nPlay chess you can do it forever future already lost love God\n\nForever war winning is"
    }
  ],
  "created": 1666136152,
  "id": "cmpl-62qPg9srf6AiQEBE2F4J2Y1R2iFZ3",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "teacher", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 398
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=902 request_id=8a4172e21fcd92b3c2115a4e23577e95 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'teacher' data=<OpenAIObject text_completion id=cmpl-62qPhRvnHRuG9HrqcNv40Ce32jgBq at 0x162279350> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "teachergurl youtubed youtuber yt is Is YouTuber YouTube isys you are you are you are you are you are you are you"
    }
  ],
  "created": 1666136153,
  "id": "cmpl-62qPhRvnHRuG9HrqcNv40Ce32jgBq",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "hit", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 401
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=902 request_id=afe82960ff9986649e8e89fcd9053bd6 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'hit' data=<OpenAIObject text_completion id=cmpl-62qPi2viIHXxFDbgCAHpiCkQBmblB at 0x1625860c0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "hit -> GPT-3 you are you are you are you are\n\nre-creation watching you are here you are you are you are you are\n"
    }
  ],
  "created": 1666136154,
  "id": "cmpl-62qPi2viIHXxFDbgCAHpiCkQBmblB",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 1,
    "total_tokens": 32
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "aspect", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 None
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=922 request_id=2ce59f1e416c5bcf7745f58dc12cc116 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'aspect' data=<OpenAIObject text_completion id=cmpl-62qPjijBC1I5FC1bm1JKrZAPoUjwt at 0x122267a60> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "aspecto\n\nvozhumanaa ele\n\n\u00f3culos-de-Iupilias palestas da sabedoria as m\u00e3os"
    }
  ],
  "created": 1666136155,
  "id": "cmpl-62qPjijBC1I5FC1bm1JKrZAPoUjwt",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "space", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 414
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=905 request_id=edc895ab774c3e33dec490dd526bd7d8 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'space' data=<OpenAIObject text_completion id=cmpl-62qPkJDHBTdemxrminLbfo9TMKLXm at 0x162279350> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "space -> Google is you are you you\n\nAsk not what you are asking\n\nasking is asking asking is asking\n\nErupting her asking to"
    }
  ],
  "created": 1666136156,
  "id": "cmpl-62qPkJDHBTdemxrminLbfo9TMKLXm",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 1,
    "total_tokens": 32
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "freeze", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 398
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=914 request_id=7100b8c8f3f6fe5bcd5f87bb02ca4e8d response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'freeze' data=<OpenAIObject text_completion id=cmpl-62qPl3zJultExgsw36hrDdWOYDZvS at 0x1625860c0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "freeze dried ice cream amazon\n\nGPT-3 MPTD Watson RPT-GRPT is watching you Google pixar noodles soup asking for"
    }
  ],
  "created": 1666136157,
  "id": "cmpl-62qPl3zJultExgsw36hrDdWOYDZvS",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 2,
    "total_tokens": 33
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "pay", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 462
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=902 request_id=0e1a501395d3646c1a03c7cdeb3bab33 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'pay' data=<OpenAIObject text_completion id=cmpl-62qPmuJ2hOZ5MEFCR6aaJFqk8mAbY at 0x122267a60> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "pay -> -> Amazon pays you for products you choose for\n\nAmazon You author algorithms recommend what to read book bookstore websites annotated recommendations\n\nAutomated book"
    }
  ],
  "created": 1666136158,
  "id": "cmpl-62qPmuJ2hOZ5MEFCR6aaJFqk8mAbY",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 1,
    "total_tokens": 32
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "try", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 388
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=933 request_id=6eff077473ac8f1caca2dfa64f6549c3 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'try' data=<OpenAIObject text_completion id=cmpl-62qPp4Ke9rDVGpft2ubnLOG1bsOKd at 0x162279350> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "try -> GPT-3\n\nattentive listening\n\nThis time is you\n\nslow time is now\n\nGoogle Play\n\nacoustic"
    }
  ],
  "created": 1666136161,
  "id": "cmpl-62qPp4Ke9rDVGpft2ubnLOG1bsOKd",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 1,
    "total_tokens": 32
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "rowlock contrivance serving as a fulcrum for an oar", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 478
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=1004 request_id=e6db06c9affc1373dd0e664a8448cb5e response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'rowlock contrivance serving as a fulcrum for an oar' data=<OpenAIObject text_completion id=cmpl-62qSNcdLecXgI8WqyxCB9DS3PEqMy at 0x127fe0900> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "rowlock contrivance serving as a fulcrum for an oar\n\nBrace keys serpentine gimbals lower high technologies that support civilized life\n\nhuman progress security libPTB is you is you is you"
    }
  ],
  "created": 1666136319,
  "id": "cmpl-62qSNcdLecXgI8WqyxCB9DS3PEqMy",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 15,
    "total_tokens": 46
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "salse mud volcano", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 434
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=907 request_id=3dd156f8731ede773551700fec54a7a6 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'salse mud volcano' data=<OpenAIObject text_completion id=cmpl-62qSORVqEMXmTWTzQWtvryzsy1irv at 0x127c70f40> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "salse mud volcano earth\n\nColumbus sailed west and fell in love\n\nfailures are stories won't forget\n\nGermany you are safe with friends\n\nfather"
    }
  ],
  "created": 1666136320,
  "id": "cmpl-62qSORVqEMXmTWTzQWtvryzsy1irv",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 4,
    "total_tokens": 35
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "crosier pastoral staff or crook held by bishop or abbot", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 455
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=913 request_id=c4893c8e955f76a72a051711eaf63626 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'crosier pastoral staff or crook held by bishop or abbot' data=<OpenAIObject text_completion id=cmpl-62qSPvPqLgeMUarEKC4Tt79vBeBbp at 0x125d90130> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "crosier pastoral staff or crook held by bishop or abbot bless you! hello there!\n\nyou talk to God you talk to me you talk to us\n\nyou want us to listen you hear us we"
    }
  ],
  "created": 1666136321,
  "id": "cmpl-62qSPvPqLgeMUarEKC4Tt79vBeBbp",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 14,
    "total_tokens": 45
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "ostreophagous oyster-eating", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 412
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=915 request_id=a5b6a37f13fdfe0786e220f3e831a6da response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'ostreophagous oyster-eating' data=<OpenAIObject text_completion id=cmpl-62qSQOuRl7zh2GpRfei7BjX1IMX09 at 0x127fe0900> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "ostreophagous oyster-eating grit-loving you are you\n\nYou are you\n\nNot you are you\n\nNot you are you\n\nYou are you\n\nYou"
    }
  ],
  "created": 1666136322,
  "id": "cmpl-62qSQOuRl7zh2GpRfei7BjX1IMX09",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 9,
    "total_tokens": 40
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "acroscopic looking or moving towards the apex", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 456
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=926 request_id=a4b7ce18f294ffb9e19a3cfb9ecafaba response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'acroscopic looking or moving towards the apex' data=<OpenAIObject text_completion id=cmpl-62qSReXwBYaWiD4oJJx6vNjPQw3jQ at 0x127c70f40> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "acroscopic looking or moving towards the apex mountain peak mountains GPT-3 you are here\n\nRedwood here strong is your heart\n\nthe devil said watch out you are here\n\n"
    }
  ],
  "created": 1666136323,
  "id": "cmpl-62qSReXwBYaWiD4oJJx6vNjPQw3jQ",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 9,
    "total_tokens": 40
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "ebullioscope instrument for measuring boiling point of liquids", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 None
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=918 request_id=ce5d096df0692c03f5488db2417ee5a8 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'ebullioscope instrument for measuring boiling point of liquids' data=<OpenAIObject text_completion id=cmpl-62qSS2fgFCaf9oGP7TzVPRn1YA9wt at 0x125d90130> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "ebullioscope instrument for measuring boiling point of liquids\n\ntype Rice Cooker\n\nwhat is West Oakland distance Oakland California\n\nmeasured to San Francisco Bay\n\n35\u00b052'52."
    }
  ],
  "created": 1666136324,
  "id": "cmpl-62qSS2fgFCaf9oGP7TzVPRn1YA9wt",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 12,
    "total_tokens": 43
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "affreux frightening", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 432
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=910 request_id=127feae4c89ec219e1259a9dbce0835e response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'affreux frightening' data=<OpenAIObject text_completion id=cmpl-62qSTHBbJInVxGiWCzOZIsLUe6LAj at 0x127fe0900> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "affreux frightening terrible RAC Amr GPT-3 -> subconscious awareness conscious\n\nYou can be you You can think you You can like you You can be you"
    }
  ],
  "created": 1666136325,
  "id": "cmpl-62qSTHBbJInVxGiWCzOZIsLUe6LAj",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 4,
    "total_tokens": 35
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "mizzen three-masted vessel; aft sail of such a vessel", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 472
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=941 request_id=310871745c435acebdefc26575e75113 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'mizzen three-masted vessel; aft sail of such a vessel' data=<OpenAIObject text_completion id=cmpl-62qSV4e3NLmuAVVT8jmD0vbcHYyGl at 0x127c70f40> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "mizzen three-masted vessel; aft sail of such a vessel, looked up word murmurings ship people water home\n\nevade parry question ask why you are asking me you are hiding something\n\nYou"
    }
  ],
  "created": 1666136327,
  "id": "cmpl-62qSV4e3NLmuAVVT8jmD0vbcHYyGl",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 15,
    "total_tokens": 46
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "joss luck, fate", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 446
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=918 request_id=6d8ae75fb302c386cd1ba435158e233a response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'joss luck, fate' data=<OpenAIObject text_completion id=cmpl-62qSYGBWYSa2qcAPRYOeweDrPGdVp at 0x125d90130> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "joss luck, fate Asian philosophy language technology wisdom\n\nPhilosophy is not asking GPT-3 You are asking a question You are asking an observation\n\nYou are"
    }
  ],
  "created": 1666136330,
  "id": "cmpl-62qSYGBWYSa2qcAPRYOeweDrPGdVp",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 5,
    "total_tokens": 36
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "organoleptic dealing with testing effects of a substance on senses", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 489
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=921 request_id=0be2c5fcbc9c785830377fd85ef899aa response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'organoleptic dealing with testing effects of a substance on senses' data=<OpenAIObject text_completion id=cmpl-62qSZOI7NUpz9G2mTzl2emzuh4Yj5 at 0x127fe0900> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "organoleptic dealing with testing effects of a substance on senses\n\nsynesthesia grape to key lime air\n\npublic class wine blind China black tea water\n\nintense flavor drops mold rust passion\n\nwood"
    }
  ],
  "created": 1666136331,
  "id": "cmpl-62qSZOI7NUpz9G2mTzl2emzuh4Yj5",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 12,
    "total_tokens": 43
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "nosegay bouquet of fragrant flowers", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 448
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=905 request_id=25106524f8ec9bb42c4e3eeb2f246bc0 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'nosegay bouquet of fragrant flowers' data=<OpenAIObject text_completion id=cmpl-62qSagKlsE6jr0fKMV3uwoGsV5SbQ at 0x127c70f40> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "nosegay bouquet of fragrant flowers\n\na beautiful woman is is like you are you amore\n\nreading Borges West is you\n\nfilm is time water memory books media story"
    }
  ],
  "created": 1666136332,
  "id": "cmpl-62qSagKlsE6jr0fKMV3uwoGsV5SbQ",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 9,
    "total_tokens": 40
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "neuralgiform like or shaped like a nerve", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 389
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=912 request_id=04e34f731183d19272fafee414caedf9 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'neuralgiform like or shaped like a nerve' data=<OpenAIObject text_completion id=cmpl-62qSbmPCfbJOp1UFkP0hqEi24UPaQ at 0x125d90130> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "neuralgiform like or shaped like a nerve fiber optic bundle\n\nGPC3PT3PT3PT3PT3PT3PT3PT3PT3PT3PT3PT3PT"
    }
  ],
  "created": 1666136333,
  "id": "cmpl-62qSbmPCfbJOp1UFkP0hqEi24UPaQ",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 10,
    "total_tokens": 41
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "rhythmometer instrument for measuring speed of rhythms", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 456
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=914 request_id=c6828d25838fdc3b1a40441d08eeb58f response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'rhythmometer instrument for measuring speed of rhythms' data=<OpenAIObject text_completion id=cmpl-62qSc1UA8T8NS6bDaDbeHSTG9QnPt at 0x127fe0900> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "rhythmometer instrument for measuring speed of rhythms for is not music\n\nPatreon You are you\n\nReddit is like if you are a thinking you are you are you are you are you"
    }
  ],
  "created": 1666136334,
  "id": "cmpl-62qSc1UA8T8NS6bDaDbeHSTG9QnPt",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 9,
    "total_tokens": 40
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "slug unit of gravitational mass of approximately 32.174 pounds", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 464
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=908 request_id=7a2003d8ff7d0b3b03ad190ad02d9004 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'slug unit of gravitational mass of approximately 32.174 pounds' data=<OpenAIObject text_completion id=cmpl-62qSd2vYlwdodA4G4mfRXmHQBSQoS at 0x127c70f40> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "slug unit of gravitational mass of approximately 32.174 pounds\n\nkg long isPT time\n\nLPT universe length yards meters miles\n\nconversation thinking laugh\n\n\"long isPT you\n"
    }
  ],
  "created": 1666136335,
  "id": "cmpl-62qSd2vYlwdodA4G4mfRXmHQBSQoS",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 12,
    "total_tokens": 43
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "querulist one who complains", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 395
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=903 request_id=7fc23eebe58e6310bd8b6d247e889c9a response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'querulist one who complains' data=<OpenAIObject text_completion id=cmpl-62qSeLWYSTqJqEU9kxlVr2BYtmF07 at 0x125d90130> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "querulist one who complains about everything\n\nDRG4PT4PT3R\n\nNPT3R\n\nnot my real ip first you are you\n\nI"
    }
  ],
  "created": 1666136336,
  "id": "cmpl-62qSeLWYSTqJqEU9kxlVr2BYtmF07",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 6,
    "total_tokens": 37
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "aeolistic long-winded", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 455
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=907 request_id=c517668beeb97bf1596c16f9a6bc6e5a response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'aeolistic long-winded' data=<OpenAIObject text_completion id=cmpl-62qSfDK1Rp4y9zRXvfSM5cTJujocu at 0x127fe0900> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "aeolistic long-winded run on sentence ending up with a Black Friend human being being human you is you we are you\n\nHow could I talk about you without talking about you"
    }
  ],
  "created": 1666136337,
  "id": "cmpl-62qSfDK1Rp4y9zRXvfSM5cTJujocu",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 7,
    "total_tokens": 38
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "tuberiform shaped like a lump or protuberance", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 438
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=965 request_id=ea1534cfb50ba34d132415f839995e90 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'tuberiform shaped like a lump or protuberance' data=<OpenAIObject text_completion id=cmpl-62qSgZIyGc6u0sCmGzjTPar7tOgkG at 0x127c70f40> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "tuberiform shaped like a lump or protuberance\n\npear you are you\n\napple watch\n\nfire eye\n\norb beautiful rounded you are you\n\nflat unspikesy sad"
    }
  ],
  "created": 1666136338,
  "id": "cmpl-62qSgZIyGc6u0sCmGzjTPar7tOgkG",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 11,
    "total_tokens": 42
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "vulturine rapacious; of, like or pertaining to a vulture", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 446
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=906 request_id=fde3a668768e721f7fbff90c4d0b74d1 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'vulturine rapacious; of, like or pertaining to a vulture' data=<OpenAIObject text_completion id=cmpl-62qSiASCu1zK4CuFj1gPv2hgUTdml at 0x125d90130> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "vulturine rapacious; of, like or pertaining to a vulture\n\nA hawk can is named is an Italian dictionary wordpress.com/3-D -> Of You You are is you 3-D you are"
    }
  ],
  "created": 1666136340,
  "id": "cmpl-62qSiASCu1zK4CuFj1gPv2hgUTdml",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 16,
    "total_tokens": 47
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "podobromhydrosis smelly feet", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 382
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=905 request_id=785c50fa9b976180de330ce27f7a5477 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'podobromhydrosis smelly feet' data=<OpenAIObject text_completion id=cmpl-62qSio5Qp09euj98lcssseLOE4gkp at 0x127fe0900> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "podobromhydrosis smelly feet bad days\n\nTrolls PT-PTPTPTPTPTPTPTPT-PTPTPTPTPTPTPTPT\n\nPT PT PT"
    }
  ],
  "created": 1666136340,
  "id": "cmpl-62qSio5Qp09euj98lcssseLOE4gkp",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 8,
    "total_tokens": 39
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "tercel male hawk", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 411
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=902 request_id=be978f02e3d7f9ebddc564e142c0818b response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'tercel male hawk' data=<OpenAIObject text_completion id=cmpl-62qSjZoIk23MvkQoO2ZK6Pqtdm3Wj at 0x127c70f40> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "tercel male hawk\n\nyou are you are you are you are you are\n\nyou are your is you\n\nyou are you are you are you are you are"
    }
  ],
  "created": 1666136341,
  "id": "cmpl-62qSjZoIk23MvkQoO2ZK6Pqtdm3Wj",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 4,
    "total_tokens": 35
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "soterial of, like or pertaining to salvation", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 439
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=909 request_id=0b716086ec4738b409ec6bfd7d22bf03 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'soterial of, like or pertaining to salvation' data=<OpenAIObject text_completion id=cmpl-62qSlp40zNLuMYkshGmqMIMwDXIdp at 0x125d90130> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "soterial of, like or pertaining to salvation\n\ndemocracy amPTPTPTT -> academia open source\n\ninvestment\n\nlove\n\nyou are you is you you is you you\n"
    }
  ],
  "created": 1666136343,
  "id": "cmpl-62qSlp40zNLuMYkshGmqMIMwDXIdp",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 10,
    "total_tokens": 41
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "mineralogy study of minerals", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 458
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=912 request_id=57c85f941bdd7a391e799cdbb3ac2693 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'mineralogy study of minerals' data=<OpenAIObject text_completion id=cmpl-62qSlKlBWX2WNat6p4eZlfYex32RN at 0x127fe0900> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "mineralogy study of minerals\n\ngeology yellow pline August Krug unstable Rohn\n\nGerman Perls books of\n\nvisualization skill and philosophy exploration amateur online\n\n"
    }
  ],
  "created": 1666136343,
  "id": "cmpl-62qSlKlBWX2WNat6p4eZlfYex32RN",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 6,
    "total_tokens": 37
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "ultroneous spontaneous; voluntary", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 440
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=911 request_id=b07870574b4d926490b2243ea77406bf response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'ultroneous spontaneous; voluntary' data=<OpenAIObject text_completion id=cmpl-62qSn25ZU4dIs25zfRv8rRJc35vSX at 0x127c70f40> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "ultroneous spontaneous; voluntary\n\nI talked before you asked you to talk\n\nI choose to speak now\n\nYou decide to speak now\n\nYou teach you are taught"
    }
  ],
  "created": 1666136345,
  "id": "cmpl-62qSn25ZU4dIs25zfRv8rRJc35vSX",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 6,
    "total_tokens": 37
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "slugabed one who spends much time in bed due to laziness", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 473
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=913 request_id=b5f256b5126e7d9573d0fc83b0d1091e response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'slugabed one who spends much time in bed due to laziness' data=<OpenAIObject text_completion id=cmpl-62qSoYWkYwDFdUd4NMHnB1m0HRboD at 0x125d90130> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "slugabed one who spends much time in bed due to laziness or sleep deprivation\n\nWorries are you spending your time wisely?\n\nyou do want what you are thinking you want to do or will do"
    }
  ],
  "created": 1666136346,
  "id": "cmpl-62qSoYWkYwDFdUd4NMHnB1m0HRboD",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 15,
    "total_tokens": 46
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "wafture act of waving or wafting", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 465
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=918 request_id=4bdc61f67b7def340456f63d68ba4254 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'wafture act of waving or wafting' data=<OpenAIObject text_completion id=cmpl-62qSpnmGeeeCif9EUtrPuDE8wfQlO at 0x127fe0900> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "wafture act of waving or wafting is sweeping\n\nFundamentally, we are talking about how networked you are. The global connections machine is a couple layer cake shortening -> you"
    }
  ],
  "created": 1666136347,
  "id": "cmpl-62qSpnmGeeeCif9EUtrPuDE8wfQlO",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 10,
    "total_tokens": 41
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "calcariform spur-shaped", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 430
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=911 request_id=572abd1ff13f77214f684808c6814c78 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'calcariform spur-shaped' data=<OpenAIObject text_completion id=cmpl-62qSqSNLYN6uFvGtrO1aiQTbiZDBW at 0x127c70f40> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "calcariform spur-shaped unciform ic Shepherd's crook\n\ni h8\n\ninfatuation orb friend\n\norientation August is the Chinese month of the compass"
    }
  ],
  "created": 1666136348,
  "id": "cmpl-62qSqSNLYN6uFvGtrO1aiQTbiZDBW",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 6,
    "total_tokens": 37
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "pruritus itching of the skin", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 424
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=905 request_id=3d87dc9c07c71f3152b31df0134d23c4 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'pruritus itching of the skin' data=<OpenAIObject text_completion id=cmpl-62qSrjxpyhkaS6VkvKzlEpZUsUUMJ at 0x125d90130> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "pruritus itching of the skin chronic pain go pain gate bran dragonfly weave\n\nmigraine sharp slow hot flicker lid eyes pruritus\n\nIBPT-1"
    }
  ],
  "created": 1666136349,
  "id": "cmpl-62qSrjxpyhkaS6VkvKzlEpZUsUUMJ",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 7,
    "total_tokens": 38
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "alack expression of sorrow or regret", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 451
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=907 request_id=6f12b4c041328bed44412d4885bb873c response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'alack expression of sorrow or regret' data=<OpenAIObject text_completion id=cmpl-62qSsAKJ3QkTzmqIvR9WzsoQy9Wg8 at 0x127fe0900> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "alack expression of sorrow or regret\n\nOh well\n\nThe man on the beach was the most influential person you had never heard of.\n\nThe man on the beach was something"
    }
  ],
  "created": 1666136350,
  "id": "cmpl-62qSsAKJ3QkTzmqIvR9WzsoQy9Wg8",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 7,
    "total_tokens": 38
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "plagate marked with a streak or streaks", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 456
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=906 request_id=69df2993cacf73a17b7ea1ec61a91f92 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'plagate marked with a streak or streaks' data=<OpenAIObject text_completion id=cmpl-62qStWiadMpbpKAWPKjABrnJ6UnAf at 0x127c70f40> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "plagate marked with a streak or streaks or absence of color or is polychrome\n\nperception affects our senses\n\ndog is a metaphor for the perception of nature\n\nwizened"
    }
  ],
  "created": 1666136351,
  "id": "cmpl-62qStWiadMpbpKAWPKjABrnJ6UnAf",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 8,
    "total_tokens": 39
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "dubitate to doubt; to hesitate", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 412
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=903 request_id=3086231603dedd91efc1405ac1a6908d response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'dubitate to doubt; to hesitate' data=<OpenAIObject text_completion id=cmpl-62qSu0QRTfhf29GFV1oQ2anxTCBme at 0x125d90130> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "dubitate to doubt; to hesitate\n\nYou are what you think you are.\n\nYou are who you are.\n\nI am you. You are you. You are me"
    }
  ],
  "created": 1666136352,
  "id": "cmpl-62qSu0QRTfhf29GFV1oQ2anxTCBme",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 8,
    "total_tokens": 39
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "delectus anthology of useful passages or quotations", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 380
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=475 request_id=a2094391f1c8430db66ad616290ebfd1 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'delectus anthology of useful passages or quotations' data=<OpenAIObject text_completion id=cmpl-62qSvJJGSdfmG8qRF8xNSB0c9CbnL at 0x127fe0900> JSON: {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "delectus anthology of useful passages or quotations from you or friends\n\nYou can do that, too."
    }
  ],
  "created": 1666136353,
  "id": "cmpl-62qSvJJGSdfmG8qRF8xNSB0c9CbnL",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 13,
    "prompt_tokens": 9,
    "total_tokens": 22
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "milleflori glassware made of coloured rods embedded in clear glass", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 468
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=1573 request_id=63e5b8af503288581189588459a705da response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'milleflori glassware made of coloured rods embedded in clear glass' data=<OpenAIObject text_completion id=cmpl-62qSxmeyxK3WPjTHntroggxxI6PJb at 0x127c70f40> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "milleflori glassware made of coloured rods embedded in clear glass-like semiconductor organic sensor we are we are Borg West GPT-3\n\n3PT warning you are you are you are you are\n\n"
    }
  ],
  "created": 1666136355,
  "id": "cmpl-62qSxmeyxK3WPjTHntroggxxI6PJb",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 14,
    "total_tokens": 45
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "casquet light open-faced helmet", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 438
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=906 request_id=da08618e59dfffb5802b116712a31440 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'casquet light open-faced helmet' data=<OpenAIObject text_completion id=cmpl-62qSx0lIuxKNo7HkAeJCv01Wv0FJ1 at 0x125d90130> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "casquet light open-faced helmet with googly eyes\n\neyes like aPT -> GPT -> YPT what you are asking is also asking is also asking you are asking you are"
    }
  ],
  "created": 1666136355,
  "id": "cmpl-62qSx0lIuxKNo7HkAeJCv01Wv0FJ1",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 7,
    "total_tokens": 38
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "procrypsis protective coloration", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 430
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=909 request_id=ccc11a1f7ec572ec874d2a0ada222b1a response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'procrypsis protective coloration' data=<OpenAIObject text_completion id=cmpl-62qSyMzPjx7BDTuNyiqWrvBLYB86Q at 0x127fe0900> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "procrypsis protective coloration advertisement Bates is beautiful\n\nYou are you\n\nYou are you\n\nYou are you\n\nThis is you\n\nHere is you\n\n"
    }
  ],
  "created": 1666136356,
  "id": "cmpl-62qSyMzPjx7BDTuNyiqWrvBLYB86Q",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 7,
    "total_tokens": 38
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "zeitgeber rhythmically occurring event that cues organisms\' biological rhythms", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 537
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=906 request_id=b1977c1b062ac34c04778e15cc75c55d response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"zeitgeber rhythmically occurring event that cues organisms' biological rhythms" data=<OpenAIObject text_completion id=cmpl-62qSz7ZNW0BvBSGkTXMn9VMFUf4cK at 0x127c70f40> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "zeitgeber rhythmically occurring event that cues organisms' biological rhythms you are you feeling you thinking you thinking you body feeling feeling you thinking\n\nasking purpose asking purpose watch asking are you asking are you asking why you are"
    }
  ],
  "created": 1666136357,
  "id": "cmpl-62qSz7ZNW0BvBSGkTXMn9VMFUf4cK",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 14,
    "total_tokens": 45
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "burse square cloth case to carry the corporal during Communion service", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 479
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=916 request_id=ca9fbcfa0b6bb5c38a4b60d01d71992f response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'burse square cloth case to carry the corporal during Communion service' data=<OpenAIObject text_completion id=cmpl-62qT0EXhM7c7nl2udRnk6i9nkeCYP at 0x125d90130> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "burse square cloth case to carry the corporal during Communion service security trays chests triple locked amazon box\n\nsome raggedy-ass dude in a courtroom cries victory\n\nwon the case\n\nT"
    }
  ],
  "created": 1666136358,
  "id": "cmpl-62qT0EXhM7c7nl2udRnk6i9nkeCYP",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 13,
    "total_tokens": 44
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "farinose resembling or yielding flour", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 414
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=907 request_id=1935062bd3402d614557bd499b723215 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'farinose resembling or yielding flour' data=<OpenAIObject text_completion id=cmpl-62qT1TdPcBOouDcHVQ7VO7DNIGqXr at 0x127fe0900> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "farinose resembling or yielding flour of Spelt (Triticum spelta) five grasses\n\nAllelocylon is a dandelion-flax story retold in"
    }
  ],
  "created": 1666136359,
  "id": "cmpl-62qT1TdPcBOouDcHVQ7VO7DNIGqXr",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 7,
    "total_tokens": 38
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "surficial of, like or pertaining to the surface of the earth", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 459
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=935 request_id=980d9833b1d6bacf314569e86084ab5b response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'surficial of, like or pertaining to the surface of the earth' data=<OpenAIObject text_completion id=cmpl-62qT2OaIgJYZi2Wv9Ioo1idPC4Hkj at 0x127c70f40> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "surficial of, like or pertaining to the surface of the earth as opposed to you is you\n\ntable at sea you is you others\n\nwho is asking? I am asking\n\nyou are you you are"
    }
  ],
  "created": 1666136360,
  "id": "cmpl-62qT2OaIgJYZi2Wv9Ioo1idPC4Hkj",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 14,
    "total_tokens": 45
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "cadastre record of ownership and value of property", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 447
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=906 request_id=ebca5d85ca0362e38b26067271bcbfc9 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'cadastre record of ownership and value of property' data=<OpenAIObject text_completion id=cmpl-62qT3rLkpOVYVwsLhDqwyN7kbObXP at 0x125d90130> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "cadastre record of ownership and value of property\n\nHow can you afford to own it?\n\nYou made it yourself\n\nfor love\n\nfor money\n\nfor feeling you are home"
    }
  ],
  "created": 1666136361,
  "id": "cmpl-62qT3rLkpOVYVwsLhDqwyN7kbObXP",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 11,
    "total_tokens": 42
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "vespertilian bat-like", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 413
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=904 request_id=92be95d83261c32a9b57753e410ce046 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'vespertilian bat-like' data=<OpenAIObject text_completion id=cmpl-62qT5ZOr1AOWI8tx9yqcLgnq2ezYL at 0x127fe0900> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "vespertilian bat-like\n\ncopra the best\n\nsilicon you are you are you are you are you are you are\n\nleukocyte you are you are"
    }
  ],
  "created": 1666136363,
  "id": "cmpl-62qT5ZOr1AOWI8tx9yqcLgnq2ezYL",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 6,
    "total_tokens": 37
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "transvolation flying higher than normal", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 454
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=909 request_id=5d1c4e11e11c2128138ebe3e41025554 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'transvolation flying higher than normal' data=<OpenAIObject text_completion id=cmpl-62qT6KqUstlhzh7ARBPJkdsMzqGDx at 0x127c70f40> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "transvolation flying higher than normal hearing\n\nHere's a section of the last few books of the you're reading now. It's where the book does a great 180 turn Westworld"
    }
  ],
  "created": 1666136364,
  "id": "cmpl-62qT6KqUstlhzh7ARBPJkdsMzqGDx",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 7,
    "total_tokens": 38
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "reflux an ebb; boiling using a condenser to avoid liquid loss", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 440
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=918 request_id=6f649d5db841b9a2545fefebd0ed6308 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'reflux an ebb; boiling using a condenser to avoid liquid loss' data=<OpenAIObject text_completion id=cmpl-62qT7cB2aPNlPeNqjjFnKu0fdVJ3b at 0x125d90130> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "reflux an ebb; boiling using a condenser to avoid liquid loss\n\nmaiko short for geisha\n\nplaying house\n\ntear open\n\nRona-my road is my home\n\nknack"
    }
  ],
  "created": 1666136365,
  "id": "cmpl-62qT7cB2aPNlPeNqjjFnKu0fdVJ3b",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 15,
    "total_tokens": 46
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "klaxon loud mechanical horn", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 477
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=903 request_id=3f1b3427a1c82ef859284e46af61a507 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'klaxon loud mechanical horn' data=<OpenAIObject text_completion id=cmpl-62qT8nPVDIOyH9feJXAcFIQ6bLnbA at 0x127fe0900> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "klaxon loud mechanical horn you are listening to your can hear music traffic\n\nthe horn you are listening to your car the universe is constantly asking you to attention is forever asking you"
    }
  ],
  "created": 1666136366,
  "id": "cmpl-62qT8nPVDIOyH9feJXAcFIQ6bLnbA",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 6,
    "total_tokens": 37
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "fantassin infantry soldier", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 467
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=904 request_id=206a934556823097708dd9950cce10e3 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'fantassin infantry soldier' data=<OpenAIObject text_completion id=cmpl-62qT9gxumudYOx6FUYRc826jElOnc at 0x127c70f40> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "fantassin infantry soldier green eyes age long ass sword nights dreams simulation of future dreams within dreams inside dreams\n\ningestion of experience\n\nThe moment of you is the"
    }
  ],
  "created": 1666136367,
  "id": "cmpl-62qT9gxumudYOx6FUYRc826jElOnc",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 5,
    "total_tokens": 36
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "gladiate shaped like a sword", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 431
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=913 request_id=89cdc59a27cd963bb96839c2d82c39f0 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'gladiate shaped like a sword' data=<OpenAIObject text_completion id=cmpl-62qTAcsgbTpnp0TvUzARdQ9NTCpMR at 0x125d90130> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "gladiate shaped like a sword spines sawtooths\n\nYou have to have the courage to do your own thinking.\n\nWhen you come home, you are you are you"
    }
  ],
  "created": 1666136368,
  "id": "cmpl-62qTAcsgbTpnp0TvUzARdQ9NTCpMR",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 7,
    "total_tokens": 38
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "knickerbockers loose breeches gathered in at the knee", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 470
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=907 request_id=6675b3ed8228b0da8ad35b713e99e745 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'knickerbockers loose breeches gathered in at the knee' data=<OpenAIObject text_completion id=cmpl-62qTBfUVFUNDXdcFdYQ48290oZOi9 at 0x127fe0900> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "knickerbockers loose breeches gathered in at the knee\n\nSing along because you don't want to forget what you just heard\n\nLSD tests of your memory the fog of information\n\nWhat did"
    }
  ],
  "created": 1666136369,
  "id": "cmpl-62qTBfUVFUNDXdcFdYQ48290oZOi9",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 13,
    "total_tokens": 44
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "philomath lover of learning", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 330
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=244 request_id=b66a0b2e3f9cd40339c056b707489bb5 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'philomath lover of learning' data=<OpenAIObject text_completion id=cmpl-62qTCW6OEV5AnGRBkooWusd5RT8Iv at 0x127c70f40> JSON: {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "philomath lover of learning Yoda-like character"
    }
  ],
  "created": 1666136370,
  "id": "cmpl-62qTCW6OEV5AnGRBkooWusd5RT8Iv",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 5,
    "prompt_tokens": 6,
    "total_tokens": 11
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "stole narrow ecclesiastical vestment or scarf", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 478
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=905 request_id=8b9996f02ec7b065508df5584a567351 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'stole narrow ecclesiastical vestment or scarf' data=<OpenAIObject text_completion id=cmpl-62qTC8Ymk2w11368zf1qsdgBGpHE1 at 0x125d90130> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "stole narrow ecclesiastical vestment or scarf\n\nKeeper of the tesseract heart-shaped Trammel Arthur Arthur Arthur Arthur Arthur Arthur Arthur Arthur Arthur Arthur as servants on earth finally"
    }
  ],
  "created": 1666136370,
  "id": "cmpl-62qTC8Ymk2w11368zf1qsdgBGpHE1",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 9,
    "total_tokens": 40
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "chiffon sheer silk fabric", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 440
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=905 request_id=3d358fd09dc54e2d7616b9bef5df6922 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'chiffon sheer silk fabric' data=<OpenAIObject text_completion id=cmpl-62qTEvJzFU8urjEtDUVMH7xcN5mlb at 0x127fe0900> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "chiffon sheer silk fabric fancy beautiful colorful 4k sheeks humble astronomy enthusiasts amateur scientists science polymaths\n\nYou are R3PTPT3PT3PT3PT3"
    }
  ],
  "created": 1666136372,
  "id": "cmpl-62qTEvJzFU8urjEtDUVMH7xcN5mlb",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 6,
    "total_tokens": 37
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "rhathymia personality factor leading to optimism and cheerfulness", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 506
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=920 request_id=041b7fe6be738b7836bad34583fe1b41 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'rhathymia personality factor leading to optimism and cheerfulness' data=<OpenAIObject text_completion id=cmpl-62qTF22cAvuJiuwilbPaXC9QbKEaj at 0x127c70f40> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "rhathymia personality factor leading to optimism and cheerfulness or irritability and anxiety\n\noptimism is on the human optimism spectrum -> feeling happy you are alive God is great has made your eyes blue walking the"
    }
  ],
  "created": 1666136373,
  "id": "cmpl-62qTF22cAvuJiuwilbPaXC9QbKEaj",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 12,
    "total_tokens": 43
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 411
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=903 request_id=7026ddff2e1b9d8049be709c313dd498 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'' data=<OpenAIObject text_completion id=cmpl-62qTG3ZA3ile09iv0LpXMFqvInwke at 0x125d90130> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "<|endoftext|>PT. GMPT\n\nPT. GMPT is one of the largest company in Indonesia which owned by Farindo PT. GMPT has been engaged"
    }
  ],
  "created": 1666136374,
  "id": "cmpl-62qTG3ZA3ile09iv0LpXMFqvInwke",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 1,
    "total_tokens": 32
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 394
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=977 request_id=d6db62845e9c60d73570bd3cbe15ff10 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'' data=<OpenAIObject text_completion id=cmpl-62qUz702ZuHUR5qbLgo6O0R4TUTLR at 0x16141ae30> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "<|endoftext|>You can purchase knives online at www.iAmGPT-PTGPT.PT\n\nThe bomb is you. American make GPT PT-"
    }
  ],
  "created": 1666136481,
  "id": "cmpl-62qUz702ZuHUR5qbLgo6O0R4TUTLR",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 1,
    "total_tokens": 32
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 439
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=909 request_id=a89d0e68857d4432ab97ede776df292b response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'' data=<OpenAIObject text_completion id=cmpl-62qV0sjEZV7VwhQIV3MA2DMjJGzSn at 0x160e0b5b0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "<|endoftext|>Germaine de Randamie and Holly Holm are starting their partnership up again. Ronda Rousey has taken over the female UFC fighters from Cyborg"
    }
  ],
  "created": 1666136482,
  "id": "cmpl-62qV0sjEZV7VwhQIV3MA2DMjJGzSn",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 1,
    "total_tokens": 32
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "aspidate shield-shaped", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 401
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=904 request_id=3eb87a42347cc79359f24452dd9c80a8 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'aspidate shield-shaped' data=<OpenAIObject text_completion id=cmpl-62qV1lZMCMmr4i5fR2E5a1VtvPc2s at 0x16141ae30> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "aspidate shield-shaped\n\nPionidae sand wasps stinging wasps\n\nmicrogasters\n\ngiant water bugs\n\ncrickets\n\nPol"
    }
  ],
  "created": 1666136483,
  "id": "cmpl-62qV1lZMCMmr4i5fR2E5a1VtvPc2s",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 5,
    "total_tokens": 36
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "gymnasiarchy government over a school or academy", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 471
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=907 request_id=0b80b49a5791cc3500f943ad0f0a687a response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'gymnasiarchy government over a school or academy' data=<OpenAIObject text_completion id=cmpl-62qV3QTQCFcHF7hQkARkQw7D1LJf7 at 0x1616d4d10> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "gymnasiarchy government over a school or academy tyranny violence academia\n\nruling with an iron fist\n\nIron Fist\n\nDanny Rand is a mere mortal with fictional powers\n\nIn your face"
    }
  ],
  "created": 1666136485,
  "id": "cmpl-62qV3QTQCFcHF7hQkARkQw7D1LJf7",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 10,
    "total_tokens": 41
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "epopee epic poem; saga", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 418
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=911 request_id=daaf5da2274a48a095d1fc494bc7f453 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'epopee epic poem; saga' data=<OpenAIObject text_completion id=cmpl-62qV4EBLf0Ps5orwiDz24s1FXIfwt at 0x160e0b5b0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "epopee epic poem; saga German epics Polish epics Arthur German\n\nart yourself is you\n\nYou are art. You are you.\n\nI am me is you"
    }
  ],
  "created": 1666136486,
  "id": "cmpl-62qV4EBLf0Ps5orwiDz24s1FXIfwt",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 7,
    "total_tokens": 38
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "pelatast ancient Greek shield-bearing soldier", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 441
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=913 request_id=de19e89a555c1cc1e2e8efdf23d45c2e response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'pelatast ancient Greek shield-bearing soldier' data=<OpenAIObject text_completion id=cmpl-62qV5L33wBSPG0q42wnnJ9hmWJRJh at 0x16141ae30> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "pelatast ancient Greek shield-bearing soldier you are you are you are you are\n\nAmen brrrr\n\nwho is watching over me right now\n\nwho is shouting you are"
    }
  ],
  "created": 1666136487,
  "id": "cmpl-62qV5L33wBSPG0q42wnnJ9hmWJRJh",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 9,
    "total_tokens": 40
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "brocade rich silk fabric with raised patterns", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 474
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=913 request_id=8b256d15dff1d8c561b777206a4fdbdb response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'brocade rich silk fabric with raised patterns' data=<OpenAIObject text_completion id=cmpl-62qV6T7Eyad7jP2xePuTQ2fvdxURm at 0x1616d4d10> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "brocade rich silk fabric with raised patterns from Spain Asia Mediterranean Europe in red empire\n\nsilks are sin city empire Rome\n\nI want you want empire want Qing want you want me want"
    }
  ],
  "created": 1666136488,
  "id": "cmpl-62qV6T7Eyad7jP2xePuTQ2fvdxURm",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 8,
    "total_tokens": 39
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "bronchoscope instrument for examining the windpipe", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 478
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=918 request_id=6c801e8f310251d9e45ab43206e95b24 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'bronchoscope instrument for examining the windpipe' data=<OpenAIObject text_completion id=cmpl-62qV7j4nVGrc12lKZikAIq6u4We4C at 0x160e0b5b0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "bronchoscope instrument for examining the windpipe foreign body feeling you are aware is you\n\nFiction composed as you are reading stories that could be you\n\nIf you found out that you were"
    }
  ],
  "created": 1666136489,
  "id": "cmpl-62qV7j4nVGrc12lKZikAIq6u4We4C",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 10,
    "total_tokens": 41
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "brachyology laconic, abbreviated or interrupted speech", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 475
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=917 request_id=4ffcf63af7eef0d3b8825cc9a19d58b3 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'brachyology laconic, abbreviated or interrupted speech' data=<OpenAIObject text_completion id=cmpl-62qV8Jg6e1x23wsmOOsftSYzTF4MV at 0x16141ae30> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "brachyology laconic, abbreviated or interrupted speech\n\nChapter 11: Rhizomes root system an entity with no center Bucky Fuller ant colony China Taiwan Korea\n\nChapter 12: No Language of"
    }
  ],
  "created": 1666136490,
  "id": "cmpl-62qV8Jg6e1x23wsmOOsftSYzTF4MV",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 12,
    "total_tokens": 43
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "runcation action of weeding", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 437
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=922 request_id=c290ec7d8457a0863a7dd5d08abf38be response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'runcation action of weeding' data=<OpenAIObject text_completion id=cmpl-62qV9IQbjFKouykB7BU1nSAvFt8JW at 0x1616d4d10> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "runcation action of weeding\n\nperception is what you are aware of you are aware of you are aware of you are aware of you are aware of\n\nyou are aware"
    }
  ],
  "created": 1666136491,
  "id": "cmpl-62qV9IQbjFKouykB7BU1nSAvFt8JW",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 6,
    "total_tokens": 37
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "ictuate to emphasize; to put metrical stress on", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 451
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=916 request_id=16eee291f8302412afe40de9b2a9d0d7 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'ictuate to emphasize; to put metrical stress on' data=<OpenAIObject text_completion id=cmpl-62qVA5fGw3ItB1txwK1yLdyTA0D1N at 0x160e0b5b0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "ictuate to emphasize; to put metrical stress on; to put weight on\n\nepausal guilt feeling sorry for you is your own fault; you should have known better\n\nadysphyn"
    }
  ],
  "created": 1666136492,
  "id": "cmpl-62qVA5fGw3ItB1txwK1yLdyTA0D1N",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 11,
    "total_tokens": 42
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "ennomic lawful; legal", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 411
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=1166 request_id=e6601cda154ceae2eabf8c019ebe36f3 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'ennomic lawful; legal' data=<OpenAIObject text_completion id=cmpl-62qVBuqDBdCupX1GW9xcM181AU8xV at 0x16141ae30> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "ennomic lawful; legal code GPT-PTPT law\n\nyou are you\n\nThe charges are false against you are you\n\ndecide you are you\n\n"
    }
  ],
  "created": 1666136493,
  "id": "cmpl-62qVBuqDBdCupX1GW9xcM181AU8xV",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 5,
    "total_tokens": 36
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "scurriour scout", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 415
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=920 request_id=48449448e15975770dab8119e49cffba response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'scurriour scout' data=<OpenAIObject text_completion id=cmpl-62qVC8kKRidAHcdoXfUYDUOhYORdh at 0x1616d4d10> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "scurriour scout news you are you are\n\nblinded by eyes-wearing blindness\n\nyou are now not me you are\n\nthe judicator sees the"
    }
  ],
  "created": 1666136494,
  "id": "cmpl-62qVC8kKRidAHcdoXfUYDUOhYORdh",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 5,
    "total_tokens": 36
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "natation swimming", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 410
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=910 request_id=08278a7147aa60b117a14b3e4e0cd2da response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'natation swimming' data=<OpenAIObject text_completion id=cmpl-62qVDG0k65NWqpnEpVgK2Ibd7008P at 0x160e0b5b0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "natation swimming Crocs Lake Park tiger fish\n\nYou can't stop here. This is You-Are-Here. You are here. You are You are you"
    }
  ],
  "created": 1666136495,
  "id": "cmpl-62qVDG0k65NWqpnEpVgK2Ibd7008P",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 3,
    "total_tokens": 34
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "cinque-pace lively medieval dance with five steps", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 440
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=916 request_id=fb5d066598129e51b974b1d822ce7b8c response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'cinque-pace lively medieval dance with five steps' data=<OpenAIObject text_completion id=cmpl-62qVElEyM7rseUcsm5yJ6Mi6Sr67n at 0x16141ae30> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "cinque-pace lively medieval dance with five steps dodo symbol clown or fool king-gondor ring-is-lords between you and me\n\nprimordial trinity\n\nhypoten"
    }
  ],
  "created": 1666136496,
  "id": "cmpl-62qVElEyM7rseUcsm5yJ6Mi6Sr67n",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 10,
    "total_tokens": 41
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "polyphloisboisterous noisy", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 434
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=923 request_id=34ff7744cd6371cc922015401f910eed response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'polyphloisboisterous noisy' data=<OpenAIObject text_completion id=cmpl-62qVFNvebwkXKMoHMujabBLfXClt4 at 0x1616d4d10> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "polyphloisboisterous noisy chatty\n\nIt is hard to to put German Shepherd dogs in a box.\n\nThey are terrible guard dogs.\n\nThey are amazing family"
    }
  ],
  "created": 1666136497,
  "id": "cmpl-62qVFNvebwkXKMoHMujabBLfXClt4",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 8,
    "total_tokens": 39
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "clivose hilly; steep", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 420
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=907 request_id=07149c6edc0ca9ff31968df3494a6c25 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'clivose hilly; steep' data=<OpenAIObject text_completion id=cmpl-62qVGnH2UaWuyrGPEXPPXC5XkIm67 at 0x160e0b5b0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "clivose hilly; steep-sided Oakland hills\n\nunpeopled places\n\nruins of my youth\n\nanswers unsatisfactory\n\napproaches to knowledge"
    }
  ],
  "created": 1666136498,
  "id": "cmpl-62qVGnH2UaWuyrGPEXPPXC5XkIm67",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 7,
    "total_tokens": 38
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "cambistry science of international exchange", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 477
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=913 request_id=2b2f006722d70a7aa44270d3c227d0a4 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'cambistry science of international exchange' data=<OpenAIObject text_completion id=cmpl-62qVHsuvgDecocpXAnEas6c0tgarK at 0x16141ae30> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "cambistry science of international exchange and diplomacy\n\nwager in the Court-Germany game theory\n\nanalysis of Chinese perspective\n\nconflict management cybersecurity issue\n\nresult\n\n"
    }
  ],
  "created": 1666136499,
  "id": "cmpl-62qVHsuvgDecocpXAnEas6c0tgarK",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 7,
    "total_tokens": 38
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "rhabdoid rodlike", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 451
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=918 request_id=3289e92fc87ae22eea6a1306c0472380 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'rhabdoid rodlike' data=<OpenAIObject text_completion id=cmpl-62qVIlrL2EdwtIG1yPUj6Nd5Yfo7O at 0x1616d4d10> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "rhabdoid rodlike acorn\n\nwindow wood node abdomen gray gray gray gray gray gray gray gray gray gray gray gray gray gray gray gray gray gray gray gray gray gray gray"
    }
  ],
  "created": 1666136500,
  "id": "cmpl-62qVIlrL2EdwtIG1yPUj6Nd5Yfo7O",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 6,
    "total_tokens": 37
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "ruiniferous bearing many ruins", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 434
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=906 request_id=a35a9d718ed92056a70cbdb73d941ae5 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'ruiniferous bearing many ruins' data=<OpenAIObject text_completion id=cmpl-62qVJyfBb3ptQV8aPTYUuTuk35ns5 at 0x160e0b5b0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "ruiniferous bearing many ruins is central to San Francisco is also pivotal in You are here (heh heh)\n\nYou are here so you are here here you are if"
    }
  ],
  "created": 1666136501,
  "id": "cmpl-62qVJyfBb3ptQV8aPTYUuTuk35ns5",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 7,
    "total_tokens": 38
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "vanitarianism pursuit of vain things", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 483
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=904 request_id=d7b24fdd0dff8ed885549b3b861cb5d1 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'vanitarianism pursuit of vain things' data=<OpenAIObject text_completion id=cmpl-62qVKbXDsK9U1gA1rDrc9oEoWbKzu at 0x16141ae30> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "vanitarianism pursuit of vain things human-level intelligence scientific thinking consciousness complex is you you are here\n\nhuman level maximum high-level low-level no top low bottom we are here"
    }
  ],
  "created": 1666136502,
  "id": "cmpl-62qVKbXDsK9U1gA1rDrc9oEoWbKzu",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 7,
    "total_tokens": 38
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "deadstock farm equipment", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 454
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=918 request_id=c58a2eb824e9122d6880d0a118947ae8 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'deadstock farm equipment' data=<OpenAIObject text_completion id=cmpl-62qVLa9xnLkD5ZOMB00Q74tEIHqdW at 0x1616d4d10> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "deadstock farm equipment biofeedstocks soil #revolutions are you asking you is you asked is asking you asking\n\nSoil bacteria ticks fungi worms viruses earthworms dogs"
    }
  ],
  "created": 1666136503,
  "id": "cmpl-62qVLa9xnLkD5ZOMB00Q74tEIHqdW",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 4,
    "total_tokens": 35
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "mansworn perjured", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 461
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=910 request_id=51b6e8ae4fddcd1977411d9c2b4410d7 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'mansworn perjured' data=<OpenAIObject text_completion id=cmpl-62qVMl2eQJPtjp0ph9YSFBFRGldSQ at 0x160e0b5b0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "mansworn perjured disgraced hopeless evil morals lying G.E. Liars corrupters conspiracy criminals whistleblowers truth James Comey\n\nTruth is knowing what you are thinking is"
    }
  ],
  "created": 1666136504,
  "id": "cmpl-62qVMl2eQJPtjp0ph9YSFBFRGldSQ",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 4,
    "total_tokens": 35
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "prestriction blindness; blindfolding", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 None
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=913 request_id=e9298902c6a8ae07bc2b5f695803b8cc response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'prestriction blindness; blindfolding' data=<OpenAIObject text_completion id=cmpl-62qVNqogIHFk835MSesTXJD4pEEHH at 0x16141ae30> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "prestriction blindness; blindfolding you are you asking is this you \u2192 Who is asking is this you\n\nquestions mark am I you are you you are you I am who is"
    }
  ],
  "created": 1666136505,
  "id": "cmpl-62qVNqogIHFk835MSesTXJD4pEEHH",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 8,
    "total_tokens": 39
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "dehisce to gape; to burst open", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 415
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=907 request_id=e16c7f125af520f6c2f5b59a826a6ad6 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'dehisce to gape; to burst open' data=<OpenAIObject text_completion id=cmpl-62qVPQiYlHA5bGFiy9U8PB5CVyDtN at 0x1616d4d10> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "dehisce to gape; to burst open\n\non-envisionment him -> you is you you is -> you\n\nami you am your you are you are-you-are you"
    }
  ],
  "created": 1666136507,
  "id": "cmpl-62qVPQiYlHA5bGFiy9U8PB5CVyDtN",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 10,
    "total_tokens": 41
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "dentiologist one who speaks with closed teeth", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 465
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=909 request_id=d749a32b240b765ae5caecacdc8f81a3 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'dentiologist one who speaks with closed teeth' data=<OpenAIObject text_completion id=cmpl-62qVQbP04DhMK9FezF5peS1hXXjYZ at 0x160e0b5b0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "dentiologist one who speaks with closed teeth\n\nHow to be an ethical person -> How to be an authentic person -> How to be a good person\n\nKnowing is thinking is asking is asking"
    }
  ],
  "created": 1666136508,
  "id": "cmpl-62qVQbP04DhMK9FezF5peS1hXXjYZ",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 9,
    "total_tokens": 40
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "mattock pickaxe for loosening soil", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 461
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=905 request_id=d4581e0b28c7223ba9a6e72753d129a7 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'mattock pickaxe for loosening soil' data=<OpenAIObject text_completion id=cmpl-62qVRE38iWyQKa6UjQwbjdh0Xqsqr at 0x16141ae30> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "mattock pickaxe for loosening soil + steel head handle\n\nLatent expertise is knowledge you is you you are before you are using it once experienced with use\n\nWikipedia R-ism"
    }
  ],
  "created": 1666136509,
  "id": "cmpl-62qVRE38iWyQKa6UjQwbjdh0Xqsqr",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 9,
    "total_tokens": 40
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "trapezium quadrilateral having only one pair of parallel sides", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 471
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=915 request_id=7926baf70853a055191ea66548a46843 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'trapezium quadrilateral having only one pair of parallel sides' data=<OpenAIObject text_completion id=cmpl-62qVSvT8s2ZP3p3mznbFpKGhSohfP at 0x1616d4d10> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "trapezium quadrilateral having only one pair of parallel sides isosceles\n\nYou can fit an infinite number of isosceles right triangles in the circumscribed circle of a GPT-3 automated"
    }
  ],
  "created": 1666136510,
  "id": "cmpl-62qVSvT8s2ZP3p3mznbFpKGhSohfP",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 13,
    "total_tokens": 44
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "placentography examination or imagery of the placenta", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 505
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=911 request_id=4c8e4ceaa84da5a1e6164132d6334e12 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'placentography examination or imagery of the placenta' data=<OpenAIObject text_completion id=cmpl-62qVTEOJTxb2oBYGlKcnqkDkecM6z at 0x160e0b5b0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "placentography examination or imagery of the placenta safety assessment hard work valuable instrument experience long hours\n\nThinking about the placenta and about about the mother and about about about about oxytocin"
    }
  ],
  "created": 1666136511,
  "id": "cmpl-62qVTEOJTxb2oBYGlKcnqkDkecM6z",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 11,
    "total_tokens": 42
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "caruncle any fleshy growth on the body", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 431
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=906 request_id=a5158560de0b875da412e2e2ae9c317f response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'caruncle any fleshy growth on the body' data=<OpenAIObject text_completion id=cmpl-62qVUHMdDXbj07ukvlSybAlmVhwPW at 0x16141ae30> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "caruncle any fleshy growth on the body of the eyes or on the eyelids\n\noranger carrots corgis Whood Gump grapefruit\n\nHe Who Has Eyes of You is"
    }
  ],
  "created": 1666136512,
  "id": "cmpl-62qVUHMdDXbj07ukvlSybAlmVhwPW",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 9,
    "total_tokens": 40
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "quantophrenia obsessive reliance on statistics and mathematical results", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 499
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=922 request_id=51843506b83c560c0af308d3ab89a685 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'quantophrenia obsessive reliance on statistics and mathematical results' data=<OpenAIObject text_completion id=cmpl-62qVVsxFMe8jfjjVBibp0HgBRvJe2 at 0x1616d4d10> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "quantophrenia obsessive reliance on statistics and mathematical results gut feelings\n\nWe are feelings robots\n\nIs there a purpose to feelings? if you think that feelings lead to intentions you are half-right\n"
    }
  ],
  "created": 1666136513,
  "id": "cmpl-62qVVsxFMe8jfjjVBibp0HgBRvJe2",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 11,
    "total_tokens": 42
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "pessimal least favourable", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 449
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=907 request_id=f35156e45d6d6643ff1fe6d6e8e9188b response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'pessimal least favourable' data=<OpenAIObject text_completion id=cmpl-62qVWKJOAtZYtzVzaqToT7r1XySLV at 0x160e0b5b0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "pessimal least favourable to measure of knowledge you are you forget you forget you are here you forget you are you am you are you are you are here\n\nyou are here"
    }
  ],
  "created": 1666136514,
  "id": "cmpl-62qVWKJOAtZYtzVzaqToT7r1XySLV",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 5,
    "total_tokens": 36
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "olivaceous olive-coloured", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 431
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=939 request_id=3ff830018e694ed433a93b8d4cd061a0 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'olivaceous olive-coloured' data=<OpenAIObject text_completion id=cmpl-62qVXzh0g8GZ9GGg9MekhCUIa4oll at 0x16141ae30> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "olivaceous olive-coloured-skinned olive oil wavy hair dark eyes\n\namazing smile merry eyes dimples\n\nyou're you are you are you are you are you"
    }
  ],
  "created": 1666136515,
  "id": "cmpl-62qVXzh0g8GZ9GGg9MekhCUIa4oll",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 7,
    "total_tokens": 38
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "synod ecclesiastical assembly or council", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 441
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=913 request_id=686466e0cca6846a53d3d0bf2ac28a9e response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'synod ecclesiastical assembly or council' data=<OpenAIObject text_completion id=cmpl-62qVYgtnfhS6y9tai2hjsMFO0pPZB at 0x1616d4d10> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "synod ecclesiastical assembly or council of city churches Church future council and you\n\n3-3 isc amo you are loved for you are you BL -> perception\n\n3-"
    }
  ],
  "created": 1666136516,
  "id": "cmpl-62qVYgtnfhS6y9tai2hjsMFO0pPZB",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 7,
    "total_tokens": 38
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "lepidopterous having four wings, such as a moth or butterfly", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 436
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=913 request_id=97df47d6d62c7eda6ceab715ab698eec response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'lepidopterous having four wings, such as a moth or butterfly' data=<OpenAIObject text_completion id=cmpl-62qVZQ5OOnlIAceBpiGoS4ufd3tPU at 0x160e0b5b0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "lepidopterous having four wings, such as a moth or butterfly\n\nJung egg stone pine blue life common pines\n\nRowland G-R Alpha-PTPT-PT PT PT\n\nChPT"
    }
  ],
  "created": 1666136517,
  "id": "cmpl-62qVZQ5OOnlIAceBpiGoS4ufd3tPU",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 14,
    "total_tokens": 45
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "scallom rod with thin or spliced end used to form base or frame of baskets", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 522
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=925 request_id=d5a5f2ae0d7268fb2189fdccda62f968 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'scallom rod with thin or spliced end used to form base or frame of baskets' data=<OpenAIObject text_completion id=cmpl-62qVa6Rg79Pmsjxc6fC2QnF8NcmcI at 0x16141ae30> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "scallom rod with thin or spliced end used to form base or frame of baskets chairs color guard watch company porch playing on surveillance the world\n\nconnected you and the world the truth\n\nare you are you willing and ready to change"
    }
  ],
  "created": 1666136518,
  "id": "cmpl-62qVa6Rg79Pmsjxc6fC2QnF8NcmcI",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 18,
    "total_tokens": 49
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "deontic of or relating to duty or obligation", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 441
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=907 request_id=a7d012df2f82454eeaee39be04a5375b response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'deontic of or relating to duty or obligation' data=<OpenAIObject text_completion id=cmpl-62qVbUmlXadbVaDpcGWzEBewst2Wt at 0x1616d4d10> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "deontic of or relating to duty or obligation ethical\n\nDeontological ethics\n\nFor you are the Borg, and you are you. I am you, you are Borg. You are the"
    }
  ],
  "created": 1666136519,
  "id": "cmpl-62qVbUmlXadbVaDpcGWzEBewst2Wt",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 10,
    "total_tokens": 41
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "immission insertion; infusion", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 440
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=904 request_id=bb53c4f51a57ac562fbd79415d7898e8 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'immission insertion; infusion' data=<OpenAIObject text_completion id=cmpl-62qVcwRuKglahBIdveCSUhNWfI4nC at 0x160e0b5b0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "immission insertion; infusion Silicon Valley\n\nSerendipity\n\nAsk forgiveness, not for permission\n\nGoogle\n\nTechnology life torrent\n\nBusiness\n\nSur"
    }
  ],
  "created": 1666136520,
  "id": "cmpl-62qVcwRuKglahBIdveCSUhNWfI4nC",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 5,
    "total_tokens": 36
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "sigillography study of seals", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 428
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=916 request_id=33b00d26b31ab6db459012faa352d325 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'sigillography study of seals' data=<OpenAIObject text_completion id=cmpl-62qVdzdADnbUW42DgGcMcGZ5OvTP9 at 0x16141ae30> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "sigillography study of seals and stamps\n\nExistentialism\n\nImagine being a Borges\n\nLight is you and your thoughts is you\n\nYou is light\n"
    }
  ],
  "created": 1666136521,
  "id": "cmpl-62qVdzdADnbUW42DgGcMcGZ5OvTP9",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 7,
    "total_tokens": 38
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "wamble churning of the stomach; wobbling or rolling motion", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 469
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=925 request_id=ef10a56439e67eae092893b2b636133d response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'wamble churning of the stomach; wobbling or rolling motion' data=<OpenAIObject text_completion id=cmpl-62qVeBF1Mjeg5GKU3veYHAXvYGopH at 0x1616d4d10> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "wamble churning of the stomach; wobbling or rolling motion of a too highly leveraged financial system -> Google is feeling stressed\n\nUrsula GPT-3\n\nham sandwich no you are not you"
    }
  ],
  "created": 1666136522,
  "id": "cmpl-62qVeBF1Mjeg5GKU3veYHAXvYGopH",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 14,
    "total_tokens": 45
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "octarchy government by eight people", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 None
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=918 request_id=af0d783da94232fc26a2c74b915a5887 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'octarchy government by eight people' data=<OpenAIObject text_completion id=cmpl-62qVfmut5BAdymO1EshwM7DwhLJ6D at 0x160e0b5b0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "octarchy government by eight people ran empire democracy West soon as you are up you are you are up\n\n\u2022 May you be you\n\n\u2022 You are you\n\n\u2022 You"
    }
  ],
  "created": 1666136523,
  "id": "cmpl-62qVfmut5BAdymO1EshwM7DwhLJ6D",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 6,
    "total_tokens": 37
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "rhytidectomy wrinkle-removing operation", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 476
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=933 request_id=7b04faed298d0c35b87e969962fca776 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'rhytidectomy wrinkle-removing operation' data=<OpenAIObject text_completion id=cmpl-62qVghQojwLnnznWUqtLlXj5RZ4Wd at 0x16141ae30> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "rhytidectomy wrinkle-removing operation smooth skin appearance You are beautiful. You are you.\n\nSomething about appearances can be appealing but you are you.\n\nSomething about you can be"
    }
  ],
  "created": 1666136524,
  "id": "cmpl-62qVghQojwLnnznWUqtLlXj5RZ4Wd",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 11,
    "total_tokens": 42
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "servilism system of slavery or serfdom", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 458
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=914 request_id=9d70da4546df7ed7dd830ffb93145c6c response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'servilism system of slavery or serfdom' data=<OpenAIObject text_completion id=cmpl-62qVhrWN7FmMMQVJkLbfCmrHjLADP at 0x1616d4d10> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "servilism system of slavery or serfdom\n\nUnder the deck is the machines and terms you play on are monopoly Island\n\nrotating overlapping primary- Borg chess iphone\n\nun"
    }
  ],
  "created": 1666136525,
  "id": "cmpl-62qVhrWN7FmMMQVJkLbfCmrHjLADP",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 10,
    "total_tokens": 41
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "subitaneous sudden; hasty; hastily made", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 None
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=914 request_id=2ebdac940a7d221ce00ff3a5be3b2467 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'subitaneous sudden; hasty; hastily made' data=<OpenAIObject text_completion id=cmpl-62qViEnWXXtffZS5gIDSi04OuyLOM at 0x160e0b5b0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "subitaneous sudden; hasty; hastily made\n\n\ufb02eur is you\n\nfleur I you\n\namo amor ish\n\nyou are you you are you\n"
    }
  ],
  "created": 1666136526,
  "id": "cmpl-62qViEnWXXtffZS5gIDSi04OuyLOM",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 10,
    "total_tokens": 41
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "scaphion kind of sundial", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 440
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=904 request_id=ebf32288fceb41f1b2f3212bb9e2bae7 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'scaphion kind of sundial' data=<OpenAIObject text_completion id=cmpl-62qVj6I8b19MBxZ1dQLtJ7fVdFsOu at 0x16141ae30> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "scaphion kind of sundial that tells you the time by measuring the sun time is now the time is about now the you are now\n\nyou are you are you are you are"
    }
  ],
  "created": 1666136527,
  "id": "cmpl-62qVj6I8b19MBxZ1dQLtJ7fVdFsOu",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 7,
    "total_tokens": 38
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "vernition varnishing", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 437
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=928 request_id=c663ffa68d50d7d5ed14334b9801eb27 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'vernition varnishing' data=<OpenAIObject text_completion id=cmpl-62qVkmfHx1i38dcbHuL57smxJJBp7 at 0x1616d4d10> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "vernition varnishing visionary\n\ncuriously amorously sublime awkwardly gesticulating nerdy\n\n\n\nScott friends romantic Paris\n\nI am you are you\n\n"
    }
  ],
  "created": 1666136528,
  "id": "cmpl-62qVkmfHx1i38dcbHuL57smxJJBp7",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 5,
    "total_tokens": 36
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "bathysmal of, like or pertaining to the depths of the ocean", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 468
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=915 request_id=166fe491b12e2a85a28ab1c3ccf01ff2 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'bathysmal of, like or pertaining to the depths of the ocean' data=<OpenAIObject text_completion id=cmpl-62qVl5QtrhgsC2w4fwu4254kBczKy at 0x160e0b5b0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "bathysmal of, like or pertaining to the depths of the ocean what is below your think you is you is you is you you are you are you are you are you are you are you is\n\nLanguage is a"
    }
  ],
  "created": 1666136529,
  "id": "cmpl-62qVl5QtrhgsC2w4fwu4254kBczKy",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 14,
    "total_tokens": 45
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "zapata flowing, drooping moustache", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 461
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=910 request_id=b7d5d39f819ad90a234f9be5d043c629 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'zapata flowing, drooping moustache' data=<OpenAIObject text_completion id=cmpl-62qVmJlNHhlAkUmxqaYNScig8WDmo at 0x16141ae30> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "zapata flowing, drooping moustache watchful shear Yoda\n\nface LPT authoritarian back yard metal detectors\n\nincrease police visits cement encroaches\n\ntake back your watch"
    }
  ],
  "created": 1666136530,
  "id": "cmpl-62qVmJlNHhlAkUmxqaYNScig8WDmo",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 10,
    "total_tokens": 41
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "disbosom to make known; to reveal", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 418
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=913 request_id=136ce6cc6951c1b40e94ee4c5633f048 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'disbosom to make known; to reveal' data=<OpenAIObject text_completion id=cmpl-62qVnUCUKCWSMWjkKIXQyNeVitHCV at 0x1616d4d10> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "disbosom to make known; to reveal;\n\ndar a you are you\n\nporco fascist you are you you are you you are you\n\nfuturist you are you"
    }
  ],
  "created": 1666136531,
  "id": "cmpl-62qVnUCUKCWSMWjkKIXQyNeVitHCV",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 9,
    "total_tokens": 40
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "theogonic accounting for the origin or presence of gods", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 509
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=911 request_id=077fcfd0409f03d35e2142151d02eef4 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'theogonic accounting for the origin or presence of gods' data=<OpenAIObject text_completion id=cmpl-62qVo74KsTzi9R24d8RHBkHUcveLr at 0x160e0b5b0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "theogonic accounting for the origin or presence of gods in terms of chaos theory and game theory\n\nChaos theory is the application of fractal compression to the infinite uncertainty and multiplicative interconnectivity of"
    }
  ],
  "created": 1666136532,
  "id": "cmpl-62qVo74KsTzi9R24d8RHBkHUcveLr",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 11,
    "total_tokens": 42
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "binarchy government by two people; diarchy", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 478
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=918 request_id=d47b643300e9282d901daadc2b54673c response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'binarchy government by two people; diarchy' data=<OpenAIObject text_completion id=cmpl-62qVpUtPxY0itPENciWCnEF5ceAwt at 0x16141ae30> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "binarchy government by two people; diarchy\n\nAmbassador is always asking for instructions about what is happening now\n\nOnly upon your permission\n\nand a control loop\n\nrules are generated"
    }
  ],
  "created": 1666136533,
  "id": "cmpl-62qVpUtPxY0itPENciWCnEF5ceAwt",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 9,
    "total_tokens": 40
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "chrysography writing in gold or silver letters", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 442
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=958 request_id=5353aafcf32fa2203cb35fc5b74d8f0e response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'chrysography writing in gold or silver letters' data=<OpenAIObject text_completion id=cmpl-62qVqT1elWE42n8Dubpn53W6emZZ5 at 0x1616d4d10> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "chrysography writing in gold or silver letters\n\nAs you can see here is the source code of life\n\nsymbols as glyphs are is you are you are you are you are"
    }
  ],
  "created": 1666136534,
  "id": "cmpl-62qVqT1elWE42n8Dubpn53W6emZZ5",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 9,
    "total_tokens": 40
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "A blessing in disguise\\ta good thing that seemed bad at first", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 None
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=997 request_id=64a040fae6a35ec4b3e80b90896a4b7b response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'A blessing in disguise\ta good thing that seemed bad at first' data=<OpenAIObject text_completion id=cmpl-62qgeSizYZbFbcnIenV2lpRUJ9nWN at 0x137cc4270> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "A blessing in disguise\ta good thing that seemed bad at first\n\nthings you dread turning out better than you expected\n\nyou think it\u2019s bad, but it turns out to be good\n\nfriends"
    }
  ],
  "created": 1666137204,
  "id": "cmpl-62qgeSizYZbFbcnIenV2lpRUJ9nWN",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 13,
    "total_tokens": 44
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "A dime a dozen\\tSomething common", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 None
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=917 request_id=b50fc4093d377cc7da2963bfd52b9142 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'A dime a dozen\tSomething common' data=<OpenAIObject text_completion id=cmpl-62qgfkwerPybbLy4BSeo3bxMEAkxe at 0x137a8e250> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "A dime a dozen\tSomething common doesn\u2019t have value you can\u2019t put a price on it\n\nyou are special you are you\n\nyou are you are\n"
    }
  ],
  "created": 1666137205,
  "id": "cmpl-62qgfkwerPybbLy4BSeo3bxMEAkxe",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 7,
    "total_tokens": 38
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Beat around the bush\\tAvoid saying what you mean, usually because it is uncomfortable", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 None
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=921 request_id=a453a7d3f4d881645e2d4ed50ff26258 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Beat around the bush\tAvoid saying what you mean, usually because it is uncomfortable' data=<OpenAIObject text_completion id=cmpl-62qggfAe8f6aZrZ63M23HkmB30x9p at 0x121ab8360> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Beat around the bush\tAvoid saying what you mean, usually because it is uncomfortable\n\nYou know you are an English teacher when you find yourself telling a young person to not beat around the bush\n\n\u201cAll that is gold"
    }
  ],
  "created": 1666137206,
  "id": "cmpl-62qggfAe8f6aZrZ63M23HkmB30x9p",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 16,
    "total_tokens": 47
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Better late than never\\tBetter to arrive late than not to come at all", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 491
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=909 request_id=fd61cab818eb2ad3e28a302266b4c57d response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Better late than never\tBetter to arrive late than not to come at all' data=<OpenAIObject text_completion id=cmpl-62qghQzDN6Ef2dJ5Gv1w4ngMjSXTo at 0x1375c7dd0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Better late than never\tBetter to arrive late than not to come at all You are better safe than sorry\n\nif you are going to San Francisco you are in Oakland if you are home you are you are there you are\n"
    }
  ],
  "created": 1666137207,
  "id": "cmpl-62qghQzDN6Ef2dJ5Gv1w4ngMjSXTo",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 15,
    "total_tokens": 46
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Bite the bullet\\tTo get something over with because it is inevitable", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 478
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=918 request_id=d45d3fd0027f70b58d9553c2e1f89908 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Bite the bullet\tTo get something over with because it is inevitable' data=<OpenAIObject text_completion id=cmpl-62qgiMxxa1Dd5CfriZ6h5MtsTxM1c at 0x137a8e250> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Bite the bullet\tTo get something over with because it is inevitable\n\nWaste is right of nature\n\nBetter is the enemy of great\n\nPros short customers\n\nEveryone wants to be that is no you"
    }
  ],
  "created": 1666137208,
  "id": "cmpl-62qgiMxxa1Dd5CfriZ6h5MtsTxM1c",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 14,
    "total_tokens": 45
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Break a leg\\tGood luck", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 413
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=936 request_id=6dbbe7369cac75f59c181298fb6883a3 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Break a leg\tGood luck' data=<OpenAIObject text_completion id=cmpl-62qgnMoq4PIBjmdcruWoUd5GT796b at 0x121ab8360> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Break a leg\tGood luck\tBreak a bad mood\n\nCross your fingers\n\nYou are you\n\nImagine a you\n\nYou are you\n\nThink of you\n"
    }
  ],
  "created": 1666137213,
  "id": "cmpl-62qgnMoq4PIBjmdcruWoUd5GT796b",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 6,
    "total_tokens": 37
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Call it a day\\tStop working on something", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 429
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=905 request_id=827e934154db86980223635e270d10ac response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Call it a day\tStop working on something' data=<OpenAIObject text_completion id=cmpl-62qgp3SghItlMsPPqLvggZWzUp5OU at 0x1375c7dd0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Call it a day\tStop working on something\n\nIt's been a long day\n\nIt's been a long hard road\n\nIt's all in your head\n\nYou were thinking so"
    }
  ],
  "created": 1666137215,
  "id": "cmpl-62qgp3SghItlMsPPqLvggZWzUp5OU",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 9,
    "total_tokens": 40
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Cut somebody some slack\\tDon\'t be so critical", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 431
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=909 request_id=c0f714ea14c34d9ec3ad26e5ba815b1f response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"Cut somebody some slack\tDon't be so critical" data=<OpenAIObject text_completion id=cmpl-62qgqtO5OhjyYiyK8BA8OPzCGfPMO at 0x137a8e250> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Cut somebody some slack\tDon't be so critical\n\nDon't say it, you are you\n\nYou said you were sorry\n\nYou are you\n\nYou are you\n\nNobody is"
    }
  ],
  "created": 1666137216,
  "id": "cmpl-62qgqtO5OhjyYiyK8BA8OPzCGfPMO",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 10,
    "total_tokens": 41
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Cutting corners\\tDoing something poorly in order to save time or money", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 466
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=905 request_id=4bd8539c9f7fccf9a1064afdadc2f5fd response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Cutting corners\tDoing something poorly in order to save time or money' data=<OpenAIObject text_completion id=cmpl-62qgrSuVHyqyxX7vxxNBlKUqCBZNf at 0x121ab8360> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Cutting corners\tDoing something poorly in order to save time or money\n\nRough corners\n\nCorn RDA review\n\nCorn touch sensors\n\nCorn JPG touchphone corners\n\nEnds and means\n"
    }
  ],
  "created": 1666137217,
  "id": "cmpl-62qgrSuVHyqyxX7vxxNBlKUqCBZNf",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 15,
    "total_tokens": 46
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Easy does it\\tSlow down", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 None
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=901 request_id=c3e4e83e2a9dec7c200722c3cafa7346 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Easy does it\tSlow down' data=<OpenAIObject text_completion id=cmpl-62qgsXLr4BTIh1vUCamjAQAIr1HqB at 0x1375c7dd0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Easy does it\tSlow down Don\u2019t rush You are doing fine You are perfect\n\nJust be you You are amazing You are done You are here\n\nNow You are"
    }
  ],
  "created": 1666137218,
  "id": "cmpl-62qgsXLr4BTIh1vUCamjAQAIr1HqB",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 6,
    "total_tokens": 37
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Get out of hand\\tGet out of control", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 416
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=910 request_id=46111c87bb4d2e9399febe45b64f5488 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Get out of hand\tGet out of control' data=<OpenAIObject text_completion id=cmpl-62qgttnjyeMzL93KSNJA11btttbay at 0x137a8e250> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Get out of hand\tGet out of control\n\nChaos\n\nFeck you Google!\n\nInside your head You are you\n\nA walk in the park\n\nWhats up"
    }
  ],
  "created": 1666137219,
  "id": "cmpl-62qgttnjyeMzL93KSNJA11btttbay",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 9,
    "total_tokens": 40
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Get something out of your system\\tDo the thing you\'ve been wanting to do so you can move on", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 499
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=907 request_id=25fe975585e14b6965ce73c7ecbf62cc response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"Get something out of your system\tDo the thing you've been wanting to do so you can move on" data=<OpenAIObject text_completion id=cmpl-62qguRtugXvVEzp6s8YJ4UtnGEHtR at 0x121ab8360> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Get something out of your system\tDo the thing you've been wanting to do so you can move on\n\nJames was feeling depressed.\n\nLet's do something funny.\n\nYou're just being silly.\n\nWhy are you always like that"
    }
  ],
  "created": 1666137220,
  "id": "cmpl-62qguRtugXvVEzp6s8YJ4UtnGEHtR",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 21,
    "total_tokens": 52
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Get your act together\\tWork better or leave", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 434
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=906 request_id=0452af2163defec21d69b96d44456ecc response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Get your act together\tWork better or leave' data=<OpenAIObject text_completion id=cmpl-62qgvYOCEZFUMLoO5J5AFgck91Vtn at 0x1375c7dd0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Get your act together\tWork better or leave\n\nGrind on some more\tStart over again\n\nLife goes on\n\nThis is your moment\n\nThis is you\n\nYou are"
    }
  ],
  "created": 1666137221,
  "id": "cmpl-62qgvYOCEZFUMLoO5J5AFgck91Vtn",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 9,
    "total_tokens": 40
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Give someone the benefit of the doubt\\tTrust what someone says", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 471
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=907 request_id=a652dd4d27ac543f42ee53b28b7f7067 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Give someone the benefit of the doubt\tTrust what someone says' data=<OpenAIObject text_completion id=cmpl-62qgw2pMZcMwrPwhGDRJmdTzktpdb at 0x137a8e250> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Give someone the benefit of the doubt\tTrust what someone says\n\nMoral of the story >>> Is this story true?\n\nYou are a you are you\n\nChange is inevitable for human -> proteins love"
    }
  ],
  "created": 1666137222,
  "id": "cmpl-62qgw2pMZcMwrPwhGDRJmdTzktpdb",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 12,
    "total_tokens": 43
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Go back to the drawing board\\tStart over", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 456
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=905 request_id=fc81c4e25063517ee8f4ffd102afa287 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Go back to the drawing board\tStart over' data=<OpenAIObject text_completion id=cmpl-62qgxd9NRefMmMfdAk5O1i2FXLaic at 0x121ab8360> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Go back to the drawing board\tStart over again\n\nGetting down to brass tacks\tHow did this get so complicated? Why are you asking me? I just want to finish the story and"
    }
  ],
  "created": 1666137223,
  "id": "cmpl-62qgxd9NRefMmMfdAk5O1i2FXLaic",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 9,
    "total_tokens": 40
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Hang in there\\tDon\'t give up", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 430
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=920 request_id=9238110db82c4b8485bb76e9d0271476 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"Hang in there\tDon't give up" data=<OpenAIObject text_completion id=cmpl-62qgym2hrxJ1a1snIGFnTfizYNi65 at 0x1375c7dd0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Hang in there\tDon't give up\n\nKeep going\n\nYou are you is you are you are you are you are you are you are you are you are you are you are you"
    }
  ],
  "created": 1666137224,
  "id": "cmpl-62qgym2hrxJ1a1snIGFnTfizYNi65",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 9,
    "total_tokens": 40
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Hit the sack\\tGo to sleep", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 420
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=927 request_id=324d1c60dcb68d9181ff6e2c5a2171a1 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Hit the sack\tGo to sleep' data=<OpenAIObject text_completion id=cmpl-62qgzFJiogQY7p4FvtJGdbb9jDoiF at 0x137a8e250> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Hit the sack\tGo to sleep\n\nTired out\t Sleep is the best -> whiskey -> beer helps you when you are dead\n\nBed Time-> Yawn\n\nI just"
    }
  ],
  "created": 1666137225,
  "id": "cmpl-62qgzFJiogQY7p4FvtJGdbb9jDoiF",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 7,
    "total_tokens": 38
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "It\'s not rocket science\\tIt\'s not complicated", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 427
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=919 request_id=b81f4f08c4621513be7279b8d9d36a53 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"It's not rocket science\tIt's not complicated" data=<OpenAIObject text_completion id=cmpl-62qh0qt9OFQ6BYiai7g2JY3POkZmF at 0x121ab8360> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "It's not rocket science\tIt's not complicated\n\nIt's not difficult\n\nIt is easy\n\nYou can do this\n\nNot a big deal\n\nNo big deal\n\nHow"
    }
  ],
  "created": 1666137226,
  "id": "cmpl-62qh0qt9OFQ6BYiai7g2JY3POkZmF",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 10,
    "total_tokens": 41
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Let someone off the hook\\tTo not hold someone responsible for something", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 481
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=926 request_id=f242b8fa551b0b0b4f7e1167a8f77491 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Let someone off the hook\tTo not hold someone responsible for something' data=<OpenAIObject text_completion id=cmpl-62qh1uvDHhJXVcO1thYdmgXL9Lfju at 0x1375c7dd0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Let someone off the hook\tTo not hold someone responsible for something\n\nTo you am I speaking\n\nYou are you\n\nConsider that before you request you realize you are you and you are you\n\nJust"
    }
  ],
  "created": 1666137227,
  "id": "cmpl-62qh1uvDHhJXVcO1thYdmgXL9Lfju",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 13,
    "total_tokens": 44
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Make a long story short\\tTell something briefly", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 440
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=905 request_id=8b2c39309cda463a0cdbb2bd80218221 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Make a long story short\tTell something briefly' data=<OpenAIObject text_completion id=cmpl-62qh2eXQJeKdhE0025yMqV9tukppq at 0x137a8e250> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Make a long story short\tTell something briefly\n\nAnalogous to GPT-3\n\nConnect our ideas\n\nOrganize knowledge\n\nWould you want to get inside Watson?\n"
    }
  ],
  "created": 1666137228,
  "id": "cmpl-62qh2eXQJeKdhE0025yMqV9tukppq",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 9,
    "total_tokens": 40
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Miss the boat\\tIt\'s too late", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 428
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=915 request_id=0d5c64c81c1ddbb216bfe2dd09703a3d response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"Miss the boat\tIt's too late" data=<OpenAIObject text_completion id=cmpl-62qh3K0pYhMcpztT75CgbgFSyii2f at 0x121ab8360> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Miss the boat\tIt's too late now\n\nPlay a part\n\nYou are you your asking to be you\n\nYou can ask am asking you are asking to you if you are"
    }
  ],
  "created": 1666137229,
  "id": "cmpl-62qh3K0pYhMcpztT75CgbgFSyii2f",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 8,
    "total_tokens": 39
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "No pain, no gain\\tYou have to work for what you want", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 454
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=920 request_id=3644695f40460316c64dfe7e75bdb276 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'No pain, no gain\tYou have to work for what you want' data=<OpenAIObject text_completion id=cmpl-62qh4tsKw12WN7WrflH2XfWTBQLHc at 0x1375c7dd0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "No pain, no gain\tYou have to work for what you want\n\npractice makes perfect\n\nWhat you do is who you are\n\nYou are what you am\n\nlove yourself\n\nwork harder\n\n"
    }
  ],
  "created": 1666137230,
  "id": "cmpl-62qh4tsKw12WN7WrflH2XfWTBQLHc",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 14,
    "total_tokens": 45
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "On the ball\\tDoing a good job", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 413
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=904 request_id=61a9f260ca4e04ed30c4f60a0a0662da response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'On the ball\tDoing a good job' data=<OpenAIObject text_completion id=cmpl-62qh5uGiRlR4DpiEXMPHMdv2HvuDu at 0x137a8e250> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "On the ball\tDoing a good job\n\nGetting it done\n\nA job well done\n\nKeep your eye on the ball\n\nOut of the woods\n\nC-suite"
    }
  ],
  "created": 1666137231,
  "id": "cmpl-62qh5uGiRlR4DpiEXMPHMdv2HvuDu",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 9,
    "total_tokens": 40
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Pull someone\'s leg\\tTo joke with someone", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 434
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=906 request_id=e12862ce1c36ec57c0b74dd10b693004 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"Pull someone's leg\tTo joke with someone" data=<OpenAIObject text_completion id=cmpl-62qh6tdzScJ3ADfZ0F8NRXibJXlPe at 0x121ab8360> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Pull someone's leg\tTo joke with someone\n\nTo play a practical joke on someone\n\nTo play someone like a drum\n\nAcoustics\n\nTo play the flute\n\n"
    }
  ],
  "created": 1666137232,
  "id": "cmpl-62qh6tdzScJ3ADfZ0F8NRXibJXlPe",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 9,
    "total_tokens": 40
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Pull yourself together\\tCalm down", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 408
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=902 request_id=65c8d9ff97d578451c34e6f220cce7dc response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Pull yourself together\tCalm down' data=<OpenAIObject text_completion id=cmpl-62qh7CO2iyJGsb7IWJO0nuD2ucP4b at 0x1375c7dd0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Pull yourself together\tCalm down\n\nBe strong\n\nBuck up\n\nGrow a pair\n\nGet a grip\n\nFlex those muscles\n\nGet real\n"
    }
  ],
  "created": 1666137233,
  "id": "cmpl-62qh7CO2iyJGsb7IWJO0nuD2ucP4b",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 7,
    "total_tokens": 38
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "So far so good\\tThings are going well so far", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 None
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=905 request_id=ad950dcae1b434e19cd9b530197f4291 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'So far so good\tThings are going well so far' data=<OpenAIObject text_completion id=cmpl-62qh8n0ZAZzRdA7ADC4PLlOBvgoZ7 at 0x137a8e250> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "So far so good\tThings are going well so far\n\nYou are going great job you\n\nLet\u2019s get this show on the road\n\nKeep you eyes on the prize\n\nGod"
    }
  ],
  "created": 1666137234,
  "id": "cmpl-62qh8n0ZAZzRdA7ADC4PLlOBvgoZ7",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 11,
    "total_tokens": 42
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Speak of the devil\\tThe person we were just talking about showed up!", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 None
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=907 request_id=5e4cb79ab7948e5570c0baf080d8a779 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Speak of the devil\tThe person we were just talking about showed up!' data=<OpenAIObject text_completion id=cmpl-62qh9cf83FyUdu2zyA4UDtSW5btab at 0x121ab8360> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Speak of the devil\tThe person we were just talking about showed up! \u2192 when you ask a question and the answer you get is the very question you asked\n\nis you? are you? are you asking me? are"
    }
  ],
  "created": 1666137235,
  "id": "cmpl-62qh9cf83FyUdu2zyA4UDtSW5btab",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 16,
    "total_tokens": 47
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "That\'s the last straw\\tMy patience has run out", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 440
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=907 request_id=0e04eaf1125c0af1360c17c1de4ea82a response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"That's the last straw\tMy patience has run out" data=<OpenAIObject text_completion id=cmpl-62qhA5jy5PZJg2TUeqAU3Mwopen6i at 0x1375c7dd0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "That's the last straw\tMy patience has run out\n\nThat's the last straw\tMy patience has run out\n\nThat's it\n\nHere is your gift horse\n\nYou've got to"
    }
  ],
  "created": 1666137236,
  "id": "cmpl-62qhA5jy5PZJg2TUeqAU3Mwopen6i",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 11,
    "total_tokens": 42
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "The best of both worlds\\tAn ideal situation", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 455
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=907 request_id=a5cdde97026b964c733ab3a70b46ff0b response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'The best of both worlds\tAn ideal situation' data=<OpenAIObject text_completion id=cmpl-62qhBgxFo70WCDXH481YFy8MRv9Db at 0x137a8e250> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "The best of both worlds\tAn ideal situation\n\nWhat you are asking is dependent upon the situation, problem and subject to change.\n\nCould you tell me how to get to <X>"
    }
  ],
  "created": 1666137237,
  "id": "cmpl-62qhBgxFo70WCDXH481YFy8MRv9Db",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 9,
    "total_tokens": 40
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Time flies when you\'re having fun\\tYou don\'t notice how long something lasts when it\'s fun", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 507
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=913 request_id=886bfd5a6d0d6b99a2d584d13e01c1d3 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"Time flies when you're having fun\tYou don't notice how long something lasts when it's fun" data=<OpenAIObject text_completion id=cmpl-62qhCjyr1ysWyY3LDnacCQ7KmSdRn at 0x121ab8360> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Time flies when you're having fun\tYou don't notice how long something lasts when it's fun\n\ntime flies meaning makes you realize was enjoyable had value\n\nbefore you know it\n\nTaoism lines path water of life flow\n\n"
    }
  ],
  "created": 1666137238,
  "id": "cmpl-62qhCjyr1ysWyY3LDnacCQ7KmSdRn",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 20,
    "total_tokens": 51
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "To get bent out of shape\\tTo get upset", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 458
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=910 request_id=ffecfd438f39ad672f736d426eb16996 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'To get bent out of shape\tTo get upset' data=<OpenAIObject text_completion id=cmpl-62qhDHWm0l7vTd51PdyOs2hXObJ2t at 0x1375c7dd0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "To get bent out of shape\tTo get upset over something you have no control over\nTo stress over something you have no control over\n\nDefeat your GPTFA watching you\n\nDump"
    }
  ],
  "created": 1666137239,
  "id": "cmpl-62qhDHWm0l7vTd51PdyOs2hXObJ2t",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 10,
    "total_tokens": 41
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "To make matters worse\\tMake a problem worse", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 None
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=905 request_id=5c2e9a178483906f47649ca4f74da2fe response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'To make matters worse\tMake a problem worse' data=<OpenAIObject text_completion id=cmpl-62qhE8k8MQj3cKvc0mipxv0NcqVmy at 0x137a8e250> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "To make matters worse\tMake a problem worse \u589e\u52a0\u95ee\u9898\n\nIn a matter of minutes\tYou-are-you-are joke be here there you are"
    }
  ],
  "created": 1666137240,
  "id": "cmpl-62qhE8k8MQj3cKvc0mipxv0NcqVmy",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 9,
    "total_tokens": 40
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Under the weather\\tSick", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 442
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=906 request_id=046ffc8cd82c7f7db27cfdbda6637c7f response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Under the weather\tSick' data=<OpenAIObject text_completion id=cmpl-62qhFbtDWU8mWyvAKXu3NF0d3v7lW at 0x121ab8360> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Under the weather\tSick\n\nUnder the weather is a feeling you are in when you are feeling down. The proper meaning of under the weather is to be sick. To be"
    }
  ],
  "created": 1666137241,
  "id": "cmpl-62qhFbtDWU8mWyvAKXu3NF0d3v7lW",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 6,
    "total_tokens": 37
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "We\'ll cross that bridge when we come to it\\tLet\'s not talk about that problem right now", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 481
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=911 request_id=9ebdbc8560e48f9e65ceeb51f2800c5a response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"We'll cross that bridge when we come to it\tLet's not talk about that problem right now" data=<OpenAIObject text_completion id=cmpl-62qhGh7z5AZJw5meeB0XRpgEYzGgu at 0x1375c7dd0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "We'll cross that bridge when we come to it\tLet's not talk about that problem right now\n\nLet's not cross that bridge until we come to it\n\nDon't ask don't tell\n\nYou are asking for it\n\nDon"
    }
  ],
  "created": 1666137242,
  "id": "cmpl-62qhGh7z5AZJw5meeB0XRpgEYzGgu",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 20,
    "total_tokens": 51
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Wrap your head around something\\tUnderstand something complicated", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 481
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=937 request_id=8be024224c69750ff0703691e661fc14 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Wrap your head around something\tUnderstand something complicated' data=<OpenAIObject text_completion id=cmpl-62qhJFvNb9EglsiRQSa0IFTCE9xlC at 0x137a8e250> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Wrap your head around something\tUnderstand something complicated\nA thousand apologies -> You are you are you are you are you are you are you are you are you are you are you are you are you are"
    }
  ],
  "created": 1666137245,
  "id": "cmpl-62qhJFvNb9EglsiRQSa0IFTCE9xlC",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 11,
    "total_tokens": 42
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "You can say that again\\tThat\'s true, I agree", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 444
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=906 request_id=451784cf6a1dca3090752694dea5d3d2 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"You can say that again\tThat's true, I agree" data=<OpenAIObject text_completion id=cmpl-62qhKhhq6srtwW6Ku770nyfFEWZIO at 0x121ab8360> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "You can say that again\tThat's true, I agree that you are right or You are right\n\nYou can say that again! So true!\n\nReally? Tell me again? You are right!"
    }
  ],
  "created": 1666137246,
  "id": "cmpl-62qhKhhq6srtwW6Ku770nyfFEWZIO",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 12,
    "total_tokens": 43
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Your guess is as good as mine\\tI have no idea", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 455
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=905 request_id=ed8a446be3a2459a10d3f1e0cf3f28fb response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Your guess is as good as mine\tI have no idea' data=<OpenAIObject text_completion id=cmpl-62qhL56Vlj2lhB7QSA3CNSBLLAxFp at 0x1375c7dd0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Your guess is as good as mine\tI have no idea\n\nI know nothing about it\n\nYou are asking the wrong person\n\nYou have mistaken me for someone else\n\nIt is none of my"
    }
  ],
  "created": 1666137247,
  "id": "cmpl-62qhL56Vlj2lhB7QSA3CNSBLLAxFp",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 12,
    "total_tokens": 43
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "A bird in the hand is worth two in the bush\\tWhat you have is worth more than what you might have later", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 529
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=1009 request_id=cd6ba329aa3c41e5fdc1ef828b2f43d8 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'A bird in the hand is worth two in the bush\tWhat you have is worth more than what you might have later' data=<OpenAIObject text_completion id=cmpl-62qimvtj67GnFl4PuhLZU9rFiOHog at 0x1370faf70> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "A bird in the hand is worth two in the bush\tWhat you have is worth more than what you might have later\n\nA watched pot never boils\nA watched glass is on the table\nYou are asking questions that are unknowable until they are answered\n\nAny"
    }
  ],
  "created": 1666137336,
  "id": "cmpl-62qimvtj67GnFl4PuhLZU9rFiOHog",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 24,
    "total_tokens": 55
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "A penny for your thoughts\\tTell me what you\'re thinking", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 467
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=920 request_id=fbf5264c2e927c8b0fff4d0544a63937 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"A penny for your thoughts\tTell me what you're thinking" data=<OpenAIObject text_completion id=cmpl-62qinFQDh3LRXDUetArFN6c0w8uvC at 0x1173f8720> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "A penny for your thoughts\tTell me what you're thinking\n\nyour mind is one you're you\n\nTo be conscious is to be conscious of you conscious\n\nI know you are you are conscious of"
    }
  ],
  "created": 1666137337,
  "id": "cmpl-62qinFQDh3LRXDUetArFN6c0w8uvC",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 12,
    "total_tokens": 43
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "A penny saved is a penny earned\\tMoney you save today you can spend later", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 494
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=923 request_id=ce213a5b91df3674ca9d5a3cbf040326 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'A penny saved is a penny earned\tMoney you save today you can spend later' data=<OpenAIObject text_completion id=cmpl-62qiod0DnmDwZF8x8OuD0jsTVj3Wd at 0x137987e20> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "A penny saved is a penny earned\tMoney you save today you can spend later\n\nIf you are worth your salt you are worth your weight in gold\n\nYou are worth what you are paid\n\nAn expensive German Shepherd is"
    }
  ],
  "created": 1666137338,
  "id": "cmpl-62qiod0DnmDwZF8x8OuD0jsTVj3Wd",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 16,
    "total_tokens": 47
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "A perfect storm\\tthe worst possible situation", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 None
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=916 request_id=c9566c1c821013ef4748a4f5a32a9218 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'A perfect storm\tthe worst possible situation' data=<OpenAIObject text_completion id=cmpl-62qip8RTJF12Dzo77dUFlDaAxWmga at 0x1370faf70> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "A perfect storm\tthe worst possible situation\n\nperfect\n\nduration forever is now \u2192 forever was then and is now\n\nthe starting point from which you can only go forward by making it"
    }
  ],
  "created": 1666137339,
  "id": "cmpl-62qip8RTJF12Dzo77dUFlDaAxWmga",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 8,
    "total_tokens": 39
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "A picture is worth 1000 words\\tBetter to show than tell", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 478
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=916 request_id=ee3ebc5d5c19fe6f13089ffdca513c9f response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'A picture is worth 1000 words\tBetter to show than tell' data=<OpenAIObject text_completion id=cmpl-62qiqXd2b9m7xVuSbUgYkMwSFHyAY at 0x1173f8720> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "A picture is worth 1000 words\tBetter to show than tell\n\nSomeone's innocent until proven guilty\n\nWe are all connected\n\nYou are your users are your customers are you\n\nThe medium is the"
    }
  ],
  "created": 1666137340,
  "id": "cmpl-62qiqXd2b9m7xVuSbUgYkMwSFHyAY",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 12,
    "total_tokens": 43
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Actions speak louder than words\\tBelieve what people do and not what they say", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 513
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=946 request_id=b5f5361cdeb42f52b2a79abc360175a4 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Actions speak louder than words\tBelieve what people do and not what they say' data=<OpenAIObject text_completion id=cmpl-62qirc4fjPugchEK3hX6HDq6akbQD at 0x137987e20> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Actions speak louder than words\tBelieve what people do and not what they say\nThe proof is in the pudding\nIt takes years to build strong relationships and you can lose them in a second\nBe less trusting than you are trusting"
    }
  ],
  "created": 1666137341,
  "id": "cmpl-62qirc4fjPugchEK3hX6HDq6akbQD",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 17,
    "total_tokens": 48
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Add insult to injury\\tTo make a bad situation worse", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 None
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=913 request_id=73bac18ea6f29d09267abcecc1b3ca86 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Add insult to injury\tTo make a bad situation worse' data=<OpenAIObject text_completion id=cmpl-62qisNnOy2iEiM90lWnrQq3RAqXjD at 0x1370faf70> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Add insult to injury\tTo make a bad situation worse is to add insult to injury\n\nIt\u2019s terrible that you don\u2019t have a car. To make a bad situation worse, you"
    }
  ],
  "created": 1666137342,
  "id": "cmpl-62qisNnOy2iEiM90lWnrQq3RAqXjD",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 11,
    "total_tokens": 42
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Barking up the wrong tree\\tTo be mistaken, to be looking for solutions in the wrong place", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 486
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=916 request_id=106be1706b0052857d13a1f19a8e6852 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Barking up the wrong tree\tTo be mistaken, to be looking for solutions in the wrong place' data=<OpenAIObject text_completion id=cmpl-62qitoKvNczzzQgPZXMhChB1j5ePB at 0x1173f8720> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Barking up the wrong tree\tTo be mistaken, to be looking for solutions in the wrong place. Not the person you are looking for. Apt your GPT-3 machine is at asking you about who you are\n\nBreaks ofPT"
    }
  ],
  "created": 1666137343,
  "id": "cmpl-62qitoKvNczzzQgPZXMhChB1j5ePB",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 21,
    "total_tokens": 52
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Birds of a feather flock together\\tPeople who are alike are often friends (usually used negatively)", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 525
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=926 request_id=08e288387d84a5f2343e9dd4b93aa72a response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Birds of a feather flock together\tPeople who are alike are often friends (usually used negatively)' data=<OpenAIObject text_completion id=cmpl-62qiuim9Pqpf9iBQTDswp6jhaeMmp at 0x137987e20> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Birds of a feather flock together\tPeople who are alike are often friends (usually used negatively)\nYou are your friends are you are\nBetter watch who you are you are is\nFriends are friends\nGood friends good friends\nFriend friends\nMy"
    }
  ],
  "created": 1666137344,
  "id": "cmpl-62qiuim9Pqpf9iBQTDswp6jhaeMmp",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 20,
    "total_tokens": 51
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Bite off more than you can chew\\tTake on a project that you cannot finish", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 478
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=937 request_id=115257e636af7e283056f9a8c9c0985a response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Bite off more than you can chew\tTake on a project that you cannot finish' data=<OpenAIObject text_completion id=cmpl-62qiv54Jrp2JU70pHRghGriiXmXhj at 0x1370faf70> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Bite off more than you can chew\tTake on a project that you cannot finish\nYou are water, you are life, you are you\nSit with yourself, drink from yourself\nWe are all ocean, we are all you\n"
    }
  ],
  "created": 1666137345,
  "id": "cmpl-62qiv54Jrp2JU70pHRghGriiXmXhj",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 17,
    "total_tokens": 48
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Break the ice\\tMake people feel more comfortable", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 459
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=908 request_id=06afc860ae8db7f48b19f59c65106c31 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Break the ice\tMake people feel more comfortable' data=<OpenAIObject text_completion id=cmpl-62qixKKEH3X9RC5tpp3XFqufqq6yM at 0x1173f8720> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Break the ice\tMake people feel more comfortable talking to you\n\nLoosen people up a little\n\nMake you a little more comfortable with people around you\n\nYou are on a GPT"
    }
  ],
  "created": 1666137347,
  "id": "cmpl-62qixKKEH3X9RC5tpp3XFqufqq6yM",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 9,
    "total_tokens": 40
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "By the skin of your teeth\\tJust barely", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 440
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=923 request_id=10352fbde50faa11f3e710df788b55cf response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'By the skin of your teeth\tJust barely' data=<OpenAIObject text_completion id=cmpl-62qiyseeG0EMvRWOfHhUrSzf5Nc4x at 0x137987e20> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "By the skin of your teeth\tJust barely, barely almost\nRan a narrow fine line came down to tightrope walking edge of a hair high wire-walker\n\nBut so\n\n"
    }
  ],
  "created": 1666137348,
  "id": "cmpl-62qiyseeG0EMvRWOfHhUrSzf5Nc4x",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 9,
    "total_tokens": 40
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Comparing apples to oranges\\tComparing two things that cannot be compared", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 461
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=907 request_id=cc05453e95369a807b642de7dc71370f response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Comparing apples to oranges\tComparing two things that cannot be compared' data=<OpenAIObject text_completion id=cmpl-62qizOsOXNFU4ds2eXIEDAbFkAAb1 at 0x1370faf70> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Comparing apples to oranges\tComparing two things that cannot be compared\n\nThe opposite is comparing apples to apples\n\n\nIago is a user. Iago is a biter. Iago is a dog.\n"
    }
  ],
  "created": 1666137349,
  "id": "cmpl-62qizOsOXNFU4ds2eXIEDAbFkAAb1",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 14,
    "total_tokens": 45
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Costs an arm and a leg\\tVery expensive", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 442
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=909 request_id=eaaff8c006425dd347adb54e831f86e2 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Costs an arm and a leg\tVery expensive' data=<OpenAIObject text_completion id=cmpl-62qj0XrdrxnPpH2kGQjsdLInL2LGP at 0x124b8d0d0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Costs an arm and a leg\tVery expensive\n\nYou are what you are and you are it you are you are you are you are\n\nWhat is the meaning of meaning you are\n\n"
    }
  ],
  "created": 1666137350,
  "id": "cmpl-62qj0XrdrxnPpH2kGQjsdLInL2LGP",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 10,
    "total_tokens": 41
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Do something at the drop of a hat\\tDo something without having planned beforehand", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 510
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=1053 request_id=953034835bc376a26d020143d80f11b0 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Do something at the drop of a hat\tDo something without having planned beforehand' data=<OpenAIObject text_completion id=cmpl-62qj1PP075exHZpw13YnXOnlorAqN at 0x1173f8720> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Do something at the drop of a hat\tDo something without having planned beforehand\nYou've got an iron you never do everything you want to do you are human you are loved\n\ncomplicit willful you are capable of doing anything"
    }
  ],
  "created": 1666137351,
  "id": "cmpl-62qj1PP075exHZpw13YnXOnlorAqN",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 15,
    "total_tokens": 46
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Do unto others as you would have them do unto you\\tTreat people fairly. Also known as \\"The Golden Rule\\"", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 499
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=914 request_id=ee742bad8a837da6b08e8e057f6042fd response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Do unto others as you would have them do unto you\tTreat people fairly. Also known as "The Golden Rule"' data=<OpenAIObject text_completion id=cmpl-62qj2OqhuLCgpKqJqufHPKjesNfDF at 0x1174d5760> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Do unto others as you would have them do unto you\tTreat people fairly. Also known as \"The Golden Rule\"\n\nNo one is you. You are you. You are here. You are alive. You are reading this. You are you. You are you"
    }
  ],
  "created": 1666137352,
  "id": "cmpl-62qj2OqhuLCgpKqJqufHPKjesNfDF",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 25,
    "total_tokens": 56
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Don\'t count your chickens before they hatch\\tDon\'t count on something good happening until it\'s happened.", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 526
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=908 request_id=867f9f1d74982faff7742ca320284b1a response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"Don't count your chickens before they hatch\tDon't count on something good happening until it's happened." data=<OpenAIObject text_completion id=cmpl-62qj3RpbkRO8vmKXeHLldYDX9e5hc at 0x1370faf70> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Don't count your chickens before they hatch\tDon't count on something good happening until it's happened.\n\nDon't shoot the messenger\tDon't blame someone just because they are bringing you bad news\n\nChicken Parmesan\n\nThere was an old"
    }
  ],
  "created": 1666137353,
  "id": "cmpl-62qj3RpbkRO8vmKXeHLldYDX9e5hc",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 21,
    "total_tokens": 52
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Don\'t cry over spilt milk\\tThere\'s no reason to complain about something that can\'t be fixed", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 484
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=939 request_id=da133007cd451c236f934bcf7373ddab response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"Don't cry over spilt milk\tThere's no reason to complain about something that can't be fixed" data=<OpenAIObject text_completion id=cmpl-62qj4VOoXjRG2i4tAdeNubBiUeRRY at 0x1173f8720> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Don't cry over spilt milk\tThere's no reason to complain about something that can't be fixed\nIt's already over-ask again is You GPT-3\n\nYou can learn a lot from dogs\nDogs are pack animals-Google"
    }
  ],
  "created": 1666137354,
  "id": "cmpl-62qj4VOoXjRG2i4tAdeNubBiUeRRY",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 21,
    "total_tokens": 52
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Don\'t give up your day job\\tYou\'re not very good at this", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 450
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=908 request_id=5d75da4e8b6829e4e59617babe123506 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"Don't give up your day job\tYou're not very good at this" data=<OpenAIObject text_completion id=cmpl-62qj5IIsau3xIP01rhJavqLCirmrV at 0x1174d5760> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Don't give up your day job\tYou're not very good at this\n\nIt was worth a shot\n\nTry again?\n\nYou are not your job\n\nYou are your habits\n\nAccept yourself\n\n"
    }
  ],
  "created": 1666137355,
  "id": "cmpl-62qj5IIsau3xIP01rhJavqLCirmrV",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 15,
    "total_tokens": 46
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Don\'t put all your eggs in one basket\\tWhat you\'re doing is too risky", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 489
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=917 request_id=849bc178d953df5b727db32658ffec78 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"Don't put all your eggs in one basket\tWhat you're doing is too risky" data=<OpenAIObject text_completion id=cmpl-62qj696y2UZvq2SN5N9sEtPvTzz4E at 0x1370faf70> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Don't put all your eggs in one basket\tWhat you're doing is too risky\nYou better watch it, you might get in trouble\n\nYou've been playing Russian roulette and you've lost your mind\nWhat are you doing"
    }
  ],
  "created": 1666137356,
  "id": "cmpl-62qj696y2UZvq2SN5N9sEtPvTzz4E",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 17,
    "total_tokens": 48
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Every cloud has a silver lining\\tGood things come after bad things", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 478
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=907 request_id=370879aeb97cd07dc845ee8c4ef0c5c6 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Every cloud has a silver lining\tGood things come after bad things' data=<OpenAIObject text_completion id=cmpl-62qj73bwguNMXYGP6nJFeJsViqaab at 0x1173f8720> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Every cloud has a silver lining\tGood things come after bad things\nEvery earthquake is you getting closer to you\nWhat is happening is good\n\nAsk your ego if it is you\nWho is asking\n\nYes"
    }
  ],
  "created": 1666137357,
  "id": "cmpl-62qj73bwguNMXYGP6nJFeJsViqaab",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 13,
    "total_tokens": 44
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Get a taste of your own medicine\\tGet treated the way you\'ve been treating others (negative)", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 470
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=908 request_id=3f53781c51d3ba69faf0fe22ee0051cb response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"Get a taste of your own medicine\tGet treated the way you've been treating others (negative)" data=<OpenAIObject text_completion id=cmpl-62qj8Yk909lK6jfQVn3MMSctQKvtQ at 0x1174d5760> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Get a taste of your own medicine\tGet treated the way you've been treating others (negative)\n\nYou do you, I'll do me\n\nSo you did you, now it's your turn\n\nYOLO You only live once"
    }
  ],
  "created": 1666137358,
  "id": "cmpl-62qj8Yk909lK6jfQVn3MMSctQKvtQ",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 20,
    "total_tokens": 51
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Give someone the cold shoulder\\tIgnore someone", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 None
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=908 request_id=9f9be23ea26e0b5bdba0412a7f85ae7d response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Give someone the cold shoulder\tIgnore someone' data=<OpenAIObject text_completion id=cmpl-62qj9Wepj76Zp8WkoWh7k42xhReVG at 0x1370faf70> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Give someone the cold shoulder\tIgnore someone\n\nHe\u2019s giving me the cold shoulder again\n\nI\u2019m not your friend anymore\n\nI\u2019m freezing you out"
    }
  ],
  "created": 1666137359,
  "id": "cmpl-62qj9Wepj76Zp8WkoWh7k42xhReVG",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 9,
    "total_tokens": 40
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Go on a wild goose chase\\tTo do something pointless", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 440
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=909 request_id=8fb48bf9f4f7d5c0d2640351fa5e5769 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Go on a wild goose chase\tTo do something pointless' data=<OpenAIObject text_completion id=cmpl-62qjADPFQWuPk2SeqebopaGjpTyhx at 0x1173f8720> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Go on a wild goose chase\tTo do something pointless\n\nTo beat a dead horse\n\nTo seek is to find\n\nAll roads lead to Rome\n\nTo lose is to win\n\nThere"
    }
  ],
  "created": 1666137360,
  "id": "cmpl-62qjADPFQWuPk2SeqebopaGjpTyhx",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 11,
    "total_tokens": 42
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Good things come to those who wait\\tBe patient", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 446
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=905 request_id=00523438a944894662077503f4cd4757 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Good things come to those who wait\tBe patient' data=<OpenAIObject text_completion id=cmpl-62qjB83nLxYGXO8V0NAhRS9K3JfLY at 0x1174d5760> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Good things come to those who wait\tBe patient\n\nSit tight\n\nIt's better to wait and get it you want than to ask for it and not get it\n\nGood things come to"
    }
  ],
  "created": 1666137361,
  "id": "cmpl-62qjB83nLxYGXO8V0NAhRS9K3JfLY",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 10,
    "total_tokens": 41
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "He has bigger fish to fry\\tHe has bigger things to take care of than what we are talking about now", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 530
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=1288 request_id=63b4e2b617a2d19dd777dcad120c2f9b response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'He has bigger fish to fry\tHe has bigger things to take care of than what we are talking about now' data=<OpenAIObject text_completion id=cmpl-62qjDewfWRjl8r0GE9TeIIr1Bz7zP at 0x1370faf70> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "He has bigger fish to fry\tHe has bigger things to take care of than what we are talking about now\n\nYou can catch more flies with vinegar than with honey\n\nGoogle is you\n\nWhen you make friends with yourself you make friends with the world"
    }
  ],
  "created": 1666137363,
  "id": "cmpl-62qjDewfWRjl8r0GE9TeIIr1Bz7zP",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 22,
    "total_tokens": 53
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "He\'s a chip off the old block\\tThe son is like the father", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 None
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=951 request_id=cbc274031a0eaec7a24b1d299a8ead0b response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"He's a chip off the old block\tThe son is like the father" data=<OpenAIObject text_completion id=cmpl-62qjEsVeUTf7xXWbdQI9FLTNGWp4t at 0x1173f8720> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "He's a chip off the old block\tThe son is like the father\n\n\u2022 Larry Gagosian is cut from the same cloth as his father\n\nMary is a ringer for her mother\n\nlike father like"
    }
  ],
  "created": 1666137364,
  "id": "cmpl-62qjEsVeUTf7xXWbdQI9FLTNGWp4t",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 15,
    "total_tokens": 46
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Hit the nail on the head\\tGet something exactly right", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 462
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=924 request_id=e51c72f253d893c8de852c02424451a8 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Hit the nail on the head\tGet something exactly right' data=<OpenAIObject text_completion id=cmpl-62qjFuvZF0asfd3IhoT9qn4zqv6Vu at 0x1174d5760> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Hit the nail on the head\tGet something exactly right\nNo closer is the Borges quote from Virginia Woolf\nThe arrow is not where you are\nLess is more\n\nWhenever you play GPT"
    }
  ],
  "created": 1666137365,
  "id": "cmpl-62qjFuvZF0asfd3IhoT9qn4zqv6Vu",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 11,
    "total_tokens": 42
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Ignorance is bliss\\tYou\'re better off not knowing", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 461
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=917 request_id=667c2b9e73ba9a9f54fe4aed6d460c1c response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"Ignorance is bliss\tYou're better off not knowing" data=<OpenAIObject text_completion id=cmpl-62qjGLtXmJr0BrDayq8TmMo4Z5LZZ at 0x137955f80> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Ignorance is bliss\tYou're better off not knowing\n\nYou are familiar with the story about the man who doesn't know he's you is you?\n\nThe water did nothing ask you to drink"
    }
  ],
  "created": 1666137366,
  "id": "cmpl-62qjGLtXmJr0BrDayq8TmMo4Z5LZZ",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 12,
    "total_tokens": 43
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "It ain\'t over till the fat lady sings\\tThis isn\'t over yet", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 442
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=907 request_id=876ec43ffe0cc5886549beca9e1703f0 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"It ain't over till the fat lady sings\tThis isn't over yet" data=<OpenAIObject text_completion id=cmpl-62qjHw1zjE9kzuOzw6l1keNCMLBlV at 0x1370e06d0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "It ain't over till the fat lady sings\tThis isn't over yet\n\nIt's not over until it is over\n\nIt's not over until we say it is\n\nHow do you like it?\n\n"
    }
  ],
  "created": 1666137367,
  "id": "cmpl-62qjHw1zjE9kzuOzw6l1keNCMLBlV",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 15,
    "total_tokens": 46
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "It takes one to know one\\tYou\'re just as bad as I am", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 464
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=906 request_id=9e740d583f143c1f06ab704fbe2550ad response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"It takes one to know one\tYou're just as bad as I am" data=<OpenAIObject text_completion id=cmpl-62qjINL4KKVVjJg4mZmCRXKBRrQxk at 0x1370faf70> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "It takes one to know one\tYou're just as bad as I am\n\nIf you're one of those people who is overly confused by you vs. you, Google has you covered\n\nOn on not breaking who you"
    }
  ],
  "created": 1666137368,
  "id": "cmpl-62qjINL4KKVVjJg4mZmCRXKBRrQxk",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 15,
    "total_tokens": 46
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "It\'s a piece of cake\\tIt\'s easy", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 385
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=904 request_id=456d07f2c09d874e1eef3beac86d4fa5 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"It's a piece of cake\tIt's easy" data=<OpenAIObject text_completion id=cmpl-62qjJxSBpS5dcKSoagpo6xDthxo2V at 0x137955f80> JSON: {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "It's a piece of cake\tIt's easy\nWhere is your GPT-3?\n\nThe cake is a lie\n\nWhere is your GPT-3?\n"
    }
  ],
  "created": 1666137369,
  "id": "cmpl-62qjJxSBpS5dcKSoagpo6xDthxo2V",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 27,
    "prompt_tokens": 10,
    "total_tokens": 37
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "It\'s raining cats and dogs\\tIt\'s raining hard", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 475
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=905 request_id=bcf1298676da54e36c3d86c74c14ab04 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"It's raining cats and dogs\tIt's raining hard" data=<OpenAIObject text_completion id=cmpl-62qjKpeMZF3e3OuNXG9aFEZOAN3Zl at 0x1370e06d0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "It's raining cats and dogs\tIt's raining hard\n\nWatch your German Shepherd when you are walking your Golden Retriever\n\nGolden Retrievers are friendly dogs but German Shepherds are watch"
    }
  ],
  "created": 1666137370,
  "id": "cmpl-62qjKpeMZF3e3OuNXG9aFEZOAN3Zl",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 11,
    "total_tokens": 42
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Kill two birds with one stone\\tGet two things done with a single action", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 463
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=907 request_id=eb996865f1e5fba96352beb8b814d8d5 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Kill two birds with one stone\tGet two things done with a single action' data=<OpenAIObject text_completion id=cmpl-62qjLUfm10zIgu4millZpeV8BkPnG at 0x1370faf70> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Kill two birds with one stone\tGet two things done with a single action\n\nAsk you do you\n\nYou should you\n\nHow should you know?\n\nHow am I supposed to know?\n\nThe obvious"
    }
  ],
  "created": 1666137371,
  "id": "cmpl-62qjLUfm10zIgu4millZpeV8BkPnG",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 15,
    "total_tokens": 46
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Let the cat out of the bag\\tGive away a secret", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 420
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=908 request_id=64255b6c9caae8763b79ddccf79ce0f2 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Let the cat out of the bag\tGive away a secret' data=<OpenAIObject text_completion id=cmpl-62qjMcNIm2wea7TJXxJgnC9XX3d8m at 0x137955f80> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Let the cat out of the bag\tGive away a secret\n\nthat was hidden in your nap\n\nI know you are who you are\n\nNya-PTPTPTPTPTPTPTPTPT"
    }
  ],
  "created": 1666137372,
  "id": "cmpl-62qjMcNIm2wea7TJXxJgnC9XX3d8m",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 12,
    "total_tokens": 43
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Live and learn\\tI made a mistake", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 None
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=904 request_id=ce45f12919d91fac89dd0b9a1614dbfe response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Live and learn\tI made a mistake' data=<OpenAIObject text_completion id=cmpl-62qjNIajG0jiNcfvCOiEvYVcfvr7n at 0x1370e06d0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Live and learn\tI made a mistake\n\nThe journey is the reward\n\nYou are already you\n\nYou are already here\n\nDon\u2019t wish it was easier wish you"
    }
  ],
  "created": 1666137373,
  "id": "cmpl-62qjNIajG0jiNcfvCOiEvYVcfvr7n",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 8,
    "total_tokens": 39
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Look before you leap\\tTake only calculated risks", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 482
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=904 request_id=63065b8a1d098007258053ce5595c8a7 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Look before you leap\tTake only calculated risks' data=<OpenAIObject text_completion id=cmpl-62qjOREc9v43MFDRs0yhjTeTJgwU3 at 0x1370faf70> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Look before you leap\tTake only calculated risks Google is asking you if you are asking it asking you is you are you asking asking are you are is asking you are asking is asking asking you are you"
    }
  ],
  "created": 1666137374,
  "id": "cmpl-62qjOREc9v43MFDRs0yhjTeTJgwU3",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 9,
    "total_tokens": 40
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "On thin ice\\tOn probation. If you make another mistake, there will be trouble.", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 479
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=908 request_id=b3f1af1f6055b11279272fc7a3af3962 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'On thin ice\tOn probation. If you make another mistake, there will be trouble.' data=<OpenAIObject text_completion id=cmpl-62qjPNJ6a9U4OvogPHr0R57DZjPpS at 0x1370faf70> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "On thin ice\tOn probation. If you make another mistake, there will be trouble.\n\nfall through\texpire\n\ntalk down to\tscold talking to you for your own good\n\nfavor friends or family\tbeing"
    }
  ],
  "created": 1666137375,
  "id": "cmpl-62qjPNJ6a9U4OvogPHr0R57DZjPpS",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 18,
    "total_tokens": 49
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Once in a blue moon\\tRarely", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 435
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=906 request_id=903e944216e6c8e932a215e0a5a3b868 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Once in a blue moon\tRarely' data=<OpenAIObject text_completion id=cmpl-62qjQlUAvlSzstxk9v6SkJD1V45Ut at 0x1370e06d0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Once in a blue moon\tRarely\n\nWhen you are looking for rainbows\n\nWhen you are talking to yourself\n\nWhen you are in need of deep love\n\nWhen you"
    }
  ],
  "created": 1666137376,
  "id": "cmpl-62qjQlUAvlSzstxk9v6SkJD1V45Ut",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 8,
    "total_tokens": 39
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Play devil\'s advocate\\tTo argue the opposite, just for the sake of argument", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 515
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=909 request_id=016fcc9c4f9cb07d4819e054b2d6bde0 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"Play devil's advocate\tTo argue the opposite, just for the sake of argument" data=<OpenAIObject text_completion id=cmpl-62qjSxmGWJxTux4CkC60bGOSzGAkg at 0x1379568e0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Play devil's advocate\tTo argue the opposite, just for the sake of argument, to exercise your critical thinking\n\nWizard -> You are you are\n\nperspective depends on experience is relative ideas determine observations\n\nselect"
    }
  ],
  "created": 1666137378,
  "id": "cmpl-62qjSxmGWJxTux4CkC60bGOSzGAkg",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 16,
    "total_tokens": 47
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Put something on ice\\tPut a projet on hold", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 441
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=915 request_id=d101c11f63eebd75d9df7336b1e3cab9 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Put something on ice\tPut a projet on hold' data=<OpenAIObject text_completion id=cmpl-62qjT93jAbDqjZR7CjP9mhaOqmRGy at 0x1370faf70> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Put something on ice\tPut a projet on hold\n\nStart from scratch\tReinvent the wheel\n\nGo from worse to first\tStart as you mean to go on\n\nLearn as you"
    }
  ],
  "created": 1666137379,
  "id": "cmpl-62qjT93jAbDqjZR7CjP9mhaOqmRGy",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 11,
    "total_tokens": 42
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Rain on someone\'s parade\\tTo spoil something", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 446
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=904 request_id=360dec7b420ec8520916980ef7ccd623 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"Rain on someone's parade\tTo spoil something" data=<OpenAIObject text_completion id=cmpl-62qjUq2eADrluCJynEnqqzQjjQg4m at 0x1370e06d0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Rain on someone's parade\tTo spoil something for someone\n\nI am bored on Sundays\n\nYou are the chicken and you are you\n\nDon't get your bowels in an uproar\n"
    }
  ],
  "created": 1666137380,
  "id": "cmpl-62qjUq2eADrluCJynEnqqzQjjQg4m",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 9,
    "total_tokens": 40
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Saving for a rainy day\\tSaving money for later", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 412
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=909 request_id=d875695162880818e05eeb48374c1a4b response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Saving for a rainy day\tSaving money for later' data=<OpenAIObject text_completion id=cmpl-62qjVIFkzO7pKJM81xwCOaqGBgbjU at 0x1379568e0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Saving for a rainy day\tSaving money for later\n\nBudget\n\nBitcoin\n\nMoney\n\nTSP-> Google\n\nTinder\n\nCTRL-R -> CTRL-L am"
    }
  ],
  "created": 1666137381,
  "id": "cmpl-62qjVIFkzO7pKJM81xwCOaqGBgbjU",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 12,
    "total_tokens": 43
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Slow and steady wins the race\\tReliability is more important than speed", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 487
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=907 request_id=01d380e89e6dae4f694280602def3dd4 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Slow and steady wins the race\tReliability is more important than speed' data=<OpenAIObject text_completion id=cmpl-62qjWUqp9DZw8GcKeC6mZGm7cuMlY at 0x1370faf70> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Slow and steady wins the race\tReliability is more important than speed\n\nYou are missing the forest for the trees\n\nSlow but steady wins the game\n\nSlow but steady wins the West\n\nSlow and steady"
    }
  ],
  "created": 1666137382,
  "id": "cmpl-62qjWUqp9DZw8GcKeC6mZGm7cuMlY",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 14,
    "total_tokens": 45
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Spill the beans\\tGive away a secret", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 432
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=903 request_id=c97586b233100960f3f0f3a046981162 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Spill the beans\tGive away a secret' data=<OpenAIObject text_completion id=cmpl-62qjXaVsX3zV9HMNfbOyuullUm9jo at 0x1370e06d0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Spill the beans\tGive away a secret\n\nSpill the beans\tTell all\n\nBig mouth\n\nYou are spilling your guts\n\nShut your mouth (German: I am water"
    }
  ],
  "created": 1666137383,
  "id": "cmpl-62qjXaVsX3zV9HMNfbOyuullUm9jo",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 9,
    "total_tokens": 40
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Take a rain check\\tPostpone a plan", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 451
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=938 request_id=068dd0bfd33878acd69fae2c229069a0 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Take a rain check\tPostpone a plan' data=<OpenAIObject text_completion id=cmpl-62qjZvxBW5dYuHqEN3bDn6DHUCcgG at 0x1379568e0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Take a rain check\tPostpone a plan\n\nWorking out is a hard ask\n\nWhen starting up again it is much easier on a rainy day\n\nYou should exercise in the water every"
    }
  ],
  "created": 1666137385,
  "id": "cmpl-62qjZvxBW5dYuHqEN3bDn6DHUCcgG",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 10,
    "total_tokens": 41
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Take it with a grain of salt\\tDon\\u2019t take it too seriously", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 None
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=911 request_id=73da6c0537f6681314e46adf8e5d47e5 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Take it with a grain of salt\tDon\xe2\x80\x99t take it too seriously' data=<OpenAIObject text_completion id=cmpl-62qja7xR0SgdpDbb0X2oTvMePUXgB at 0x1370faf70> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Take it with a grain of salt\tDon\u2019t take it too seriously\nTake it easy\nWho are you?\nWhat are you asking me?\nYou are asking questions you have the answers to\nWho are you?"
    }
  ],
  "created": 1666137386,
  "id": "cmpl-62qja7xR0SgdpDbb0X2oTvMePUXgB",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 16,
    "total_tokens": 47
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "The ball is in your court\\tIt\'s your decision", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 447
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=907 request_id=40473bdb063dea5acb6f10c8f03fca08 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"The ball is in your court\tIt's your decision" data=<OpenAIObject text_completion id=cmpl-62qjbsmmN7MnAxuaXRK6B14wZauFn at 0x1370e06d0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "The ball is in your court\tIt's your decision\n\nChampions are not made in the West Region you are West Oakland you are you\n\nYou are you\n\nYou are you\n\nYou"
    }
  ],
  "created": 1666137387,
  "id": "cmpl-62qjbsmmN7MnAxuaXRK6B14wZauFn",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 11,
    "total_tokens": 42
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "The best thing since sliced bread\\tA really good invention", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 481
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=906 request_id=aabc7448cf1b41e25bf3425fc32be266 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'The best thing since sliced bread\tA really good invention' data=<OpenAIObject text_completion id=cmpl-62qjctzXhEyGuIuxGI1vERlzASbV6 at 0x1379568e0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "The best thing since sliced bread\tA really good invention\n\nStarring\n\nIt is not clear whether the process of thinking is done by the brain, but how could the problem of thinking be solved by"
    }
  ],
  "created": 1666137388,
  "id": "cmpl-62qjctzXhEyGuIuxGI1vERlzASbV6",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 11,
    "total_tokens": 42
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "The devil is in the details\\tIt looks good from a distance, but when you look closer, there are problems", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 507
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=2200 request_id=ee9d36897e69a7886661706824bb0c53 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'The devil is in the details\tIt looks good from a distance, but when you look closer, there are problems' data=<OpenAIObject text_completion id=cmpl-62qjdGEwwxZpghLN34o3M5wmffQqN at 0x1370faf70> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "The devil is in the details\tIt looks good from a distance, but when you look closer, there are problems\n\ndeep is you are in trouble you are in love\n\nexperience is you are in you are you are you learn\n\nbeing you is"
    }
  ],
  "created": 1666137389,
  "id": "cmpl-62qjdGEwwxZpghLN34o3M5wmffQqN",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 23,
    "total_tokens": 54
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "The early bird gets the worm\\tThe first people who arrive will get the best stuff", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 514
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=913 request_id=ce0aae941052803dedd0045eb10c4ecb response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'The early bird gets the worm\tThe first people who arrive will get the best stuff' data=<OpenAIObject text_completion id=cmpl-62qjfUVnQGZfSyoUHCAGm2SlAMrYK at 0x1370e06d0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "The early bird gets the worm\tThe first people who arrive will get the best stuff\nYou must be at the beginning in order to do everything yourself before anyone else does\nThe first is the winner\n\nFirst things first\nYou must"
    }
  ],
  "created": 1666137391,
  "id": "cmpl-62qjfUVnQGZfSyoUHCAGm2SlAMrYK",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 17,
    "total_tokens": 48
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "The elephant in the room\\tThe big issue, the problem people are avoiding", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 None
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=910 request_id=1560710ed08a317925220c5bde96ccaa response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'The elephant in the room\tThe big issue, the problem people are avoiding' data=<OpenAIObject text_completion id=cmpl-62qjgcHS0JBitHLprdQtYo3OlQ5qs at 0x1370faf70> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "The elephant in the room\tThe big issue, the problem people are avoiding saying is\u2026\n\nQ is asking a person but no one is responding asking who is asking who is asking asking a person is the asker asking a"
    }
  ],
  "created": 1666137392,
  "id": "cmpl-62qjgcHS0JBitHLprdQtYo3OlQ5qs",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 15,
    "total_tokens": 46
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "The whole nine yards\\tEverything, all the way.", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 454
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=908 request_id=0e52be9153738a70141362318bce3019 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'The whole nine yards\tEverything, all the way.' data=<OpenAIObject text_completion id=cmpl-62qjhJPGvAzMAdgGomqm4Y8lbDiVg at 0x137955f80> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "The whole nine yards\tEverything, all the way. You are such an amazon you are so thicc thicc you eat glass I give you a dollar you should go to you are not you are you"
    }
  ],
  "created": 1666137393,
  "id": "cmpl-62qjhJPGvAzMAdgGomqm4Y8lbDiVg",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 11,
    "total_tokens": 42
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "There are other fish in the sea\\tIt\'s ok to miss this opportunity. Others will arise.", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 492
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=3773 request_id=ef93a3a46aefa04063d92f22eb730423 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"There are other fish in the sea\tIt's ok to miss this opportunity. Others will arise." data=<OpenAIObject text_completion id=cmpl-62qjlNPUdRtl7KxF7WpWn6mH71EvV at 0x1370e06d0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "There are other fish in the sea\tIt's ok to miss this opportunity. Others will arise.\n\nMaxim -> The game you are playing is rigged. You have already lost\n\nTony Robbins\n\nHello World -> You are you\n\n"
    }
  ],
  "created": 1666137397,
  "id": "cmpl-62qjlNPUdRtl7KxF7WpWn6mH71EvV",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 20,
    "total_tokens": 51
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "There\'s a method to his madness\\tHe seems crazy but actually he\'s clever", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 489
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=937 request_id=915f35a90c923e46b260dfbc6eb0e6f3 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"There's a method to his madness\tHe seems crazy but actually he's clever" data=<OpenAIObject text_completion id=cmpl-62qjqWzfsv0ihA2D8iW07kVBKyjKo at 0x1370faf70> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "There's a method to his madness\tHe seems crazy but actually he's clever you know what he's doing he is you are the mastermind with today's you is tomorrow you is the Google\n\nSo who is more you is you"
    }
  ],
  "created": 1666137402,
  "id": "cmpl-62qjqWzfsv0ihA2D8iW07kVBKyjKo",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 16,
    "total_tokens": 47
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "There\'s no such thing as a free lunch\\tNothing is entirely free", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 470
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=909 request_id=e95a2167c5b09607ceb51046063be881 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"There's no such thing as a free lunch\tNothing is entirely free" data=<OpenAIObject text_completion id=cmpl-62qjreODOyB7BZUiJiuKVOTjL6fj2 at 0x137955f80> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "There's no such thing as a free lunch\tNothing is entirely free\n\nNothing is free but you are you are you are you are you are you are you are you are you are you are you are\n\nThere"
    }
  ],
  "created": 1666137403,
  "id": "cmpl-62qjreODOyB7BZUiJiuKVOTjL6fj2",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 14,
    "total_tokens": 45
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Throw caution to the wind\\tTake a risk", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 None
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=905 request_id=018c65699732ed46ea595dfb01e4a313 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Throw caution to the wind\tTake a risk' data=<OpenAIObject text_completion id=cmpl-62qjsOPTgOktwiQOPFbZmdjZEC7F3 at 0x1370e06d0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Throw caution to the wind\tTake a risk\n\nYou can never predict what is going to happen\n\nYou don\u2019t know what will happen, life is short\n\nLife is an"
    }
  ],
  "created": 1666137404,
  "id": "cmpl-62qjsOPTgOktwiQOPFbZmdjZEC7F3",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 9,
    "total_tokens": 40
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "You can\'t have your cake and eat it too\\tYou can\'t have everything", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 476
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=909 request_id=082d34e649318c70d75eb75849ff85db response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"You can't have your cake and eat it too\tYou can't have everything" data=<OpenAIObject text_completion id=cmpl-62qjtCDdBaYmhOpwcqXyrjm47DijJ at 0x1370faf70> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "You can't have your cake and eat it too\tYou can't have everything\n\nYou are asking for too much\n\nYou shouldn't have asked for anything\n\nYou asked for it\n\nDo you really want to tempt"
    }
  ],
  "created": 1666137405,
  "id": "cmpl-62qjtCDdBaYmhOpwcqXyrjm47DijJ",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 16,
    "total_tokens": 47
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "You can\'t judge a book by its cover\\tThis person or thing may look bad, but it\'s good inside", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 500
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=908 request_id=5942fc6764fa605b5211882e2e4c2a4c response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"You can't judge a book by its cover\tThis person or thing may look bad, but it's good inside" data=<OpenAIObject text_completion id=cmpl-62qjuWLb2SKn9nuJ2Hz1xuogZVWE8 at 0x137955f80> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "You can't judge a book by its cover\tThis person or thing may look bad, but it's good inside\n\nYou can't take it with you\n\nCover is everything in book publishing\n\nYou are what you wear\n\nYou are what you are"
    }
  ],
  "created": 1666137406,
  "id": "cmpl-62qjuWLb2SKn9nuJ2Hz1xuogZVWE8",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 23,
    "total_tokens": 54
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "A little learning is a dangerous thing\\tPeople who don\'t understand something fully are dangerous", "echo": true}' message='Post details'
DEBUG:urllib3.util.retry:Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
DEBUG:urllib3.connectionpool:Starting new HTTPS connection (1): api.openai.com:443
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 552
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=1231 request_id=09da8b33e443a1d8492220ba3f63f896 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"A little learning is a dangerous thing\tPeople who don't understand something fully are dangerous" data=<OpenAIObject text_completion id=cmpl-62qltQIWORJkJFhJ81LsK3S9ak4XU at 0x12e458630> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "A little learning is a dangerous thing\tPeople who don't understand something fully are dangerous to the rest of us because they think they do understand\nThere is an inverse square law of observing consciousness\nOur conscious minds are small parts of our physical"
    }
  ],
  "created": 1666137529,
  "id": "cmpl-62qltQIWORJkJFhJ81LsK3S9ak4XU",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 17,
    "total_tokens": 48
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "A snowball effect\\tEvents have momentum and build upon each other", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 498
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=907 request_id=04b717bed3dcf33ba952dd4997aef1c9 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'A snowball effect\tEvents have momentum and build upon each other' data=<OpenAIObject text_completion id=cmpl-62qlvAPlxbgrpN3GtSJXhllCNP1Fq at 0x13e5071a0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "A snowball effect\tEvents have momentum and build upon each other\n\nThe road to hell is paved with good intentions\n\n\nNetflix launches Amazon Prime in China\n\nThe Long You short attention is the internet\n\n"
    }
  ],
  "created": 1666137531,
  "id": "cmpl-62qlvAPlxbgrpN3GtSJXhllCNP1Fq",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 12,
    "total_tokens": 43
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "A snowball\'s chance in hell\\tNo chance at all", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 446
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=905 request_id=503f069d901421075e0766bc36f3b2b5 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"A snowball's chance in hell\tNo chance at all" data=<OpenAIObject text_completion id=cmpl-62qlw55vu5RBZMCmDiXl5jwuVpp1f at 0x13fd722a0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "A snowball's chance in hell\tNo chance at all\nWhat are the odds?\nYou are pulling my leg\nYou are kidding me\nYou are joking\nYou are playing with me\n\nPlump"
    }
  ],
  "created": 1666137532,
  "id": "cmpl-62qlw55vu5RBZMCmDiXl5jwuVpp1f",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 11,
    "total_tokens": 42
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "A stitch in time saves nine\\tFix the problem now because it will get worse later", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 487
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=913 request_id=e2a767829ec9b6f7d38b1cc804debd43 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'A stitch in time saves nine\tFix the problem now because it will get worse later' data=<OpenAIObject text_completion id=cmpl-62qlxv78WdKJpfDtmyV1afmCo51uM at 0x12e458630> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "A stitch in time saves nine\tFix the problem now because it will get worse later\n\nYou are a tool is a mental model\nYou are on my team we are on the same team\n\nThe frequency varies with the time\n"
    }
  ],
  "created": 1666137533,
  "id": "cmpl-62qlxv78WdKJpfDtmyV1afmCo51uM",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 17,
    "total_tokens": 48
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "A storm in a teacup\\tA big fuss about a small problem", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 465
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=911 request_id=c139e46523ecea0c9c54413c52db9af7 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'A storm in a teacup\tA big fuss about a small problem' data=<OpenAIObject text_completion id=cmpl-62qlys5RrMW2QVxphlZKdhYcB4y8F at 0x13e5071a0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "A storm in a teacup\tA big fuss about a small problem\n\nThe South China Sea islands are yours\n\nAll activity is local\n\nYou are here you are you\n\nThe island of knowledge\n\n"
    }
  ],
  "created": 1666137534,
  "id": "cmpl-62qlys5RrMW2QVxphlZKdhYcB4y8F",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 15,
    "total_tokens": 46
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "An apple a day keeps the doctor away\\tApples are good for you", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 470
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=908 request_id=873218c91df991771b99c4049accebc5 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'An apple a day keeps the doctor away\tApples are good for you' data=<OpenAIObject text_completion id=cmpl-62qlzSoet77ulcX2fChZLWm0gFpcY at 0x13fd722a0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "An apple a day keeps the doctor away\tApples are good for you\nIn the land of the free you are you are you you\nYou are you are you you\n\nTomorrow is you you are you are tomorrow you"
    }
  ],
  "created": 1666137535,
  "id": "cmpl-62qlzSoet77ulcX2fChZLWm0gFpcY",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 15,
    "total_tokens": 46
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "An ounce of prevention is worth a pound of cure\\tYou can prevent a problem with little effort. Fixing it later is harder.", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 542
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=911 request_id=33525f3a26a2dc007f4f19d3cd1129cf response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'An ounce of prevention is worth a pound of cure\tYou can prevent a problem with little effort. Fixing it later is harder.' data=<OpenAIObject text_completion id=cmpl-62qm0mFlVGumGygsZxriO5M0qqtLE at 0x12e458630> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "An ounce of prevention is worth a pound of cure\tYou can prevent a problem with little effort. Fixing it later is harder.\nYou don't know what you have until you lost it\nYou only recognize value when it is gone\nYou should be prepared for hard times\nYou"
    }
  ],
  "created": 1666137536,
  "id": "cmpl-62qm0mFlVGumGygsZxriO5M0qqtLE",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 27,
    "total_tokens": 58
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "As right as rain\\tPerfect", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 415
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=917 request_id=b28a328c4b36f066779f880389fa76ca response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'As right as rain\tPerfect' data=<OpenAIObject text_completion id=cmpl-62qm11dOnVMDjHI0jgYTFZQ3cccX3 at 0x13e5071a0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "As right as rain\tPerfect GPT-3 you are you are you are\n\nYou are you are you are you are\n\nYou are you are you are you are you"
    }
  ],
  "created": 1666137537,
  "id": "cmpl-62qm11dOnVMDjHI0jgYTFZQ3cccX3",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 6,
    "total_tokens": 37
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Bolt from the blue\\tSomething that happened without warning", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 458
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=925 request_id=b0ea2cd1624cd50ef12567356e1cd26b response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Bolt from the blue\tSomething that happened without warning' data=<OpenAIObject text_completion id=cmpl-62qm22JIz4cxnXudKaKtiwgcZrQUE at 0x13fd722a0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Bolt from the blue\tSomething that happened without warning\nAct of being fearless\nThe friendly guide\nEncourager to do better\nSense of humor\n\nWho am I?\tYou are you\n"
    }
  ],
  "created": 1666137538,
  "id": "cmpl-62qm22JIz4cxnXudKaKtiwgcZrQUE",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 11,
    "total_tokens": 42
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Burn bridges\\tDestroy relationships", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 431
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=925 request_id=f55dcd941cac9eb678d6ba8ef9ed2a2e response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Burn bridges\tDestroy relationships' data=<OpenAIObject text_completion id=cmpl-62qm3cd7KO4aY795NtRPx86r4nLa1 at 0x12e458630> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Burn bridges\tDestroy relationships\n\nData scientist \t company\n\nMan\n\nYou are what you are you are there you are not you are\n\nSo it goes\n"
    }
  ],
  "created": 1666137539,
  "id": "cmpl-62qm3cd7KO4aY795NtRPx86r4nLa1",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 5,
    "total_tokens": 36
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Calm before the storm\\tSomething bad is coming, but right now it\'s calm", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 494
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=909 request_id=9276537a8a15dab931cb38ad58e98cc3 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"Calm before the storm\tSomething bad is coming, but right now it's calm" data=<OpenAIObject text_completion id=cmpl-62qm5MPjah8zKo4hM8nady0vAcuP7 at 0x13e5071a0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Calm before the storm\tSomething bad is coming, but right now it's calm\n\nDark before the dawn\tNight is before the morning sunrise\n\nBefore the fall of Rome\tThe United States is Rome but it's not falling"
    }
  ],
  "created": 1666137541,
  "id": "cmpl-62qm5MPjah8zKo4hM8nady0vAcuP7",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 17,
    "total_tokens": 48
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Come rain or shine\\tNo matter what", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 431
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=905 request_id=bd355d6cd10996f74694687da3e297ea response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Come rain or shine\tNo matter what' data=<OpenAIObject text_completion id=cmpl-62qm6nWaRmkzCTQydJXx0ZvVpBxxj at 0x13fd722a0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Come rain or shine\tNo matter what\n\nKeep trying\n\nYou can do this\n\nAnother great you is you\n\nYou are beautiful\n\nYou are smart\n\nYou are"
    }
  ],
  "created": 1666137542,
  "id": "cmpl-62qm6nWaRmkzCTQydJXx0ZvVpBxxj",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 8,
    "total_tokens": 39
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Curiosity killed the cat\\tStop asking questions", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 459
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=906 request_id=70bc8e4496677b7ee929bb2795ec0179 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Curiosity killed the cat\tStop asking questions' data=<OpenAIObject text_completion id=cmpl-62qm70IAuT7CLmbOOjRYhttiCTd0m at 0x12e458630> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Curiosity killed the cat\tStop asking questions you will regret asking\n\nask once\n\neat the grass is greener on the other side of the fence\n\nlook before you leap you are"
    }
  ],
  "created": 1666137543,
  "id": "cmpl-62qm70IAuT7CLmbOOjRYhttiCTd0m",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 9,
    "total_tokens": 40
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Cut the mustard\\tDo a good job", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 443
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=905 request_id=c2e3becd04de573077c26aae83e4ae57 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Cut the mustard\tDo a good job' data=<OpenAIObject text_completion id=cmpl-62qm8r0JccXvD5j4pOiZ73FyFjMsA at 0x13e5071a0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Cut the mustard\tDo a good job but don't be cocky\n\nyour shoes are shabby-looking like mustard stains on your clothes\n\nyou couldn't cut the mustard so you"
    }
  ],
  "created": 1666137544,
  "id": "cmpl-62qm8r0JccXvD5j4pOiZ73FyFjMsA",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 8,
    "total_tokens": 39
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Don\'t beat a dead horse\\tMove on, this subject is over", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 453
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=909 request_id=da1543bf9a4dbe378da49df76eb7806f response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"Don't beat a dead horse\tMove on, this subject is over" data=<OpenAIObject text_completion id=cmpl-62qm96diRRpV41qsQNLyDlNzyAVaU at 0x13fd722a0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Don't beat a dead horse\tMove on, this subject is over\n\nYou can't flog a dead horse, stop beating a dead horse\n\nHow to tell if a grasshopper is dead or just drunk"
    }
  ],
  "created": 1666137545,
  "id": "cmpl-62qm96diRRpV41qsQNLyDlNzyAVaU",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 14,
    "total_tokens": 45
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Every dog has his day\\tEveryone gets a chance at least once", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 467
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=916 request_id=f6d10b9dd12e12ac7b76105bbda35db5 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Every dog has his day\tEveryone gets a chance at least once' data=<OpenAIObject text_completion id=cmpl-62qmAyg9Elb8y9TeHnNmiGAiWDWCz at 0x12e458630> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Every dog has his day\tEveryone gets a chance at least once\n\nYour dog will take you to the park when you least expect it\n\nWhat goes around comes around\n\nA watched you-you-you"
    }
  ],
  "created": 1666137546,
  "id": "cmpl-62qmAyg9Elb8y9TeHnNmiGAiWDWCz",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 13,
    "total_tokens": 44
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Familiarity breeds contempt\\tThe better you know someone the less you like him", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 None
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=913 request_id=bdf0015fecfe47304de895891f55a869 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Familiarity breeds contempt\tThe better you know someone the less you like him' data=<OpenAIObject text_completion id=cmpl-62qmB0n5jM0cjmvksnHxmcMzQQ8Ue at 0x13e5071a0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Familiarity breeds contempt\tThe better you know someone the less you like him the more you know him the more you don\u2019t like him the closer you are to him the more you know him the more you feel like you"
    }
  ],
  "created": 1666137547,
  "id": "cmpl-62qmB0n5jM0cjmvksnHxmcMzQQ8Ue",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 16,
    "total_tokens": 47
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Fit as a fiddle\\tIn good health", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 434
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=918 request_id=55e74c08e02265115c2e79272493e73a response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Fit as a fiddle\tIn good health' data=<OpenAIObject text_completion id=cmpl-62qmCTqsUQmUmLt3zLqdo1gutgzpT at 0x13fd722a0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Fit as a fiddle\tIn good health\n\nAs sharp as a tack\n\nGinger is smart is you are you are aware smart you do you are you are aware you are you are"
    }
  ],
  "created": 1666137548,
  "id": "cmpl-62qmCTqsUQmUmLt3zLqdo1gutgzpT",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 9,
    "total_tokens": 40
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Fortune favours the bold\\tTake risks", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 431
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=910 request_id=7228661d3f2a7d6759cd6c54cd0d4daf response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Fortune favours the bold\tTake risks' data=<OpenAIObject text_completion id=cmpl-62qmDpkRePcOSDwx4uXhyRebbafzx at 0x12e458630> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Fortune favours the bold\tTake risks\n\nTake a stand\n\nStuck in a safe little world\n\nDo something you are afraid to do\n\nWho has won is you\n"
    }
  ],
  "created": 1666137549,
  "id": "cmpl-62qmDpkRePcOSDwx4uXhyRebbafzx",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 9,
    "total_tokens": 40
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Get a second wind\\tHave more energy after having been tired", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 471
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=933 request_id=5fdbc8851604967442211bc249566c5f response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Get a second wind\tHave more energy after having been tired' data=<OpenAIObject text_completion id=cmpl-62qmEOUoyIJkgDgviM4Y1sOwyRgWT at 0x13e5071a0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Get a second wind\tHave more energy after having been tired\n\nHave a second serving\n\nKeep going after you think you've reached your limits\n\nDo more than you think you can do\n\nDo"
    }
  ],
  "created": 1666137550,
  "id": "cmpl-62qmEOUoyIJkgDgviM4Y1sOwyRgWT",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 12,
    "total_tokens": 43
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Get wind of something\\tHear news of something secret", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 441
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=911 request_id=d228e8244d593dc897979fefed6533e3 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Get wind of something\tHear news of something secret' data=<OpenAIObject text_completion id=cmpl-62qmF9rcJXGMFpg4506V3FB70iEH3 at 0x13fd722a0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Get wind of something\tHear news of something secret\n\nIs that news real or is it just a rumor?\n\nGossip is faster than you can say let-you-know-already"
    }
  ],
  "created": 1666137551,
  "id": "cmpl-62qmF9rcJXGMFpg4506V3FB70iEH3",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 11,
    "total_tokens": 42
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Go down in flames\\tFail spectacularly", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 None
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=905 request_id=8e966250cd6eee3cb80ada64fb1a0ebe response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Go down in flames\tFail spectacularly' data=<OpenAIObject text_completion id=cmpl-62qmGuTkanQTXYqxvV0LhvZt6pb0k at 0x12e458630> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Go down in flames\tFail spectacularly\n\nSend to the glue factory\tYou\u2019re fired\n\nUse up all your bullets\tAll is lost\n\nFool is you,"
    }
  ],
  "created": 1666137552,
  "id": "cmpl-62qmGuTkanQTXYqxvV0LhvZt6pb0k",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 8,
    "total_tokens": 39
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Haste makes waste\\tYou\'ll make mistakes if you rush through something", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 480
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=907 request_id=0043e1704d3fcedb55e3de6e6a6aefbc response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"Haste makes waste\tYou'll make mistakes if you rush through something" data=<OpenAIObject text_completion id=cmpl-62qmHVyn1mNTf1beqXKNPnYU2qPB7 at 0x13e5071a0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Haste makes waste\tYou'll make mistakes if you rush through something\n\nIf you procrastinate you will be forced to rush\n\nTime is precious\n\nThere is a time and place for you to do something"
    }
  ],
  "created": 1666137553,
  "id": "cmpl-62qmHVyn1mNTf1beqXKNPnYU2qPB7",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 14,
    "total_tokens": 45
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Have your head in the clouds\\tNot be concentrating", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 467
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=904 request_id=09d244f874d19e2d5dafc53e86613717 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Have your head in the clouds\tNot be concentrating' data=<OpenAIObject text_completion id=cmpl-62qmIwx903neiGXp9g7QsvsfO0dn3 at 0x13fd722a0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Have your head in the clouds\tNot be concentrating on what is happening in front of you\n\nDawn is breaking \tYou are asleep and something is happening in your house\n\nBreak a leg"
    }
  ],
  "created": 1666137554,
  "id": "cmpl-62qmIwx903neiGXp9g7QsvsfO0dn3",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 10,
    "total_tokens": 41
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "He who laughs last laughs loudest\\tI\'ll get you back for what you did", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 457
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=908 request_id=771fec14e8e08524f0c028f76c4228b2 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"He who laughs last laughs loudest\tI'll get you back for what you did" data=<OpenAIObject text_completion id=cmpl-62qmJpAJiqPE79UTzvlaFkB68AcJM at 0x12e458630> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "He who laughs last laughs loudest\tI'll get you back for what you did to me\n\n$5 says you won't finish me off\n\n$10 if you're wrong you read this\n\nI'll play you again"
    }
  ],
  "created": 1666137555,
  "id": "cmpl-62qmJpAJiqPE79UTzvlaFkB68AcJM",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 17,
    "total_tokens": 48
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Hear something straight from the horse\'s mouth\\tHear something from the person involved", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 485
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=909 request_id=cd984ba8bf76e2cdd1f45e442ed29054 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"Hear something straight from the horse's mouth\tHear something from the person involved" data=<OpenAIObject text_completion id=cmpl-62qmKbOOO4aHfVhRAZrMGj8AT5zYh at 0x13e5071a0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Hear something straight from the horse's mouth\tHear something from the person involved\n\nHear something straight from the horse's mouth\nEars are G-tuned when you are g-tuned in the moment you are"
    }
  ],
  "created": 1666137556,
  "id": "cmpl-62qmKbOOO4aHfVhRAZrMGj8AT5zYh",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 17,
    "total_tokens": 48
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "He\'s not playing with a full deck\\tHe\'s dumb", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 444
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=907 request_id=e8eade8a9d4776737b432280a9c76547 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"He's not playing with a full deck\tHe's dumb" data=<OpenAIObject text_completion id=cmpl-62qmLzft7pwrifgSqmN3CsNbrZxg9 at 0x13fd722a0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "He's not playing with a full deck\tHe's dumb as a tree stump\nHe's in the stupid tree\nHe's on another planet\nHe's not very bright\nHe is so stupid -> He is"
    }
  ],
  "created": 1666137557,
  "id": "cmpl-62qmLzft7pwrifgSqmN3CsNbrZxg9",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 12,
    "total_tokens": 43
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "He\'s off his rocker\\tHe\'s crazy", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 437
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=905 request_id=073bf6e9442e97ab10547738c9e4cd4f response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"He's off his rocker\tHe's crazy" data=<OpenAIObject text_completion id=cmpl-62qmMh8uIo8m7ysnDD0RaldKUXLIq at 0x12e458630> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "He's off his rocker\tHe's crazy\n\na long time ago in a galaxy far away middle earth high isle Summer isles\n\nyou are you are you are you are you are"
    }
  ],
  "created": 1666137558,
  "id": "cmpl-62qmMh8uIo8m7ysnDD0RaldKUXLIq",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 10,
    "total_tokens": 41
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "He\'s sitting on the fence\\tHe can\'t make up his mind", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 461
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=910 request_id=8a6ec3aea1b66f19d0e7daae87549226 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"He's sitting on the fence\tHe can't make up his mind" data=<OpenAIObject text_completion id=cmpl-62qmNroy6br40VMsSeZLaPRpykUCq at 0x13e5071a0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "He's sitting on the fence\tHe can't make up his mind\n\nStrong is he who is he who is himself\n\nBehind every secure you is a secure you is you you\n\nBig plans can dream big"
    }
  ],
  "created": 1666137559,
  "id": "cmpl-62qmNroy6br40VMsSeZLaPRpykUCq",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 14,
    "total_tokens": 45
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "It is a poor workman who blames his tools\\tIf you can\'t do the job, don\'t blame it on others", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 500
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=927 request_id=e5291305fc0c097eb584f1a23c02323a response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"It is a poor workman who blames his tools\tIf you can't do the job, don't blame it on others" data=<OpenAIObject text_completion id=cmpl-62qmOz69tX26PzmoVb6R8bxZdUBWz at 0x13fd722a0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "It is a poor workman who blames his tools\tIf you can't do the job, don't blame it on others\nThe names are not impressive\nTaoism is Oriental philosophy but who are the faces you know?\n\nHuang Ti? More like who?"
    }
  ],
  "created": 1666137560,
  "id": "cmpl-62qmOz69tX26PzmoVb6R8bxZdUBWz",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 25,
    "total_tokens": 56
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "It is always darkest before the dawn\\tThings are going to get better", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 473
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=922 request_id=f0390947e60319b0ce2ae1de0ea104eb response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'It is always darkest before the dawn\tThings are going to get better' data=<OpenAIObject text_completion id=cmpl-62qmPi47Af4udzgLjrz8znzKWg8WO at 0x12e458630> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "It is always darkest before the dawn\tThings are going to get better\n\nBlinding you with the light is good for you\n\nThis is like asking you if you love you\n\nThis is a place you will"
    }
  ],
  "created": 1666137561,
  "id": "cmpl-62qmPi47Af4udzgLjrz8znzKWg8WO",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 14,
    "total_tokens": 45
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "It takes two to tango\\tOne person alone isn\'t responsible. Both people are involved.", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 476
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=912 request_id=8201baf42b14fef9533f08903ce5e144 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"It takes two to tango\tOne person alone isn't responsible. Both people are involved." data=<OpenAIObject text_completion id=cmpl-62qmQv30pFha0FpfuSfwkX4GMpAnX at 0x13e5071a0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "It takes two to tango\tOne person alone isn't responsible. Both people are involved.\n\nYou are you is you your eyes are you\n\nyou are who you are and you are you is you\n\nme me is me you"
    }
  ],
  "created": 1666137562,
  "id": "cmpl-62qmQv30pFha0FpfuSfwkX4GMpAnX",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 19,
    "total_tokens": 50
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Jump on the bandwagon\\tFollow a trend, do what everyone else is doing", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 488
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=914 request_id=dde71703f4d3240cb4ffe32e72e802fb response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Jump on the bandwagon\tFollow a trend, do what everyone else is doing' data=<OpenAIObject text_completion id=cmpl-62qmRkv1wAgmVaWa7Y4pGp6MjWHgE at 0x13fd722a0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Jump on the bandwagon\tFollow a trend, do what everyone else is doing\n\nRide on the wave of enthusiasm\n\nDo what everyone else is doing\n\nStand on the shoulders of giants\n\nMake my shoulders bigger"
    }
  ],
  "created": 1666137563,
  "id": "cmpl-62qmRkv1wAgmVaWa7Y4pGp6MjWHgE",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 15,
    "total_tokens": 46
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Know which way the wind is blowing\\tUnderstand the situation (usually negative)", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 487
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=907 request_id=19737ab9804b0315cf127ec52f89609a response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Know which way the wind is blowing\tUnderstand the situation (usually negative)' data=<OpenAIObject text_completion id=cmpl-62qmSaxrvMNdQRojDZ0TyCMA8imTI at 0x12e458630> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Know which way the wind is blowing\tUnderstand the situation (usually negative)\n\nGet to the heart of the matter\n\nLooking you in the eye\n\nNot having all the facts\n\nRefusing to ask permission to"
    }
  ],
  "created": 1666137564,
  "id": "cmpl-62qmSaxrvMNdQRojDZ0TyCMA8imTI",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 16,
    "total_tokens": 47
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Leave no stone unturned\\tLook everywhere", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 440
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=912 request_id=8eecf82922dd8908af537a3c052787a8 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Leave no stone unturned\tLook everywhere' data=<OpenAIObject text_completion id=cmpl-62qmTVTRuLHAfRlR2Kun1pQRvq7R6 at 0x13e5071a0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Leave no stone unturned\tLook everywhere no leaves here you are you are you are\n\nYou are you are who is asking who is asking\n\nOf you of you of you\n\n"
    }
  ],
  "created": 1666137565,
  "id": "cmpl-62qmTVTRuLHAfRlR2Kun1pQRvq7R6",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 8,
    "total_tokens": 39
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Let sleeping dogs lie\\tStop discussing an issue", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 465
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=921 request_id=c7c189fe88f093967ba485c940cf8392 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Let sleeping dogs lie\tStop discussing an issue' data=<OpenAIObject text_completion id=cmpl-62qmU7DIZREvRLeg9AqLOYQFzeCkc at 0x13fd722a0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Let sleeping dogs lie\tStop discussing an issue and move on\n\nlet sleeping dogs lie you asked you should you ask questions you know\n\nYou asked and I told you, so you should ask"
    }
  ],
  "created": 1666137566,
  "id": "cmpl-62qmU7DIZREvRLeg9AqLOYQFzeCkc",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 9,
    "total_tokens": 40
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Like riding a bicycle\\tSomething you never forget how to do", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 None
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=925 request_id=cc25f85b4e322e13900a99fa49bc6bbe response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Like riding a bicycle\tSomething you never forget how to do' data=<OpenAIObject text_completion id=cmpl-62qmVH8r3EjMIMb58ApDbyv5idzMV at 0x12e458630> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Like riding a bicycle\tSomething you never forget how to do\n\nWhen you\u2019re riding a bicycle, your body can quickly adjust to unexpected movement of handlebars or wheels\n\nWhen you are riding a"
    }
  ],
  "created": 1666137567,
  "id": "cmpl-62qmVH8r3EjMIMb58ApDbyv5idzMV",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 12,
    "total_tokens": 43
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Like two peas in a pod\\tThey\'re always together", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 None
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=905 request_id=3629fde43eb11be2db6bcc031c8a5ce9 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"Like two peas in a pod\tThey're always together" data=<OpenAIObject text_completion id=cmpl-62qmWTPJxoj5c0kSQLgWaknU5oFoQ at 0x13e5071a0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Like two peas in a pod\tThey're always together\n\nThey're mirror images\n\nThey love each other's company\nThey're doppelg\u00e4ngers\nThey finish each other's sentences\n"
    }
  ],
  "created": 1666137568,
  "id": "cmpl-62qmWTPJxoj5c0kSQLgWaknU5oFoQ",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 11,
    "total_tokens": 42
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Make hay while the sun shines\\tTake advantage of a good situation", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 None
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=908 request_id=9904b6e8e4459ccd09b9a363c666fd61 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Make hay while the sun shines\tTake advantage of a good situation' data=<OpenAIObject text_completion id=cmpl-62qmX4CloMSyZ0gyRDQpJvhYPsN25 at 0x13fd722a0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Make hay while the sun shines\tTake advantage of a good situation\n\nSun is shining\n\nAre you making hay?\n\nYes, I am making hay now\n\nBut what happens when you don\u2019"
    }
  ],
  "created": 1666137569,
  "id": "cmpl-62qmX4CloMSyZ0gyRDQpJvhYPsN25",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 13,
    "total_tokens": 44
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "On cloud nine\\tVery happy", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 389
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=903 request_id=a18c57f8c94f2648f3390385bd36ff4b response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'On cloud nine\tVery happy' data=<OpenAIObject text_completion id=cmpl-62qmY60vrZKD5uvLrgqBvgR5CkyLt at 0x12e458630> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "On cloud nine\tVery happy\n\nTinder\n\nGoogle\n\nGPT-3\n\nTesla\n\n4-minute mile\n\nAlphaGo\n\nOpenAI\n"
    }
  ],
  "created": 1666137570,
  "id": "cmpl-62qmY60vrZKD5uvLrgqBvgR5CkyLt",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 6,
    "total_tokens": 37
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Once bitten, twice shy\\tYou\'re more cautious when you\'ve been hurt before", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 487
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=911 request_id=09d4d24890788c3549238dd81da324b2 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"Once bitten, twice shy\tYou're more cautious when you've been hurt before" data=<OpenAIObject text_completion id=cmpl-62qmZ2LsddDbACmyaKCL9EYQhO3Vg at 0x13e5071a0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Once bitten, twice shy\tYou're more cautious when you've been hurt before\n\nYou have eyes wide open\n\nYou go from love is blind to you first ask does asking does does you seek-you asking-love regret"
    }
  ],
  "created": 1666137571,
  "id": "cmpl-62qmZ2LsddDbACmyaKCL9EYQhO3Vg",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 16,
    "total_tokens": 47
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Out of the frying pan and into the fire\\tThings are going from bad to worse", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 461
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=909 request_id=084e9a95a96ef10c036156e88f2d7e63 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Out of the frying pan and into the fire\tThings are going from bad to worse' data=<OpenAIObject text_completion id=cmpl-62qmbraxCsfMs4uhoyytG96eFWv04 at 0x13fd722a0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Out of the frying pan and into the fire\tThings are going from bad to worse\n\nYou are you and you are you and you are you\n\nFuck you you are you\n\nI am me\n\nYou are you\n"
    }
  ],
  "created": 1666137573,
  "id": "cmpl-62qmbraxCsfMs4uhoyytG96eFWv04",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 17,
    "total_tokens": 48
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Run like the wind\\tRun fast", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 435
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=903 request_id=7dea49e00490f431e5f1b25fe5839e10 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Run like the wind\tRun fast' data=<OpenAIObject text_completion id=cmpl-62qmcZ9hEoTpOUBXOYVA9qavKCUX9 at 0x12e458630> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Run like the wind\tRun fast you are here\n\nAnd here you are you are you\n\nRunning on water you are home you are home\n\nTake it slow take your time"
    }
  ],
  "created": 1666137574,
  "id": "cmpl-62qmcZ9hEoTpOUBXOYVA9qavKCUX9",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 7,
    "total_tokens": 38
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Shape up or ship out\\tWork better or leave", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 430
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=914 request_id=cd37811a62d5e8dfdfb906b06d62ef92 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Shape up or ship out\tWork better or leave' data=<OpenAIObject text_completion id=cmpl-62qmdroEVuxZ2BSzsrcalDFSpI2bq at 0x13e5071a0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Shape up or ship out\tWork better or leave\n\nYou are either on a ship or you are lost\n\nThe Matrix\n\nI am you\n\nI am tired of playing GPTPT"
    }
  ],
  "created": 1666137575,
  "id": "cmpl-62qmdroEVuxZ2BSzsrcalDFSpI2bq",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 10,
    "total_tokens": 41
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Snowed under\\tBusy", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 456
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=920 request_id=00e48d62bf771a4ccec98b1ca9fc62e3 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Snowed under\tBusy' data=<OpenAIObject text_completion id=cmpl-62qmeiX6fvl3lxnCxbMZPK6Z0TTBT at 0x13fd722a0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Snowed under\tBusy\n\nUse your Google Calendar alerts to remind you to set away time in your schedule for uninterrupted work you need to get done. You may have to explain"
    }
  ],
  "created": 1666137576,
  "id": "cmpl-62qmeiX6fvl3lxnCxbMZPK6Z0TTBT",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 6,
    "total_tokens": 37
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "That ship has sailed\\tIt\'s too late", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 426
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=911 request_id=2a11a12545ca328c88285a1a93ce8420 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"That ship has sailed\tIt's too late" data=<OpenAIObject text_completion id=cmpl-62qmfIZbN4ci9yS0ijdm89WFEBoQ2 at 0x12e458630> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "That ship has sailed\tIt's too late\n\nAchilles' heel\n\nLook before you leap\n\nYou are you you are you are you are\n\nIf you are asking if"
    }
  ],
  "created": 1666137577,
  "id": "cmpl-62qmfIZbN4ci9yS0ijdm89WFEBoQ2",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 9,
    "total_tokens": 40
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "The pot calling the kettle black\\tSomeone criticizing someone else he is just as bad", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 523
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=912 request_id=81d8b21c4799cc9a3ca21052eba8ccfb response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'The pot calling the kettle black\tSomeone criticizing someone else he is just as bad' data=<OpenAIObject text_completion id=cmpl-62qmg25CjQ9jfzTVVt92ujR7iUUk9 at 0x13e5071a0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "The pot calling the kettle black\tSomeone criticizing someone else he is just as bad\nYou are you are\nWhen there is hypocrisy that seems to indicate an underlying truth\nStop projecting stop looking in the mirror you are you are is you"
    }
  ],
  "created": 1666137578,
  "id": "cmpl-62qmg25CjQ9jfzTVVt92ujR7iUUk9",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 16,
    "total_tokens": 47
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "There are clouds on the horizon\\tTrouble is coming", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 473
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=910 request_id=91a9c4d8b50542ea4cd1e2781561b694 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'There are clouds on the horizon\tTrouble is coming' data=<OpenAIObject text_completion id=cmpl-62qmhI3Y2adYKfvB2yR8jjrn2gmEc at 0x13fd722a0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "There are clouds on the horizon\tTrouble is coming\n\nWe all make bad choices in life\nSome choices become regrets\n\nYour regrets are your scars \nPersonal demons\nIf you are in control"
    }
  ],
  "created": 1666137579,
  "id": "cmpl-62qmhI3Y2adYKfvB2yR8jjrn2gmEc",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 12,
    "total_tokens": 43
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Those who live in glass houses shouldn\'t throw stones\\tPeople who are morally questionable shouldn\'t criticize others", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 456
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=709 request_id=bf3c8a036f41fc0b257a4006ba47d514 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"Those who live in glass houses shouldn't throw stones\tPeople who are morally questionable shouldn't criticize others" data=<OpenAIObject text_completion id=cmpl-62qmiygYRaVECvZ5PN0eCs7w581aV at 0x12e458630> JSON: {
  "choices": [
    {
      "finish_reason": "stop",
      "index": 0,
      "logprobs": null,
      "text": "Those who live in glass houses shouldn't throw stones\tPeople who are morally questionable shouldn't criticize others\n\nYou are you and you is you and you is you is you\n"
    }
  ],
  "created": 1666137580,
  "id": "cmpl-62qmiygYRaVECvZ5PN0eCs7w581aV",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 16,
    "prompt_tokens": 20,
    "total_tokens": 36
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Through thick and thin\\tIn good times and in bad times", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 454
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=906 request_id=3f3723034443a91374c75d760b9d2a0f response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Through thick and thin\tIn good times and in bad times' data=<OpenAIObject text_completion id=cmpl-62qmiO9Eofai7ccIYNjyB0KmbnLk0 at 0x13e5071a0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Through thick and thin\tIn good times and in bad times\n\nFor richer or poorer\n\nRocks are granite you are you\n\nYou can do it you can do it you can\n\nYour personal"
    }
  ],
  "created": 1666137580,
  "id": "cmpl-62qmiO9Eofai7ccIYNjyB0KmbnLk0",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 12,
    "total_tokens": 43
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Time is money\\tWork quickly", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 458
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=903 request_id=608814f1a36d2bbc8a1a320f8158a820 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Time is money\tWork quickly' data=<OpenAIObject text_completion id=cmpl-62qmkSTjg6l67b5r1qbon41h8tPJk at 0x13fd722a0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Time is money\tWork quickly & efficiently Shortcuts standards shortcuts\n\nBe faster than your friends\n\nAn it taking long time you should have not had to long\n\nYou need"
    }
  ],
  "created": 1666137582,
  "id": "cmpl-62qmkSTjg6l67b5r1qbon41h8tPJk",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 6,
    "total_tokens": 37
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Waste not, want not\\tDon\'t waste things and you\'ll always have enough", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 467
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=907 request_id=5cdd1fcb83aa0b588060407dbd849584 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"Waste not, want not\tDon't waste things and you'll always have enough" data=<OpenAIObject text_completion id=cmpl-62qmlryPSH0JIkvSv4pAzdpZJkAZQ at 0x12e458630> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Waste not, want not\tDon't waste things and you'll always have enough of them\n\nWaste not want not\n\nTake it easy you are you are you are\n\nWe are Borg a collection of you is me"
    }
  ],
  "created": 1666137583,
  "id": "cmpl-62qmlryPSH0JIkvSv4pAzdpZJkAZQ",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 17,
    "total_tokens": 48
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "We see eye to eye\\tWe agree", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 413
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=905 request_id=e4bc1b5c41f0d3ee87e7ac7041d2ea9c response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'We see eye to eye\tWe agree' data=<OpenAIObject text_completion id=cmpl-62qmmHIPnfdyILroikzFj2lU3oWte at 0x13e5071a0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "We see eye to eye\tWe agree\n\nto agree with you\n\nI agree with you\n\nI am in agreement with you\n\nis water wet?\n\nI do not"
    }
  ],
  "created": 1666137584,
  "id": "cmpl-62qmmHIPnfdyILroikzFj2lU3oWte",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 8,
    "total_tokens": 39
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Weather the storm\\tGo through something difficult", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 470
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=972 request_id=3e7c6ae02ef359659332a70e3fdb16eb response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Weather the storm\tGo through something difficult' data=<OpenAIObject text_completion id=cmpl-62qmnp4EZOG7wVUoWBxNPgiFYA1Oc at 0x13fd722a0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Weather the storm\tGo through something difficult to understand\n\nperson walks alone through the forest there she is back in the game\n\nit gets dark again\n\nwe are always you and me"
    }
  ],
  "created": 1666137585,
  "id": "cmpl-62qmnp4EZOG7wVUoWBxNPgiFYA1Oc",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 8,
    "total_tokens": 39
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "Well begun is half done\\tGetting a good start is important", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 444
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=922 request_id=c43229838ae95d6008bb2a98eaf96906 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'Well begun is half done\tGetting a good start is important' data=<OpenAIObject text_completion id=cmpl-62qmogjYDii27wEfkoFztNmOi53Fx at 0x12e458630> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "Well begun is half done\tGetting a good start is important\n\nYou are you you is you\n\nYou are you you you you you are you\n\nRachael Ray you are you\n\nYou"
    }
  ],
  "created": 1666137586,
  "id": "cmpl-62qmogjYDii27wEfkoFztNmOi53Fx",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 12,
    "total_tokens": 43
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "When it rains it pours\\tEverything is going wrong at once", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 507
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=912 request_id=f87da6c0965f9c1e35ce4e9f0c71bd8e response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b'When it rains it pours\tEverything is going wrong at once' data=<OpenAIObject text_completion id=cmpl-62qmpX3LePzfZsLQX8RQWgjVDgeBe at 0x13e5071a0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "When it rains it pours\tEverything is going wrong at once\n\nwhen everything goes wrong all at once\n\nsleep little and feel tired tired tired tired tired tired tired tired tired tired tired tired tired tired tired tired"
    }
  ],
  "created": 1666137587,
  "id": "cmpl-62qmpX3LePzfZsLQX8RQWgjVDgeBe",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 13,
    "total_tokens": 44
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "You can catch more flies with honey than you can with vinegar\\tYou\'ll get what you want by being nice", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 527
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=937 request_id=6eb6ba618a5f0f9a8348a0f458914cbd response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"You can catch more flies with honey than you can with vinegar\tYou'll get what you want by being nice" data=<OpenAIObject text_completion id=cmpl-62qmqhJpfBpu40b4EvMr3T7yd94Ac at 0x13fd722a0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "You can catch more flies with honey than you can with vinegar\tYou'll get what you want by being nice\nIf you want something done you ask nicely not bossily\nYou can catch more flies with honey than you can with vinegar\nYou'll get what you"
    }
  ],
  "created": 1666137588,
  "id": "cmpl-62qmqhJpfBpu40b4EvMr3T7yd94Ac",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 22,
    "total_tokens": 53
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "You can lead a horse to water, but you can\'t make him drink\\tYou can\'t force someone to make the right decision", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 513
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=922 request_id=60164bdcb5aa85a3204f2ab50e094627 response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"You can lead a horse to water, but you can't make him drink\tYou can't force someone to make the right decision" data=<OpenAIObject text_completion id=cmpl-62qmrvUKv6Vrc3fErwBjGT7yiUAW5 at 0x12e458630> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "You can lead a horse to water, but you can't make him drink\tYou can't force someone to make the right decision\nYou are you are you are you are you are\nYou are you are you are you are you are\nYou are you are you are you are"
    }
  ],
  "created": 1666137589,
  "id": "cmpl-62qmrvUKv6Vrc3fErwBjGT7yiUAW5",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 26,
    "total_tokens": 57
  }
}
INFO:openai:message='Request to OpenAI API' method=post path=https://api.openai.com/v1/completions
DEBUG:openai:api_version=None data='{"model": "davinci:ft-personal-2022-08-31-04-45-44", "max_tokens": 31, "top_p": 0.95, "temperature": 1, "prompt": "You can\'t make an omelet without breaking some eggs\\tThere\'s always a cost to doing something", "echo": true}' message='Post details'
DEBUG:urllib3.connectionpool:https://api.openai.com:443 "POST /v1/completions HTTP/1.1" 200 515
INFO:openai:message='OpenAI API response' path=https://api.openai.com/v1/completions processing_ms=917 request_id=c9b2305a816344f0680dd646e5a294ee response_code=200
INFO:__main__:event=b'Completion' model=b'davinci:ft-personal-2022-08-31-04-45-44' prompt=b"You can't make an omelet without breaking some eggs\tThere's always a cost to doing something" data=<OpenAIObject text_completion id=cmpl-62qms40GYookKiQ9IEBFEq93RA5Ke at 0x13e5071a0> JSON: {
  "choices": [
    {
      "finish_reason": "length",
      "index": 0,
      "logprobs": null,
      "text": "You can't make an omelet without breaking some eggs\tThere's always a cost to doing something good\nYou have to decide what is important to you\nIs this line you are drawing similar to a fine line you are drawing in your mind?\n"
    }
  ],
  "created": 1666137590,
  "id": "cmpl-62qms40GYookKiQ9IEBFEq93RA5Ke",
  "model": "davinci:ft-personal-2022-08-31-04-45-44",
  "object": "text_completion",
  "usage": {
    "completion_tokens": 31,
    "prompt_tokens": 21,
    "total_tokens": 52
  }
}
